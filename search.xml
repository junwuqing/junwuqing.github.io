<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>官方文档教程06-使用CouchDB</title>
      <link href="/2022/12/07/guan-fang-wen-dang-jiao-cheng-06-shi-yong-couchdb/"/>
      <url>/2022/12/07/guan-fang-wen-dang-jiao-cheng-06-shi-yong-couchdb/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程06-使用CouchDB"><a href="#官方文档教程06-使用CouchDB" class="headerlink" title="官方文档教程06-使用CouchDB"></a>官方文档教程06-使用CouchDB</h1><p>本教程将描述使用 CouchDB 作为 Hyperledger Fabric 的状态数据库所需的步骤。 到目前为止，您应该熟悉 Fabric 概念并探索了一些示例和教程。</p><p><strong>注意：这些说明使用 Fabric v2.0 版本中引入的新 Fabric 链代码生命周期。 如果您想使用以前的生命周期模型通过链代码使用索引，请访问 v1.4 版本的使用 CouchDB。</strong></p><p>本教程将带您完成以下步骤：</p><ol><li>在 Hyperledger Fabric 中启用 CouchDB</li><li>创建索引</li><li>将索引添加到您的链码文件夹</li><li>部署智能合约</li><li>查询 CouchDB 状态数据库</li><li>使用查询和索引的最佳实践</li><li>使用分页查询 CouchDB 状态数据库</li><li>更新索引</li><li>删除索引</li></ol><p>要更深入地了解 CouchDB，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/latest/couchdb_as_state_database.html">CouchDB 作为状态数据库</a>，有关 Fabric 账本的更多信息，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/latest/ledger/ledger.html">Ledger</a>主题。按照下面的教程，详细了解如何在您的 区块链网络。</p><p>在本教程中，我们将使用<a href="https://github.com/hyperledger/fabric-samples/blob/main/asset-transfer-ledger-queries/chaincode-go">资产转移账本查询示例</a>作为我们的用例来演示如何将 CouchDB 与 Fabric 一起使用，包括 对状态数据库执行 JSON 查询。您应该已完成<a href="https://hyperledger-fabric.readthedocs.io/en/latest/install.html">安装结构和结构示例</a>任务。</p><h2 id="1-为什么选择CoouchDB？"><a href="#1-为什么选择CoouchDB？" class="headerlink" title="1.为什么选择CoouchDB？"></a>1.为什么选择CoouchDB？</h2><p>Fabric 支持两种类型的对等状态数据库。 LevelDB 是嵌入在peer节点中的默认状态数据库。LevelDB 将链码数据存储为简单的键值对，仅支持键、键范围和组合键查询。CouchDB 是一个可选的备用状态数据库，它允许您将ledger上的数据建模为 JSON，并针对数据值而不是键发出丰富的查询。</p><p>为了利用 CouchDB 的优势，即基于内容的 JSON 查询，您的数据必须以 JSON 格式建模。 在设置网络之前，您必须决定是使用 LevelDB 还是 CouchDB。 由于数据兼容性问题，不支持将peer节点从使用 LevelDB 切换到 CouchDB。 网络上的所有peer必须使用相同的数据库类型。 如果混合使用 JSON 和二进制数据值，您仍然可以使用 CouchDB，但是只能根据键、键范围和复合键查询来查询二进制值。</p><h2 id="2-在Hyperledger-Fabric中启用CouchDB"><a href="#2-在Hyperledger-Fabric中启用CouchDB" class="headerlink" title="2.在Hyperledger Fabric中启用CouchDB"></a>2.在Hyperledger Fabric中启用CouchDB</h2><p>CouchDB 作为一个单独的数据库进程与对等方一起运行。 在设置、管理和操作方面还有其他注意事项。 CouchDB 的 Docker 映像可用，我们建议它与peer在同一台服务器上运行。 您需要为每个peer设置一个 CouchDB 容器，并通过更改 core.yaml 中的配置以指向 CouchDB 容器来更新每个peer容器。 core.yaml 文件必须位于环境变量 FABRIC_CFG_PATH 指定的目录中：</p><ul><li>对于 Docker 部署，core.yaml 已预先配置并位于peer容器 FABRIC_CFG_PATH 文件夹中。 但是，当使用 Docker 环境时，您可以传递环境变量来覆盖 core.yaml 属性，例如 CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS 来设置 CouchDB 地址。</li><li>对于本机二进制部署，core.yaml 包含在发布工件分发中。</li></ul><p>编辑 core.yaml 的 stateDatabase 部分。 指定 CouchDB 作为 stateDatabase 并填写关联的 couchDBConfig 属性。 有关详细信息，请参阅 CouchDB 配置。</p><h2 id="3-创建索引"><a href="#3-创建索引" class="headerlink" title="3.创建索引"></a>3.创建索引</h2><p>为什么索引很重要？</p><p>索引允许查询数据库而不必检查每个查询的每一行，从而使它们运行得更快、更有效。 通常，索引是为频繁出现的查询条件建立的，从而可以更有效地查询数据。 要利用 CouchDB 的主要优势——对 JSON 数据执行丰富查询的能力——不需要索引，但强烈建议使用索引以提高性能。 此外，如果查询中需要排序，CouchDB 需要一个包含排序字段的索引。</p><p><strong>注意：没有索引的 JSON 查询可能有效，但会在peer日志中抛出一条警告，指出未找到索引。 然而，如果富查询（富查询 ：对数据的某一个属性进行查询获取所有满足条件的数据）包含排序规范，则需要该字段的索引； 否则，查询将失败并抛出错误。</strong></p><p>为了演示构建索引，我们将使用资产转移legder查询示例中的数据。 在此示例中，资产数据结构定义为：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Asset</span> struct <span class="token punctuation">&#123;</span><span class="token comment">//docType is used to distinguish the various types of objects in state database</span><span class="token comment">//docType用于区分状态数据库中各种类型的对象</span>        DocType        <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"docType"</span><span class="token template-punctuation string">`</span></span>  <span class="token comment">//the field tags are needed to keep case from bouncing around</span><span class="token comment">//需要字段标签以防止大小写跳动</span>        <span class="token constant">ID</span>             <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"ID"</span><span class="token template-punctuation string">`</span></span>             Color          <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"color"</span><span class="token template-punctuation string">`</span></span>        Size           int    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"size"</span><span class="token template-punctuation string">`</span></span>        Owner          <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"owner"</span><span class="token template-punctuation string">`</span></span>        AppraisedValue int    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"appraisedValue"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此结构中，属性（文档类型、ID、颜色、大小、所有者、评估值）定义与资产关联的ledger数据。 属性 docType 是一种模式，可用于链码中以区分链码命名空间中可能需要单独查询的不同数据类型。使用 CouchDB 时，每个链码都表示为它自己的 CouchDB 数据库，也就是说，每个链码都有自己的键名称空间。</p><p>关于 Asset 数据结构，docType 用于标识此 JSON 文档表示资产。 链码命名空间中可能还有其他 JSON 文档类型。 任何 JSON 字段都可以在 CouchDB JSON 查询中使用。</p><p>在定义用于链码查询的索引时，每个索引都必须在其自己的扩展名为 *.json 的文本文件中定义，并且索引定义必须采用 CouchDB 索引 JSON 格式。</p><p>要定义索引，需要三个信息：</p><ul><li>字段：这些是要查询的字段</li><li>名称：索引的名称</li><li>类型：在此上下文中始终为“json”</li></ul><p>例如，一个名为 foo 的字段的名为 foo-index 的简单索引。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"foo-index"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span> <span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以选择在索引定义上指定设计文档属性 ddoc。 设计文档是一种旨在包含索引的 CouchDB 结构。 可以将索引分组到设计文档中以提高效率，但 CouchDB 建议每个设计文档一个索引。</p><p><strong>提示：定义索引时，最好将 ddoc 属性和值与索引名称一起包含在内。 包含此属性非常重要，以确保您可以在以后需要时更新索引。 它还使您能够明确指定要在查询中使用的索引。</strong></p><p>这是资产转移leder查询示例中索引定义的另一个示例，索引名称 indexOwner 使用多个字段 docType 和 owner 并包括 ddoc 属性：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token comment">// Names of the fields to be queried</span>      <span class="token comment">// 需要查询的字段名称</span>      <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"docType"</span><span class="token punctuation">,</span><span class="token string">"owner"</span><span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// (optional) Name of the design document in which the index will be created.</span>    <span class="token comment">//（可选）将在其中创建索引的设计文档的名称</span>  <span class="token property">"ddoc"</span><span class="token operator">:</span><span class="token string">"indexOwnerDoc"</span><span class="token punctuation">,</span>   <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"indexOwner"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，如果设计文档 indexOwnerDoc 尚不存在，则会在部署索引时自动创建它。可以使用字段列表中指定的一个或多个属性来构造索引，并且可以指定属性的任意组合。对于同一 docType，一个属性可以存在于多个索引中。 在以下示例中，index1 仅包含属性 owner，index2 包含属性 owner 和 color，index3 包含属性 owner、color 和 size。 另外，请注意每个索引定义都有自己的 ddoc 值，遵循 CouchDB 推荐的做法。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"owner"</span><span class="token punctuation">]</span> <span class="token comment">// Names of the fields to be queried</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"ddoc"</span><span class="token operator">:</span><span class="token string">"index1Doc"</span><span class="token punctuation">,</span> <span class="token comment">// (optional) Name of the design document in which the index will be created.</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"index1"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>  <span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"owner"</span><span class="token punctuation">,</span> <span class="token string">"color"</span><span class="token punctuation">]</span> <span class="token comment">// Names of the fields to be queried</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"ddoc"</span><span class="token operator">:</span><span class="token string">"index2Doc"</span><span class="token punctuation">,</span> <span class="token comment">// (optional) Name of the design document in which the index will be created.</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"index2"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>  <span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"owner"</span><span class="token punctuation">,</span> <span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token comment">// Names of the fields to be queried</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"ddoc"</span><span class="token operator">:</span><span class="token string">"index3Doc"</span><span class="token punctuation">,</span> <span class="token comment">// (optional) Name of the design document in which the index will be created.</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"index3"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常，您应该为索引字段建模以匹配将在查询过滤器和排序中使用的字段。 有关以 JSON 格式构建索引的更多详细信息，请参阅 CouchDB 文档。</p><h2 id="4-将索引添加到链码文件夹"><a href="#4-将索引添加到链码文件夹" class="headerlink" title="4.将索引添加到链码文件夹"></a>4.将索引添加到链码文件夹</h2><p>最终确定索引后，您需要将其与链码打包在一起以便部署，方法是将其放置在适当的元数据文件夹中。您可以使用 peer lifecycle chaincode 命令打包和安装链码。JSON 索引文件必须位于路径 META-INF/statedb/couchdb/indexes 下，该路径位于链码所在的目录内。</p><p>下面的资产转移ledger查询示例说明了如何将索引与链码打包在一起。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/latest/_images/couchdb_tutorial_pkg_example.png" alt="Marbles Chaincode Index Package"></p><p>此示例包含一个名为 indexOwnerDoc 的索引，以支持资产所有者的查询：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"index"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"fields"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"docType"</span><span class="token punctuation">,</span><span class="token string">"owner"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"ddoc"</span><span class="token operator">:</span><span class="token string">"indexOwnerDoc"</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"indexOwner"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-启动网络"><a href="#5-启动网络" class="headerlink" title="5.启动网络"></a>5.启动网络</h2><p>我们将启动 Fabric 测试网络并使用它来部署资产转移ledger查询链码。 使用以下命令导航到 Fabric 示例中的 test-network 目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于本教程，我们希望从已知的初始状态开始操作。 以下命令将杀死任何活动的或陈旧的 Docker 容器并删除以前生成的工件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您之前没有完成本教程，则需要先提供链码依赖项，然后我们才能将其部署到网络。 运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/asset-transfer-ledger-queries/chaincode-go<span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on go mod vendor<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 test-network 目录中，使用以下命令使用 CouchDB 部署测试网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh up createChannel <span class="token parameter variable">-s</span> couchdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建两个使用 CouchDB 作为状态数据库的结构peer节点。 它还将创建一个ordering节点和一个名为 mychannel 的channel。</p><h2 id="6-部署智能合约"><a href="#6-部署智能合约" class="headerlink" title="6.部署智能合约"></a>6.部署智能合约</h2><p>您可以使用test-network脚本将资产转移ledger查询智能合约部署到channel。 运行以下命令将智能合约部署到 mychannel：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCC <span class="token parameter variable">-ccn</span> ledger <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-ledger-queries/chaincode-go/ <span class="token parameter variable">-ccl</span> go <span class="token parameter variable">-ccep</span> <span class="token string">"OR('Org1MSP.peer','Org2MSP.peer')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，我们使用 -ccep 标志来部署具有“OR(‘Org1MSP.peer’,’Org2MSP.peer’)”背书策略的智能合约。 这允许任何一个组织在没有得到另一个组织的认可的情况下创建资产。</p><h2 id="7-验证索引已部署"><a href="#7-验证索引已部署" class="headerlink" title="7.验证索引已部署"></a>7.验证索引已部署</h2><p>一旦链代码安装在peer节点上并部署到channel中，索引将被部署到每个peer节点的 CouchDB 状态数据库中。您可以通过检查 Docker 容器中的peer日志来验证 CouchDB 索引是否已成功创建。</p><p>要查看对等 Docker 容器中的日志，请打开一个新的终端窗口并运行以下命令以 grep 获取索引已创建的消息确认。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs peer0.org1.example.com  <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"CouchDB index"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该会看到如下所示的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>couchdb<span class="token punctuation">]</span> createIndex -<span class="token operator">></span> INFO 072 Created CouchDB index <span class="token punctuation">[</span>indexOwner<span class="token punctuation">]</span> <span class="token keyword">in</span> state database <span class="token punctuation">[</span>mychannel_ledger<span class="token punctuation">]</span> using design document <span class="token punctuation">[</span>_design/indexOwnerDoc<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-查询-CouchDB-状态数据库"><a href="#8-查询-CouchDB-状态数据库" class="headerlink" title="8.查询 CouchDB 状态数据库"></a>8.查询 CouchDB 状态数据库</h2><p>现在索引已在 JSON 文件中定义并与链码一起部署，链码函数可以对 CouchDB 状态数据库执行 JSON 查询。</p><p>在查询中指定索引名称是可选的。 如果不指定，查询的字段已经存在索引，则自动使用已有索引。</p><p><strong>提示：使用 use_index 关键字在查询中显式包含索引名称是一种很好的做法。 没有它，CouchDB 可能会选择一个不太理想的索引。 此外，CouchDB 可能根本不使用索引，而且您可能没有意识到，在测试期间的容量很小。只有在更高的成交量上，您才会意识到性能下降，因为 CouchDB 没有使用索引。</strong></p><h2 id="9-在链码中构建查询"><a href="#9-在链码中构建查询" class="headerlink" title="9.在链码中构建查询"></a>9.在链码中构建查询</h2><p>您可以使用链码中定义的查询ledger上的数据执行 JSON 查询。 资产转移ledger查询示例包括两个 JSON 查询函数：</p><ul><li><p>查询资产</p><p>临时 JSON 查询的示例。 这是一个可以将选择器 JSON 查询字符串传递给函数的查询。 此查询对于需要在运行时动态构建自己的查询的客户端应用程序非常有用。 有关查询选择器的更多信息，请参阅 CouchDB 选择器语法。</p></li><li><p>通过所属者查询资产</p><p>参数化查询示例，其中查询在链码中定义，但允许传入查询参数。在这种情况下，函数接受单个参数，即资产所有者。 然后，它使用 JSON 查询语法在状态数据库中查询与“资产”的文档类型和所有者 ID 匹配的 JSON 文档。</p></li></ul><h2 id="10-使用-peer-命令运行查询"><a href="#10-使用-peer-命令运行查询" class="headerlink" title="10.使用 peer 命令运行查询"></a>10.使用 peer 命令运行查询</h2><p>在没有客户端应用程序的情况下，我们可以使用 peer 命令来测试链码中定义的查询。 我们将使用 peer chaincode query 命令来使用资产索引 indexOwner 并使用 QueryAssets 函数查询“tom”拥有的所有资产。</p><p>在查询数据库之前，我们应该添加一些数据。 以 Org1 身份运行以下命令以创建“tom”拥有的资产：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["CreateAsset","asset1","blue","5","tom","35"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，查询 tom 拥有的所有资产：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Rich Query with index name explicitly specified:// 明确指定索引名称的富查询：peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssets", "&#123;\"selector\":&#123;\"docType\":\"asset\",\"owner\":\"tom\"&#125;, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]&#125;"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>深入研究上面的查询命令，有三个有趣的参数：</p><ul><li><p><code>QueryAssets</code></p><p>资产链码中函数的名称。 正如您在下面的链码函数中看到的，QueryAssets() 调用 getQueryResultForQueryString()，然后将 queryString 传递给 getQueryResult() shim API，该 API 对状态数据库执行 JSON 查询。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SimpleChaincode<span class="token punctuation">)</span> <span class="token function">QueryAssets</span><span class="token punctuation">(</span>ctx contractapi<span class="token punctuation">.</span>TransactionContextInterface<span class="token punctuation">,</span> queryString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Asset<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getQueryResultForQueryString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> queryString<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>&#123;&quot;selector&quot;:&#123;&quot;docType&quot;:&quot;asset&quot;,&quot;owner&quot;:&quot;tom&quot;&#125;</code></p><p>这是一个特别选择器字符串的示例，它查询所有者属性值为 tom 的资产类型的所有文档。</p></li><li><p><code>&quot;use_index&quot;:[&quot;_design/indexOwnerDoc&quot;, &quot;indexOwner&quot;]</code></p><p>指定设计文档名称 indexOwnerDoc 和索引名称 indexOwner。 在此示例中，选择器查询显式包含索引名称，该名称通过使用 use_index 关键字指定。 回顾上面的索引定义创建一个索引，它包含一个设计文档，“ddoc”：“indexOwnerDoc”。 对于 CouchDB，如果您计划在查询中显式包含索引名称，则索引定义必须包含 ddoc 值，以便可以使用 use_index 关键字进行引用。</p></li></ul><p>查询成功运行，索引被使用，结果如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"docType"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-使用查询和索引的最佳实践"><a href="#11-使用查询和索引的最佳实践" class="headerlink" title="11.使用查询和索引的最佳实践"></a>11.使用查询和索引的最佳实践</h2><p>使用索引的查询将更快地完成，而无需扫描 CouchDB 中的整个数据库。 了解索引将使您能够编写查询以获得更好的性能并帮助您的应用程序处理更大量的数据。</p><p>规划使用链码安装的索引也很重要。 您应该只为每个支持大部分查询的链码安装几个索引。 添加过多的索引，或在索引中使用过多的字段，都会降低网络的性能。 这是因为索引在每个块提交后都会更新。</p><p>本节中的示例将帮助演示查询如何使用索引以及哪种类型的查询将具有最佳性能。 编写查询时请记住以下几点：</p><ul><li>索引中的所有字段也必须位于要使用的索引的查询的选择器或排序部分中。</li><li>更复杂的查询将具有较低的性能并且不太可能使用索引。</li><li>您应该避免会导致全表扫描或全索引扫描的运算符，例如 $or、$in 和 $regex。</li></ul><p>在本教程的前一部分中，您对资产链码发出了以下查询：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Example one: query fully supported by the index// 示例一：索引完全支持的查询<span class="token builtin class-name">export</span> <span class="token assign-left variable">CHANNEL_NAME</span><span class="token operator">=</span>mychannelpeer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssets", "&#123;\"selector\":&#123;\"docType\":\"asset\",\"owner\":\"tom\"&#125;, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]&#125;"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>资产转移ledger查询链码与 indexOwnerDoc 索引一起安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"index"</span>:<span class="token punctuation">&#123;</span><span class="token string">"fields"</span>:<span class="token punctuation">[</span><span class="token string">"docType"</span>,<span class="token string">"owner"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>,<span class="token string">"ddoc"</span><span class="token builtin class-name">:</span><span class="token string">"indexOwnerDoc"</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span><span class="token string">"indexOwner"</span>,<span class="token string">"type"</span><span class="token builtin class-name">:</span><span class="token string">"json"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，查询中的字段 docType 和 owner 都包含在索引中，使其成为完全受支持的查询。 因此，该查询将能够使用索引中的数据，而无需搜索整个数据库。 完全支持的查询（例如这个查询）将比链代码中的其他查询返回得更快。</p><p>如果您向上面的查询添加额外的字段，它仍将使用索引。 但是，查询还必须扫描数据库以查找额外的字段，从而导致更长的响应时间。 例如，下面的查询仍将使用索引，但返回时间将比前面的示例更长。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Example two: query fully supported by the index with additional data// 示例二：索引完全支持附加数据的查询peer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssets", "&#123;\"selector\":&#123;\"docType\":\"asset\",\"owner\":\"tom\",\"color\":\"blue\"&#125;, \"use_index\":[\"/indexOwnerDoc\", \"indexOwner\"]&#125;"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不包含索引中所有字段的查询将不得不扫描整个数据库。 例如，下面的查询搜索所有者，但不指定所拥有项目的类型。 由于 indexOwnerDoc 同时包含 owner 和 docType 字段，因此该查询将无法使用索引。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Example three: query not supported by the index// 示例三：索引不支持的查询peer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssets", "&#123;\"selector\":&#123;\"owner\":\"tom\"&#125;, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]&#125;"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通常，更复杂的查询将有更长的响应时间，并且被索引支持的机会更低。 $or、$in 和 $regex 等运算符通常会导致查询扫描完整索引或根本不使用索引。</p><p>例如，下面的查询包含一个 $or 术语，它将搜索 tom 拥有的每项资产和每一项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Example four: query with <span class="token variable">$or</span> supported by the index// 示例四：使用 <span class="token variable">$or</span> 索引支持的查询peer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssets", "&#123;\"selector\":&#123;\"$or\":[&#123;\"docType\":\"asset\"&#125;,&#123;\"owner\":\"tom\"&#125;]&#125;, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]&#125;"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此查询仍将使用索引，因为它搜索包含在 indexOwnerDoc 中的字段。 但是，查询中的 $or 条件需要扫描索引中的所有项，从而导致响应时间较长。</p><p>下面是索引不支持的复杂查询示例。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Example five: Query with <span class="token variable">$or</span> not supported by the index// 示例五：使用 <span class="token variable">$or</span> 索引不支持的查询peer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssets", "&#123;\"selector\":&#123;\"$or\":[&#123;\"docType\":\"asset\",\"owner\":\"tom\"&#125;,&#123;\"color\":\"yellow\"&#125;]&#125;, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]&#125;"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该查询搜索 tom 拥有的所有资产或任何其他黄色的项目。这个查询不会使用索引，因为它需要搜索整个表以满足 $or 条件。根据ledger上的数据量，此查询将需要很长时间才能响应或可能超时。</p><p>虽然遵循查询的最佳实践很重要，但使用索引并不是收集大量数据的解决方案。 区块链数据结构经过优化以验证和确认交易，不适合数据分析或报告。如果您想构建一个仪表板作为您应用程序的一部分或分析来自您网络的数据，最佳做法是查询一个链下数据库，该数据库从您的peer复制数据这将使您能够在不降低网络性能或中断交易的情况下了解区块链上的数据。</p><p>对于接收到的每个块，块侦听器应用程序将遍历块事务并使用从每个有效事务的 rwset 写入的键/值来构建数据存储。 基于 Peer 通道的事件服务提供可重放的事件以确保下游数据存储的完整性。 有关如何使用事件侦听器将数据写入外部数据库的示例，请访问 Fabric 示例中的链外数据示例。</p><h2 id="12-使用分页查询-CouchDB-状态数据库"><a href="#12-使用分页查询-CouchDB-状态数据库" class="headerlink" title="12.使用分页查询 CouchDB 状态数据库"></a>12.使用分页查询 CouchDB 状态数据库</h2><p>当 CouchDB 查询返回大型结果集时，可以使用一组 API，链码可以调用这些 API 对结果列表进行分页。 分页提供了一种通过指定页面大小和起点（指示结果集从何处开始的书签）来划分结果集的机制。 客户端应用程序迭代调用执行查询的链码，直到不再返回任何结果。 有关更多信息，请参阅有关 CouchDB 分页的主题.</p><p>我们将使用资产转移ledger查询示例函数 QueryAssetsWithPagination 来演示如何在链码和客户端应用程序中实现分页。</p><ul><li><p><strong>QueryAssetsWithPagination</strong> –</p><p>带分页的特别 JSON 查询示例。 这是一个可以将选择器字符串传递到与上述示例类似的函数中的查询。在这种情况下，pageSize 也包含在查询中以及书签中。</p><p>为了演示分页，需要更多的数据。 此示例假定您已经从上面添加了 asset1。 在peer容器中运行以下命令以创建“tom”拥有的另外四个资产，从而创建“tom”拥有的总共五个资产：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span>  <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["CreateAsset","asset2","yellow","5","tom","35"]&#125;'</span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span>  <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["CreateAsset","asset3","green","6","tom","20"]&#125;'</span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span>  <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["CreateAsset","asset4","purple","7","tom","20"]&#125;'</span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span>  <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["CreateAsset","asset5","blue","8","tom","40"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了前面示例中查询的参数之外，QueryAssetsWithPagination 添加了页面大小和书签。 PageSize 指定每次查询返回的记录数。 书签是一个“锚点”，告诉 couchDB 从哪里开始页面。 （每页结果返回一个唯一的书签。）</p></li><li><p><code>QueryAssetsWithPagination</code></p><p>正如您在下面的链码函数中看到的，QueryAssetsWithPagination() 调用 getQueryResultForQueryStringWithPagination()，然后将 queryString 以及书签和页面大小传递给 GetQueryResultWithPagination() shim API，该 API 对状态数据库执行分页的 JSON 查询。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>SimpleChaincode<span class="token punctuation">)</span> <span class="token function">QueryAssetsWithPagination</span><span class="token punctuation">(</span>        ctx contractapi<span class="token punctuation">.</span>TransactionContextInterface<span class="token punctuation">,</span>        queryString<span class="token punctuation">,</span>        pageSize <span class="token builtin">int</span><span class="token punctuation">,</span>        bookmark <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>PaginatedQueryResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getQueryResultForQueryStringWithPagination</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> queryString<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span> bookmark<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下示例是一个调用 QueryAssetsWithPagination 的 peer 命令，其 pageSize 为 3 且未指定书签。</p><p><strong>提示：当没有指定书签时，查询从记录的“第一”页开始。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Rich Query with index name explicitly specified and a page size of <span class="token number">3</span>:peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssetsWithPagination", "&#123;\"selector\":&#123;\"docType\":\"asset\",\"owner\":\"tom\"&#125;, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]&#125;","3",""]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>收到以下响应（为清楚起见添加了回车），返回了五个资产中的三个，因为 pagsize 设置为 3：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"records"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token property">"docType"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token property">"docType"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token property">"docType"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"fetchedRecordsCount"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"bookmark"</span><span class="token operator">:</span><span class="token string">"g1AAAABJeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqzJRYXp5YYg2Q5YLI5IPUgSVawJIjFXJKfm5UFANozE8s"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：书签由 CouchDB 为每个查询唯一生成，并代表结果集中的占位符。 在查询的后续迭代中传递返回的书签以检索下一组结果。</strong></p><p>下面是调用 QueryAssetsWithPagination 的 peer 命令，pageSize 为 3。请注意，这次查询包含从上一个查询返回的书签。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssetsWithPagination", "&#123;\"selector\":&#123;\"docType\":\"asset\",\"owner\":\"tom\"&#125;, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]&#125;","3","g1AAAABJeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqzJRYXp5YYg2Q5YLI5IPUgSVawJIjFXJKfm5UFANozE8s"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>收到以下响应（为清楚起见添加了回车）。 检索最后两条记录：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"records"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token property">"docType"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"purple"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token property">"docType"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"fetchedRecordsCount"</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"bookmark"</span><span class="token operator">:</span><span class="token string">"g1AAAABJeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqzJRYXp5aYgmQ5YLI5IPUgSVawJIjFXJKfm5UFANqBE80"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回的书签标记了结果集的结尾。 如果我们尝试使用此书签进行查询，将不会返回更多结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> <span class="token variable">$CHANNEL_NAME</span> <span class="token parameter variable">-n</span> ledger <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["QueryAssetsWithPagination", "&#123;\"selector\":&#123;\"docType\":\"asset\",\"owner\":\"tom\"&#125;, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]&#125;","3","g1AAAABJeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqzJRYXp5aYgmQ5YLI5IPUgSVawJIjFXJKfm5UFANqBE80"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有关客户端应用程序如何使用分页遍历 JSON 查询结果集的示例，请在资产转移分类帐查询示例中搜索 getQueryResultForQueryStringWithPagination 函数。</p></li></ul><h3 id="范围查询分页"><a href="#范围查询分页" class="headerlink" title="范围查询分页"></a>范围查询分页</h3><p>GetStateByRangeWithPagination shim API 也会返回书签，以便应用程序在使用 LevelDB 或 CouchDB 状态数据库时可以对范围查询结果进行分页。返回的书签表示下一个startKey，可用于检索下一页范围查询结果。 一旦结果用完，返回的书签将是一个空字符串。 如果在范围查询中指定了endKey，查询完了，则在CouchDB时返回的书签为传入的endKey，在LevelDB时为空字符串。</p><p>有关客户端应用程序如何使用分页遍历范围查询结果集的示例，请在资产转移分类帐查询示例中搜索 GetAssetsByRangeWithPagination 函数。</p><h3 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h3><p>随着时间的推移，可能需要更新索引。 安装的链代码的后续版本中可能存在相同的索引。 为了更新索引，原始索引定义必须包含设计文档 ddoc 属性和索引名称。要更新索引定义，请使用相同的索引名称，但更改索引定义，只需编辑索引 JSON 文件并从索引中添加或删除字段。Fabric 只支持索引类型 JSON。 不支持更改索引类型。 当链码定义提交到channel时，更新的索引定义将重新部署到peer的状态数据库。 对索引名称或 ddoc 属性的更改将导致创建新索引，并且原始索引在 CouchDB 中保持不变，直到它被删除。</p><p><strong>注意：如果状态数据库具有大量数据，则需要一些时间才能重新构建索引，在此期间，链码调用该问题可能会失败或超时。</strong></p><h3 id="迭代您的索引定义"><a href="#迭代您的索引定义" class="headerlink" title="迭代您的索引定义"></a>迭代您的索引定义</h3><p>如果您可以在开发环境中访问Peer的CouchDB状态数据库，则可以迭代测试各种索引以支持链码查询。链表的任何更改都需要重新部署。 使用CouchDB Fauxton接口或命令行curl实用程序来创建和更新索引。</p><p><strong>注意：Fauxton接口是用于创建，更新和部署索引到CouchDB的Web UI。如果您想尝试此界面，则有一个fauxton版本的索引样本中的fauxton版本的示例。 如果您已经使用CouchDB部署了测试网络，则可以通过打开浏览器并导航到http：// localhost：5984/_utils来加载FAUXTON接口。</strong></p><p>另外，如果您不喜欢使用FAUXTON UI，则以下是curl命令的示例，可用于在数据库MyChannel_ledger上创建索引：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Index <span class="token keyword">for</span> docType, owner.// 所有者Doctype的索引。// Example <span class="token function">curl</span> <span class="token builtin class-name">command</span> line to define index <span class="token keyword">in</span> the CouchDB channel_chaincode database// 示例curl命令行以定义couchdb channel_chaincode数据库中的索引 <span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>        <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>index<span class="token entity" title="\&quot;">\"</span>:&#123;<span class="token entity" title="\&quot;">\"</span>fields<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span>docType<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>owner<span class="token entity" title="\&quot;">\"</span>]&#125;, \          <span class="token entity" title="\&quot;">\"</span>name<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>indexOwner<span class="token entity" title="\&quot;">\"</span>, \          <span class="token entity" title="\&quot;">\"</span>ddoc<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>indexOwnerDoc<span class="token entity" title="\&quot;">\"</span>, \          <span class="token entity" title="\&quot;">\"</span>type<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>json<span class="token entity" title="\&quot;">\"</span>&#125;"</span> http://username:password@hostname:port/mychannel_ledger/_index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：如果您使用的是使用CouchDB配置的测试网络，请替换主机名：端口：5984和用户名：带有admin：adminpw的密码。</strong></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>索引删除不是由Fabric工具管理的。如果您需要删除索引，请手动针对数据库发出curl命令，或使用FAUXTON接口删除它。</p><p>删除索引的curl命令的格式将是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE http://admin:adminpw@localhost:5984/<span class="token punctuation">&#123;</span>database_name<span class="token punctuation">&#125;</span>/_index/<span class="token punctuation">&#123;</span>design_doc<span class="token punctuation">&#125;</span>/json/<span class="token punctuation">&#123;</span>index_name<span class="token punctuation">&#125;</span> <span class="token parameter variable">-H</span>  <span class="token string">"accept: */*"</span> <span class="token parameter variable">-H</span>  <span class="token string">"Host: localhost:5984"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要删除本教程中使用的索引，curl命令将是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE http://admin:adminpw@localhost:5984/mychannel_ledger/_index/indexOwnerDoc/json/indexOwner <span class="token parameter variable">-H</span>  <span class="token string">"accept: */*"</span> <span class="token parameter variable">-H</span>  <span class="token string">"Host: localhost:5984"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="13-结束"><a href="#13-结束" class="headerlink" title="13.结束"></a>13.结束</h2><p>使用完本教程后，您可以使用network.sh脚本关闭测试网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将关闭我们创建的网络的CA，peer和ordering。请注意，ledger中的所有数据都将丢失。 如果您想再次通过本教程，则将从干净的初始状态开始。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档教程05-Fabric 中的安全资产转移~</title>
      <link href="/2022/12/06/guan-fang-wen-dang-jiao-cheng-05-fabric-zhong-de-an-quan-zi-chan-zhuan-yi/"/>
      <url>/2022/12/06/guan-fang-wen-dang-jiao-cheng-05-fabric-zhong-de-an-quan-zi-chan-zhuan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程05-Fabric-中的安全资产转移"><a href="#官方文档教程05-Fabric-中的安全资产转移" class="headerlink" title="官方文档教程05-Fabric 中的安全资产转移"></a>官方文档教程05-Fabric 中的安全资产转移</h1><p>本教程将演示如何在Hyperledger Fabric区块链channel中的组织之间的表示和交易资产，同时使用私有数据保持资产和交易的详细信息。每个链上资产都是一个不可替代的令牌（NFT），它代表一个特定的资产，该资产具有特定的不可改变的属性（如大小和颜色），并且具有唯一的所有者。当所有者要出售资产时，双方需要在资产转让前商定相同的价格。私人资产转让智能合约强制规定，只有资产所有者才能转让资产。在本教程中，您将了解Fabric特性（如基于状态的背书、私有数据和访问控制）如何组合在一起，以提供既私有又可验证的安全事务。</p><p>本教程将部署安全资产转移示例，以演示如何在不公开共享数据的情况下在两个组织之间转移私有资产。 您应该已经完成安装示例、二进制文件和 Docker 映像任务。</p><h2 id="1-场景需求"><a href="#1-场景需求" class="headerlink" title="1.场景需求"></a>1.场景需求</h2><p>私有资产转移场景受以下要求约束：</p><ul><li>资产可以由第一所有人的组织发行（在现实世界中，发行可能仅限于某个认证资产属性的权威机构）。</li><li>所有权在组织级别进行管理（Fabric 许可方案同样支持组织内个人身份级别的所有权）。</li><li>资产标识符是资产不可变属性的散列，与当前所有者一起作为公共channel数据存储，供所有channel成员查看。<br>然而，资产不可变属性是只有资产所有者（和先前所有者）知道的私有信息。</li><li>感兴趣的买家会希望在购买前根据哈希资产 ID 验证资产的私有属性。 这确认买方具有正确的资产描述。</li><li>有兴趣的买家会想要验证资产的来源，特别是资产的来源和监管链。 这证实资产自发行以来没有变化。</li><li>要转让资产，买卖双方必须首先就资产的属性和销售价格达成一致。</li><li>只有当前所有者可以将他们的资产转让给另一个组织。</li><li>实际的私人资产转让必须验证资产的属性和价格已经达成一致。 买卖双方都必须背书转让。</li></ul><h2 id="2-如何维护隐私"><a href="#2-如何维护隐私" class="headerlink" title="2.如何维护隐私"></a>2.如何维护隐私</h2><p>智能合约使用以下技术来确保资产属性保持私有：</p><ul><li>资产属性仅存储在当前所属组织的隐式私有数据集合中。Fabric channel上的每个组织都有自己的组织可以使用的私有数据集合。此集合是隐式的，因为它不需要在链码中显式定义。</li><li>尽管私有属性的哈希值自动存储在链上，以供所有的channel成员查看，但是私有属性中包含一个随机salt，这样其他channel成员就无法通过字典式攻击猜测私有数据原像。</li><li>智能合约请求利用私有数据的transient字段，这样私有数据就不会包含在最终的链上交易中。</li><li>私有数据查询必须源自其组织 ID 与peer组织 ID 匹配的客户端，该组织 ID 必须与资产所有者的组织 ID 相同。</li></ul><h2 id="3-转移是如何实施的"><a href="#3-转移是如何实施的" class="headerlink" title="3.转移是如何实施的"></a>3.转移是如何实施的</h2><p>在我们开始使用私有资产转移智能合约之前，我们将概述交易流程以及如何使用 Fabric 功能来保护在区块链上创建的资产：</p><h3 id="3-1创建资产"><a href="#3-1创建资产" class="headerlink" title="3.1创建资产"></a>3.1创建资产</h3><p>私有资产转移智能合约部署有背书策略，需要所有channel成员的背书。这允许所有组织创建他们拥有的资产，而无需其他channel成员的认可。资产的创建是唯一使用链码级背书策略的交易。Transactions that update or transfer existing assets will be governed by state based endorsement policies or the endorsement policies of private data collections. 请注意，在其他情况下，您可能希望发行机构也为创建交易背书。</p><p>智能合约使用以下 Fabric 功能来确保资产只能由拥有资产的组织更新或转移：</p><ul><li>当资产被创建时，智能合约获取提交请求的组织的 MSP ID，并将 MSP ID 作为所有者存储在公共链码世界状态中的资产键/值中。 随后更新或转移资产的智能合约请求将使用访问控制逻辑来验证请求客户端是否来自同一组织。 请注意，在其他情况下，所有权可能基于组织内特定的客户端身份，而不是组织本身。</li><li>此外，在创建资产时，智能合约会为资产密钥设置基于状态的背书策略。 基于状态的策略指定来自拥有资产的组织的peer必须认可更新或转移资产的后续请求。 这可以防止任何其他组织使用被恶意更改的智能合约来更新或启动资产转移。 为了进一步确保资产转移的安全，请考虑将其他方纳入资产的基于状态的背书策略中，例如受信任的第三方。</li></ul><h3 id="3-2同意转让"><a href="#3-2同意转让" class="headerlink" title="3.2同意转让"></a>3.2同意转让</h3><p>资产创建后，channel成员可以使用智能合约同意转让资产：</p><ul><li>资产的所有者可以更改公共所有权记录中的描述，例如，发布资产待售的广告。智能合约访问控制强制要求此更改必须是由资产所有者组织的成员提交的。基于状态的背书策略强制要求此描述更改必须由所有者组织的同行背书。</li></ul><p>资产所有者和资产购买者约定以一定价格转让资产：</p><ul><li>买卖双方约定的价格和私有资产属性存储在每个组织的隐性私有数据集合中。 channel的其他成员无法查看私有数据集合中商定的价格和资产属性。隐式私有数据收集的背书策略确保相应组织的同行对价格协议进行背书，智能合约访问控制逻辑确保价格协议由相关组织的客户提交。</li><li>使用私有数据集合时，每个价格协议和资产属性的哈希值会自动存储在ledger中。 只有当两个组织同意相同的价格并且两个资产描述一致时，这些哈希值才会匹配。 这允许组织在执行和背书转账交易时验证他们是否已就转账细节达成一致。 在价格协议中加入一个随机的交易ID，作为一个salt，以确保其他channel成员不能使用哈希的ledger来猜测价格。</li></ul><h3 id="3-3转移资产"><a href="#3-3转移资产" class="headerlink" title="3.3转移资产"></a>3.3转移资产</h3><p>在两个组织同意相同的价格和资产属性后，资产所有者可以调用转移函数将资产转移给买方：</p><ul><li>智能合约访问控制确保转移必须由拥有资产的组织成员发起。</li><li>转移功能通过比较哈希值来验证卖方私有集合中存在的链上资产属性与买方私有集合中存在的资产属性相对应，以确保资产所有者出售的是相同的资产。</li><li>转移功能还使用ledger上价格协议的哈希值来确保两个组织都同意相同的价格。</li><li>如果满足转移条件，转移函数会从卖方的集合中删除资产，并更新公共所有权记录中的所有者。</li><li>买卖双方隐含的隐私数据集合中也删除了价格协议，并在每个隐私数据集合中创建销售收据以记录交易价格和时间戳。</li><li>由于转账交易更新了买卖双方隐式数据集合中的数据，因此转账必须得到买卖双方的peer节点的背书。</li><li>更新公共资产记录的基于状态的背书策略，以便只有资产新所有者的peer才能更新或初始化其新资产的后续转移。</li></ul><h2 id="4-运行安全资产转移智能合约"><a href="#4-运行安全资产转移智能合约" class="headerlink" title="4.运行安全资产转移智能合约"></a>4.运行安全资产转移智能合约</h2><p>您可以使用 Fabric 测试网络来运行安全资产转移智能合约。 test-network包含两个peer组织，Org1 和 Org2，每个组织运行一个peer。 在本教程中，我们会将智能合约部署到两个组织加入的test-network的channel中。 我们将首先创建一个由 Org1 拥有的资产。 在两个组织就资产属性和价格达成一致后，我们将资产从 Org1 转移到 Org2。</p><h2 id="5-部署test-network网络"><a href="#5-部署test-network网络" class="headerlink" title="5.部署test-network网络"></a>5.部署test-network网络</h2><p>我们将使用 Fabric 测试网络来运行安全资产转移智能合约。 打开命令终端并导航到本地 fabric-samples 克隆中的test-network目录。 在本教程的其余部分，我们将从 test-network 目录进行操作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，关闭所有正在运行的测试网络实例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，您可以使用以下命令在网络中部署一个新实例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh up createChannel <span class="token parameter variable">-c</span> mychannel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该脚本将部署网络的节点并创建一个名为 mychannel 的channel，并将 Org1 和 Org2 作为channel成员。 我们将使用此channel部署智能合约并交易我们的资产。</p><h2 id="6-部署智能合约"><a href="#6-部署智能合约" class="headerlink" title="6.部署智能合约"></a>6.部署智能合约</h2><p>您可以使用测试网络脚本将安全资产转移智能合约部署到通道中。 运行以下命令将智能合约部署到 mychannel：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCC <span class="token parameter variable">-ccn</span> secured <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-secured-agreement/chaincode-go/ <span class="token parameter variable">-ccl</span> go <span class="token parameter variable">-ccep</span> <span class="token string">"OR('Org1MSP.peer','Org2MSP.peer')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，我们使用 -ccep 标志来部署具有“OR(‘Org1MSP.peer’,’Org2MSP.peer’)”背书策略的智能合约。 这允许任何一个组织在没有得到另一个组织的认可的情况下创建资产。</p><h3 id="6-1设置环境变量以作为-Org1-操作"><a href="#6-1设置环境变量以作为-Org1-操作" class="headerlink" title="6.1设置环境变量以作为 Org1 操作"></a>6.1设置环境变量以作为 Org1 操作</h3><p>在运行此示例的过程中，您需要以 Org1 和 Org2 的身份与网络进行交互。 为了使教程更易于使用，我们将为每个组织使用单独的终端。 打开一个新终端并确保您正在从 test-network 目录进行操作。 设置以下环境变量以作为 Org1 管理员操作peer CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span><span class="token builtin class-name">:</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境变量还指定了 Org1 节点的端点信息以提交请求。</p><h3 id="6-2设置环境变量以作为-Org2-操作"><a href="#6-2设置环境变量以作为-Org2-操作" class="headerlink" title="6.2设置环境变量以作为 Org2 操作"></a>6.2设置环境变量以作为 Org2 操作</h3><p>现在我们有了一个可以作为 Org1 运行的终端，为 Org2 打开一个新终端。 确保此终端也在test-network目录中运行。 设置以下环境变量以作为 Org2 管理员运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span><span class="token builtin class-name">:</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在学习本教程时，您需要在两个终端之间切换。</p><h2 id="7-创建资产"><a href="#7-创建资产" class="headerlink" title="7.创建资产"></a>7.创建资产</h2><p>任何channel成员都可以使用智能合约来创建归其组织所有的资产。 资产的详细信息将存储在私有数据集合中，并且只能由拥有资产的组织访问。 资产的公共记录、其所有者和公共描述存储在channel ledger中。 任何channel成员都可以访问公共所有权记录以查看谁拥有该资产，并可以阅读描述以查看该资产是否待售。</p><h2 id="8-从-Org1-终端操作"><a href="#8-从-Org1-终端操作" class="headerlink" title="8.从 Org1 终端操作"></a>8.从 Org1 终端操作</h2><p>在创建资产之前，我们需要指定资产的详细信息。 发出以下命令以创建将描述资产的 JSON。 “salt”参数是一个随机字符串，可以防止通道的另一个成员使用分类账上的哈希猜测资产。 如果没有salt，用户理论上可以猜测资产参数，直到猜测的哈希值与ledger上的哈希值相匹配（这被称为字典攻击）。 此字符串以 Base64 格式编码，以便它可以作为临时数据传递给创建交易。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>object_type<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>blue<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:35,<span class="token entity" title="\&quot;">\"</span>salt<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>a94a8fe5ccb19ba61c4c0873d391e987982fbbd3<span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在可以使用以下命令创建属于 Org1 的资产。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":["A new asset for Org1MSP"]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>资产属性的哈希将成为资产 ID 并由 CreateAsset 调用返回。 在报告给 CLI 的响应“有效负载”中查找哈希，并将其设置为环境变量以供以后参考。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_ID</span><span class="token operator">=</span>d9923f21b770adbc79cbcc47a3aeecc81dc7f030bd129155301ce3932be7fbcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以查询 Org1 隐式数据集合以查看创建的资产，通过将 assetId 替换为从 createAsset 函数返回的 ID 来编写以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>GetAssetPrivateProperties<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功时，该命令将返回以下结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"object_type"</span><span class="token operator">:</span><span class="token string">"asset_properties"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token property">"salt"</span><span class="token operator">:</span><span class="token string">"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们还可以查询ledger以查看公共所有权记录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ReadAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将返回资产归 Org1 所有的记录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"object_type"</span><span class="token builtin class-name">:</span><span class="token string">"asset"</span>,<span class="token string">"asset_id"</span><span class="token builtin class-name">:</span><span class="token string">"d9923f21b770adbc79cbcc47a3aeecc81dc7f030bd129155301ce3932be7fbcc"</span>,<span class="token string">"owner_org"</span><span class="token builtin class-name">:</span><span class="token string">"Org1MSP"</span>,<span class="token string">"public_description"</span><span class="token builtin class-name">:</span><span class="token string">"A new asset for Org1MSP"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为资产市场火爆，Org1 想把这个资产卖掉。 作为资产所有者，Org1 可以更新公共描述来宣传资产待售。 运行以下命令更改资产描述：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ChangePublicDescription<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>This asset is for sale<span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查询ledger以查看更新后的描述：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ReadAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在可以看到该资产正在出售：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"object_type"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"asset_id"</span><span class="token operator">:</span><span class="token string">"d9923f21b770adbc79cbcc47a3aeecc81dc7f030bd129155301ce3932be7fbcc"</span><span class="token punctuation">,</span><span class="token property">"owner_org"</span><span class="token operator">:</span><span class="token string">"Org1MSP"</span><span class="token punctuation">,</span><span class="token property">"public_description"</span><span class="token operator">:</span><span class="token string">"This asset is for sale"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hyperledger-fabric.readthedocs.io/en/latest/_images/transfer_assets_1.png" alt="Org1 creates a asset"></p><p>图 1：当 Org1 创建他们拥有的资产时，资产详细信息存储在 Org1 peer上的 Org1 隐式数据集合中。 公共所有权记录存储在channel世界状态中，并存储在 Org1 和 Org2 peer上。 资产密钥的哈希和资产详细信息的哈希在channel世界状态中也是可见的，并存储在两个组织的peer上。</p><p>单词解释：</p><ul><li>Secured asset transfer smart contract：安全资产转移智能合约</li><li>Channel World State：channel世界状态</li><li>private data collection：私人数据集合</li></ul><h2 id="9-从-Org2-终端操作"><a href="#9-从-Org2-终端操作" class="headerlink" title="9.从 Org2 终端操作"></a>9.从 Org2 终端操作</h2><p>如果我们从 Org2 终端操作，我们可以使用智能合约查询公共资产数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_ID</span><span class="token operator">=</span>d9923f21b770adbc79cbcc47a3aeecc81dc7f030bd129155301ce3932be7fbccpeer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ReadAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从这个查询中，Org2 得知资产是待售的：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"object_type"</span><span class="token operator">:</span><span class="token string">"asset"</span><span class="token punctuation">,</span><span class="token property">"asset_id"</span><span class="token operator">:</span><span class="token string">"d9923f21b770adbc79cbcc47a3aeecc81dc7f030bd129155301ce3932be7fbcc"</span><span class="token punctuation">,</span><span class="token property">"owner_org"</span><span class="token operator">:</span><span class="token string">"Org1MSP"</span><span class="token punctuation">,</span><span class="token property">"public_description"</span><span class="token operator">:</span><span class="token string">"This asset is for sale"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在真实的链码中，您可能想要通过JSON 查询查询所有待售资产，或创建不同的销售密钥并使用密钥范围查询来查找当前待售资产。对 Org1 拥有的资产的公开描述的任何更改都需要得到 Org1 的认可。 背书策略通过链码中的访问控制策略得到加强，任何更新都需要由拥有资产的组织提交。 让我们看看如果 Org2 试图恶意更改公共描述会发生什么：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ChangePublicDescription<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>the worst asset<span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>智能合约不允许 Org2 访问资产的公开描述。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: endorsement failure during invoke. response: status:500 message:<span class="token string">"a client from Org2MSP cannot update the description of an asset owned by Org1MSP"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-同意出售资产"><a href="#10-同意出售资产" class="headerlink" title="10.同意出售资产"></a>10.同意出售资产</h2><p>要出售资产，买卖双方必须就资产价格达成一致，并确保他们在各自的私有数据集合中具有相同的资产属性。 每一方都将他们同意的价格存储在自己的私人数据集合中。 私有资产转移智能合约强制双方需要同意相同的价格和资产属性才能转移资产。</p><h2 id="11同意作为-Org1-出售"><a href="#11同意作为-Org1-出售" class="headerlink" title="11同意作为 Org1 出售"></a>11同意作为 Org1 出售</h2><p>从 Org1 终端操作。 Org1 将同意将资产价格设置为 110 美元。 trade_id 用作salt，以防止不是买家或卖家的channel成员猜测价格。 该值需要与资产属性一起通过电子邮件或其他通信在买卖双方之间进行带外传递。 买卖双方还可以对资产密钥加salt，防止channel内的其他成员猜测出售的资产。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PRICE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>trade_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>109f4b3c50d7b0df729d299bc6f8e9ef9066971f<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>price<span class="token entity" title="\&quot;">\"</span>:110&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>AgreeToSell<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_price<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PRICE</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以查询 Org1 私有数据集合来读取约定的售价：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>GetAssetSalesPrice<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-同意以-Org2-身份购买"><a href="#12-同意以-Org2-身份购买" class="headerlink" title="12.同意以 Org2 身份购买"></a>12.同意以 Org2 身份购买</h2><p>从 Org2 终端操作。 在同意购买之前运行以下命令以验证资产属性。 资产属性和salt将通过电子邮件或其他通信在买卖双方之间进行传递。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>object_type<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>blue<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:35,<span class="token entity" title="\&quot;">\"</span>salt<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>a94a8fe5ccb19ba61c4c0873d391e987982fbbd3<span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>VerifyAssetProperties<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行以下命令以同意以 100 美元购买资产 1。 截至目前，Org2 将同意与 Org1 不同的价格。 不用担心，这两个组织将在未来的步骤中同意相同的价格。 但是，我们可以使用这种暂时的分歧来测试如果买卖双方同意不同的价格会发生什么。 Org2 需要使用与 Org1 相同的 trade_id。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PRICE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>trade_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>109f4b3c50d7b0df729d299bc6f8e9ef9066971f<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>price<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>object_type<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>blue<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:35,<span class="token entity" title="\&quot;">\"</span>salt<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>a94a8fe5ccb19ba61c4c0873d391e987982fbbd3<span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>AgreeToBuy<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_price<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PRICE</span><span class="token entity" title="\&quot;">\"</span>, <span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以从 Org2 隐式数据集合中读取商定的购买价格：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>GetAssetBidPrice<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hyperledger-fabric.readthedocs.io/en/latest/_images/transfer_assets_2.png" alt="Org1 and Org2 agree on transfer"></p><p>图 2：Org1 和 Org2 同意转移资产后，每个组织同意的价格存储在他们的私有数据集合中。 买卖双方的复合密钥用于防止与资产详细信息和资产所有权记录发生冲突。 商定的价格仅存储在每个组织的同行中。 然而，这两个协议的哈希值都存储在每个加入channel的peer的channel世界状态中。</p><h2 id="13-将资产从-Org1-转移到-Org2"><a href="#13-将资产从-Org1-转移到-Org2" class="headerlink" title="13.将资产从 Org1 转移到 Org2"></a>13.将资产从 Org1 转移到 Org2</h2><p>在两个组织就其价格和资产属性达成一致后，Org1 可以尝试将资产转移给 Org2。 智能合约中的私人资产转移功能使用ledger上的哈希来检查两个组织是否同意相同的价格。 该函数还将检查买卖双方私有集合的资产属性哈希，以检查转移的资产是否与 Org1 拥有的资产相同。</p><h3 id="13-1将资产作为-Org1-转移"><a href="#13-1将资产作为-Org1-转移" class="headerlink" title="13.1将资产作为 Org1 转移"></a>13.1将资产作为 Org1 转移</h3><p>从 Org1 终端操作。 资产的所有者需要发起转移。 请注意，下面的命令使用 –peerAddresses 标志来定位 Org1 和 Org2 的peer。 两个组织都需要认可转让。 另请注意，价格在传输请求中作为transient属性传递。 这是通过的，以便当前所有者可以确保以正确的价格转让正确的资产。 这些属性将由两个背书者根据链上哈希值进行检查。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>TransferAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Org2MSP<span class="token entity" title="\&quot;">\"</span>]&#125;"</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_price<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PRICE</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为两个组织没有约定相同的价格，所以无法完成转让：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: endorsement failure during invoke. response: status:500 message:<span class="token string">"failed transfer verification: hash cf74b8ce092b637bd28f98f7cdd490534c102a0665e7c985d4f2ab9810e30b1c for passed price JSON &#123;<span class="token entity" title="\&quot;">\"</span>asset_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>d9923f21b770adbc79cbcc47a3aeecc81dc7f030bd129155301ce3932be7fbcc<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>trade_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>109f4b3c50d7b0df729d299bc6f8e9ef9066971f<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>price<span class="token entity" title="\&quot;">\"</span>:110&#125; does not match on-chain hash 09341dbb39e81fb50ccb3a81770254525318f777fad217ae49777487116cceb4, buyer hasn't agreed to the passed trade id and price"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果，Org1 和 Org2 就购买资产的价格达成了新的协议。 Org1 将资产价格降至 100：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PRICE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>trade_id<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>109f4b3c50d7b0df729d299bc6f8e9ef9066971f<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>price<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>AgreeToSell<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Org2MSP<span class="token entity" title="\&quot;">\"</span>]&#125;"</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_price<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PRICE</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在买卖双方已经同意相同的价格，Org1 可以将资产转让给 Org2。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>TransferAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Org2MSP<span class="token entity" title="\&quot;">\"</span>]&#125;"</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_price<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PRICE</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以查询资产所有权记录来验证是否转账成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ReadAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该记录现在将 Org2 列为资产所有者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"object_type"</span><span class="token builtin class-name">:</span><span class="token string">"asset"</span>,<span class="token string">"asset_id"</span><span class="token builtin class-name">:</span><span class="token string">"&lt;asset1>"</span>,<span class="token string">"owner_org"</span><span class="token builtin class-name">:</span><span class="token string">"Org2MSP"</span>,<span class="token string">"public_description"</span><span class="token builtin class-name">:</span><span class="token string">"This asset is for sale"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hyperledger-fabric.readthedocs.io/en/latest/_images/transfer_assets_3.png" alt="Org1 transfers the asset to Org2"></p><p>图3：资产转移后，资产明细放入Org2隐式数据集合中，从Org1隐式数据集合中删除。 因此，资产详细信息现在仅存储在 Org2 节点上。ledger上的资产所有权记录已更新，以反映该资产归 Org2 所有。</p><h3 id="13-2将资产作为-Org1-转移"><a href="#13-2将资产作为-Org1-转移" class="headerlink" title="13.2将资产作为 Org1 转移"></a>13.2将资产作为 Org1 转移</h3><p>从 Org2 终端操作。 现在 Org2 拥有资产，我们可以从 Org2 隐式数据集合中读取资产详细信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>GetAssetPrivateProperties<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Org2 现在可以更新资产公共描述：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ChangePublicDescription<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>This asset is not for sale<span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询ledger以验证资产不再出售：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> secured <span class="token parameter variable">-c</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>function<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>ReadAsset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>Args<span class="token entity" title="\&quot;">\"</span>:[<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_ID</span><span class="token entity" title="\&quot;">\"</span>]&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-结束"><a href="#12-结束" class="headerlink" title="12.结束"></a>12.结束</h2><p>完成资产转移后，您可以关闭测试网络。 该命令将删除test-network的所有节点，并删除您创建的所有ledger数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档教程04-在Fabric中使用私有数据</title>
      <link href="/2022/12/05/guan-fang-wen-dang-jiao-cheng-04-zai-fabric-zhong-shi-yong-si-you-shu-ju/"/>
      <url>/2022/12/05/guan-fang-wen-dang-jiao-cheng-04-zai-fabric-zhong-shi-yong-si-you-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程04-在Fabric中使用私有数据"><a href="#官方文档教程04-在Fabric中使用私有数据" class="headerlink" title="官方文档教程04-在Fabric中使用私有数据"></a>官方文档教程04-在Fabric中使用私有数据</h1><p>本教程将演示如何使用私有数据集合（PDC）在区块链网络上为组织的授权peers提供私有数据的存储和检索。使用包含管理该集合的策略的集合定义文件来指定该集合。</p><p>本教程中的信息假定您了解私有数据存储及其用例。有关详细信息，请查看私人数据。</p><p>注意：这些指令使用了Fabric v2.0发行版中引入的新的Fabric链码生命周期。如果您想使用前面的生命周期模型使用带链码的私有数据，请访问Fabric教程中使用私有数据的V1.4版本。</p><p>本教程将指导您通过以下步骤练习使用Fabric定义、配置和使用私有数据:</p><ol><li>资产转移私有数据示例用例</li><li>构建集合定义JSON文件</li><li>使用链码 API读取和写入私有数据</li><li>将私有数据智能合约部署到channel</li><li>注册身份</li><li>在私有数据中创建资产</li><li>作为授权peer查询私有数据</li><li>作为未授权peer查询私有数据</li><li>转移资产</li><li>清除私有资产</li><li>对私有资产使用索引</li><li>其他资源</li></ol><p>本教程将资产传输私有数据示例部署到Fabric测试网络，以演示如何创建、部署和使用私有数据集合。您应该已经完成了安装Fabric和Fabric示例的任务。</p><h2 id="1-资产转移私有数据示例用例"><a href="#1-资产转移私有数据示例用例" class="headerlink" title="1.资产转移私有数据示例用例"></a>1.资产转移私有数据示例用例</h2><p>此示例使用以下用例演示如何使用三个私有数据集合（assetCollection、Org1 MSP private Collection和Org2 MSP private Collection）在Org1和Org2之间传输资产:</p><p>Org1的成员创建一个新资产，以下称为所有者。资产的公开细节，包括所有者的身份，存储在名为assetCollection的私有数据汇集中。资产也是由所有者提供的评估价值创造的。评估值由各参与方用于同意资产转让，并仅存储在业主组织的集合中。在本例中，业主同意的初始评估值存储在Org1MSPPrivateCollection中。</p><p>要购买资产，买方需要同意与资产所有者相同的评估价值。在这一步中，买方（Org2的成员）使用智能合约功能“Gree To Transfer”创建交易协议并同意评估价值。该值存储在Org2MSPPrivateCollection集合中。现在，资产所有者可以使用智能合约功能“TransferAsset”将资产转让给买方。“TransferAsset”函数使用channel ledger上的哈希值来确认所有者和购买者在转移资产之前已经同意了相同的评估值。</p><p>在介绍转移方案之前，我们将讨论组织如何在 Fabric 中使用私有数据集合。</p><h2 id="2-构建集合定义JSON文件"><a href="#2-构建集合定义JSON文件" class="headerlink" title="2.构建集合定义JSON文件"></a>2.构建集合定义JSON文件</h2><p>在一组组织可以使用私有数据进行交易之前，channel上的所有组织都需要构建一个集合定义文件，该文件定义与每个链码相关联的私有数据集合。存储在私有数据汇集中的数据只分发给特定组织的peer，而不分发给channel的所有成员。集合定义文件描述组织可以从链码读取和写入的所有私有数据集合。</p><p>每个集合由以下属性定义:</p><ul><li><code>name</code>：集合的名称。</li><li><code>policy</code>：定义允许保留集合数据的组织peers。</li><li><code>requiredPeerCount</code>：将私有数据传播为 链码背书的条件。</li><li><code>maxPeerCount</code>: For data redundancy purposes, the number of other peers that the current endorsing peer will attempt to distribute the data to. If an endorsing peer goes down, these other peers are available at commit time if there are requests to pull the private data.</li><li><code>blockToLive</code>：对于价格或个人信息等非常敏感的信息，此值表示数据应以块为单位在私有数据库中保留多长时间。 数据将在私有数据库上保留指定数量的块，之后将被清除，使该数据从网络中过时。 要无限期地保留私有数据，即永不清除私有数据，请将 blockToLive 属性设置为 0。</li><li><code>memberOnlyRead</code>: 值为true表示peer端自动强制执行仅允许属于集合成员组织之一的客户端读取私有数据。</li><li><code>memberOnlyWrite</code>：值为 true 表示peer端自动强制只允许属于集合成员组织之一的客户端对私有数据进行改写。</li><li><code>endorsementPolicy</code>：定义为了写入私有数据集合而需要满足的背书策略。 集合级别背书策略覆盖链代码级别策略。 有关构建策略定义的更多信息，请参阅背书策略主题。</li></ul><p>使用链码的所有组织都需要部署相同的集合定义文件，即使该组织不属于任何集合。除了在集合文件中显式定义的集合外，每个组织还可以访问其peer上的隐式集合，该集合只能由其组织读取。有关使用隐式数据收集的示例，请参见Fabric中的安全资产传输。</p><p>资产转移私有数据示例包含一个 collections_config.json 文件，该文件定义了三个私有数据集合定义：assetCollection、Org1MSPPrivateCollection 和 Org2MSPPrivateCollection。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// collections_config.json</span><span class="token punctuation">[</span>   <span class="token punctuation">&#123;</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"assetCollection"</span><span class="token punctuation">,</span>   <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token string">"OR('Org1MSP.member', 'Org2MSP.member')"</span><span class="token punctuation">,</span>   <span class="token property">"requiredPeerCount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token property">"maxPeerCount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token property">"blockToLive"</span><span class="token operator">:</span><span class="token number">1000000</span><span class="token punctuation">,</span>   <span class="token property">"memberOnlyRead"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token property">"memberOnlyWrite"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Org1MSPPrivateCollection"</span><span class="token punctuation">,</span>   <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token string">"OR('Org1MSP.member')"</span><span class="token punctuation">,</span>   <span class="token property">"requiredPeerCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"maxPeerCount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token property">"blockToLive"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>   <span class="token property">"memberOnlyRead"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token property">"memberOnlyWrite"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token property">"endorsementPolicy"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token property">"signaturePolicy"</span><span class="token operator">:</span> <span class="token string">"OR('Org1MSP.member')"</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token punctuation">&#123;</span>   <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Org2MSPPrivateCollection"</span><span class="token punctuation">,</span>   <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token string">"OR('Org2MSP.member')"</span><span class="token punctuation">,</span>   <span class="token property">"requiredPeerCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"maxPeerCount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   <span class="token property">"blockToLive"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>   <span class="token property">"memberOnlyRead"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token property">"memberOnlyWrite"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token property">"endorsementPolicy"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token property">"signaturePolicy"</span><span class="token operator">:</span> <span class="token string">"OR('Org2MSP.member')"</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码解读：</p><p>assetCollection定义中的policy属性指定Org1和Org2都可以将集合存储在它们的peers上。memberOnlyRead和memberOnlyWrite参数用于指定只有Org1和Org2客户端可以读取和写入此集合。</p><p>Org1 MSP private Collection集合只允许Org1的peers在其私有数据库中拥有私有数据，而Org2 MSP private Collection集合只能由Org2的peers存储。endorsementPolicy参数用于创建特定于集合的背书策略。Org1MSPPrivateCollection或Org2MSPPrivateCollection的每个更新都需要得到在其peers上存储集合的组织的认可。我们将在本教程中看到如何使用这些集合来传输资产。</p><p>当使用 peer lifecycle chaincode commit 命令将链码定义提交到channel时，将部署此集合定义文件。 有关此过程的更多详细信息，请参见下文第 3 节。</p><h2 id="3-使用链码-API读取和写入私有数据"><a href="#3-使用链码-API读取和写入私有数据" class="headerlink" title="3.使用链码 API读取和写入私有数据"></a>3.使用链码 API读取和写入私有数据</h2><p>了解如何将channel上的数据私有化的下一步是在链码中构建数据定义。资产转移私有数据示例根据访问数据的方式将私有数据划分为三个独立的数据定义。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// Peers in Org1 and Org2 will have this private data in a side database</span><span class="token comment">// Org1和Org2中的peers将在一个侧数据库中拥有这个私有数据</span><span class="token keyword">type</span> <span class="token class-name">Asset</span> struct <span class="token punctuation">&#123;</span>   <span class="token comment">//Type is used to distinguish the various types of objects in state database</span>   <span class="token comment">//type用于区分状态数据库中的各种类型的对象</span>       Type  <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"objectType"</span><span class="token template-punctuation string">`</span></span>        <span class="token constant">ID</span>    <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"assetID"</span><span class="token template-punctuation string">`</span></span>       Color <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"color"</span><span class="token template-punctuation string">`</span></span>       Size  int    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"size"</span><span class="token template-punctuation string">`</span></span>       Owner <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"owner"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token comment">// AssetPrivateDetails describes details that are private to owners</span><span class="token comment">// AssetPrivateDetails 描述所有者私有的详细信息</span><span class="token comment">// Only peers in Org1 will have this private data in a side database</span><span class="token comment">// 只有Org1中的peers将在一个侧面数据库中拥有这个私有数据</span><span class="token keyword">type</span> <span class="token class-name">AssetPrivateDetails</span> struct <span class="token punctuation">&#123;</span>       <span class="token constant">ID</span>             <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"assetID"</span><span class="token template-punctuation string">`</span></span>       AppraisedValue int    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"appraisedValue"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token comment">// Only peers in Org2 will have this private data in a side database</span><span class="token comment">// 只有Org2中的peers将在一个侧面数据库中拥有这个私有数据</span><span class="token keyword">type</span> <span class="token class-name">AssetPrivateDetails</span> struct <span class="token punctuation">&#123;</span>       <span class="token constant">ID</span>             <span class="token builtin">string</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"assetID"</span><span class="token template-punctuation string">`</span></span>       AppraisedValue int    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">json:"appraisedValue"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体而言，对私人数据的访问将受到以下限制：</p><ul><li>Object Type、color、size和owner存储在assetCollection中，因此根据收集策略（Org1和Org2）中的定义，channel的成员都是可见的。</li><li>资产的评估值存储在集合Org1MSPPrivateCollection或Org2MSPPrivateCollection中，具体位置取决于资产的所有者。该值只能由属于可以存储集合的组织的用户访问。</li></ul><p>资产转移私有数据样本智能合约创建的所有数据都存储在 PDC 中。 智能合约使用 Fabric 链码 API，通过 GetPrivateData() 和 PutPrivateData() 函数将私有数据读取和写入私有数据集合。 您可以在此处找到有关这些功能的更多信息。 此私有数据存储在peer的私有状态数据库中（与公共状态数据库分开），并通过八卦协议在授权peer之间传播。</p><p>下图说明了私有数据示例使用的私有数据模型。 请注意，图中仅显示 Org3，以说明如果channel上有任何其他组织，他们将无权访问配置中定义的任何私有数据集合。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/latest/_images/SideDB-org1-org2.png" alt="_images/SideDB-org1-org2.png"></p><h3 id="3-1读取集合数据"><a href="#3-1读取集合数据" class="headerlink" title="3.1读取集合数据"></a>3.1读取集合数据</h3><p>智能合约使用链码 API GetPrivateData() 查询数据库中的私有数据。 GetPrivateData() 有两个参数，集合名称和数据键。 回想一下集合 assetCollection 允许 Org1 和 Org2 的peer节点在侧数据库中拥有私有数据，而集合 Org1MSPPrivateCollection 只允许 Org1 的peer节点在侧数据库中拥有他们的私有数据，而 Org2MSPPrivateCollection 允许 Org2 的peer节点在侧数据库中拥有他们的私有数据 侧数据库。 实现细节参考以下两个资产转账私有数据函数：</p><ul><li>ReadAsset 用于查询 assetID、color、size 和 owner 属性的值。</li><li>ReadAssetPrivateDetails 用于查询 appraisedValue 属性的值。</li></ul><p>当我们在本教程后面使用peer命令发出数据库查询时，我们将调用这两个函数。</p><h3 id="3-2写入私有数据"><a href="#3-2写入私有数据" class="headerlink" title="3.2写入私有数据"></a>3.2写入私有数据</h3><p>智能合约使用链码 API PutPrivateData（）将私有数据存储到私有数据库中。API还需要集合的名称。注意，资产转移私有数据示例包括三个不同的私有数据集合，但在链码中调用了两次（在本场景中充当Org1）。</p><ol><li>使用assetCollection集合写入私有数据assetID、颜色、大小和所有者。</li><li>使用 Org1MSPPrivateCollection 集合写入私有数据 appraisedValue。</li></ol><p>如果我们充当Org2，我们将用Org2 MSP Private Collection替换Org1MSPPrivateCollection。</p><p>例如，在CreateAsset函数的以下代码片段中，PutPrivateData（）被调用了两次，每一组私有数据调用一次。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// CreateAsset creates a new asset by placing the main asset details in the assetCollection</span><span class="token comment">// CreateAsset 通过将主要的资产详情放在 assetCollection 中来创建一个新的资产</span><span class="token comment">// that can be read by both organizations. The appraisal value is stored in the owners org specific collection.</span><span class="token comment">// 两个组织都可以读取。 appraisal value存储在所有者组织的特定集合中。</span>func (s *SmartContract) CreateAsset(ctx contractapi.TransactionContextInterface) error <span class="token punctuation">&#123;</span>    <span class="token comment">// Get new asset from transient map</span>    <span class="token comment">// 从临时映射获取新资产</span>    transientMap<span class="token punctuation">,</span> err <span class="token operator">:</span>= ctx.GetStub().GetTransient()    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"error getting transient: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Asset properties are private, therefore they get passed in transient field, instead of func args</span>    <span class="token comment">// 资产属性是私有的，因此它们在transient字段中传递，而不是在func a rds中传递</span>    transientAssetJSON<span class="token punctuation">,</span> ok <span class="token operator">:</span>= transientMap<span class="token punctuation">[</span><span class="token string">"asset_properties"</span><span class="token punctuation">]</span>    if !ok <span class="token punctuation">&#123;</span>        <span class="token comment">//log error to stdout</span>        return fmt.Errorf(<span class="token string">"asset not found in the transient map input"</span>)    <span class="token punctuation">&#125;</span>    type assetTransientInput struct <span class="token punctuation">&#123;</span>        Type           string `json<span class="token operator">:</span><span class="token string">"objectType"</span>` <span class="token comment">//Type is used to distinguish the various types of objects in state database</span>        ID             string `json<span class="token operator">:</span><span class="token string">"assetID"</span>`        Color          string `json<span class="token operator">:</span><span class="token string">"color"</span>`        Size           int    `json<span class="token operator">:</span><span class="token string">"size"</span>`        AppraisedValue int    `json<span class="token operator">:</span><span class="token string">"appraisedValue"</span>`    <span class="token punctuation">&#125;</span>    var assetInput assetTransientInput    err = json.Unmarshal(transientAssetJSON<span class="token punctuation">,</span> &amp;assetInput)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to unmarshal JSON: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    if len(assetInput.Type) == <span class="token number">0</span> <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"objectType field must be a non-empty string"</span>)    <span class="token punctuation">&#125;</span>    if len(assetInput.ID) == <span class="token number">0</span> <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"assetID field must be a non-empty string"</span>)    <span class="token punctuation">&#125;</span>    if len(assetInput.Color) == <span class="token number">0</span> <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"color field must be a non-empty string"</span>)    <span class="token punctuation">&#125;</span>    if assetInput.Size &lt;= <span class="token number">0</span> <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"size field must be a positive integer"</span>)    <span class="token punctuation">&#125;</span>    if assetInput.AppraisedValue &lt;= <span class="token number">0</span> <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"appraisedValue field must be a positive integer"</span>)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Check if asset already exists</span>    <span class="token comment">// 检查资产是否已经存在</span>    assetAsBytes<span class="token punctuation">,</span> err <span class="token operator">:</span>= ctx.GetStub().GetPrivateData(assetCollection<span class="token punctuation">,</span> assetInput.ID)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to get asset: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span> else if assetAsBytes != nil <span class="token punctuation">&#123;</span>        fmt.Println(<span class="token string">"Asset already exists: "</span> + assetInput.ID)        return fmt.Errorf(<span class="token string">"this asset already exists: "</span> + assetInput.ID)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Get ID of submitting client identity</span>    <span class="token comment">// 获取提交客户端身份的ID</span>    clientID<span class="token punctuation">,</span> err <span class="token operator">:</span>= submittingClientIdentity(ctx)    if err != nil <span class="token punctuation">&#123;</span>        return err    <span class="token punctuation">&#125;</span>    <span class="token comment">// Verify that the client is submitting request to peer in their organization</span>    <span class="token comment">// // 验证客户端是否正在向其组织中的peer提交请求</span>    <span class="token comment">// This is to ensure that a client from another org doesn't attempt to read or</span>    <span class="token comment">// write private data from this peer.</span>    <span class="token comment">//// 这是为了确保来自另一个组织的客户端不会试图从这个peer端读取或写入私有数据。</span>    err = verifyClientOrgMatchesPeerOrg(ctx)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"CreateAsset cannot be performed: Error %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Make submitting client the owner</span>    <span class="token comment">// 使提交客户端成为所有者</span>    asset <span class="token operator">:</span>= Asset<span class="token punctuation">&#123;</span>        Type<span class="token operator">:</span>  assetInput.Type<span class="token punctuation">,</span>        ID<span class="token operator">:</span>    assetInput.ID<span class="token punctuation">,</span>        Color<span class="token operator">:</span> assetInput.Color<span class="token punctuation">,</span>        Size<span class="token operator">:</span>  assetInput.Size<span class="token punctuation">,</span>        Owner<span class="token operator">:</span> clientID<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    assetJSONasBytes<span class="token punctuation">,</span> err <span class="token operator">:</span>= json.Marshal(asset)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to marshal asset into JSON: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Save asset to private data collection</span>    <span class="token comment">// 将资产保存到私有数据集合</span>    <span class="token comment">// Typical logger, logs to stdout/file in the fabric managed docker container, running this chaincode</span>    <span class="token comment">// 日志记录器，在fabric托管的docker容器中记录stdout/file并运行下面的链码</span>    <span class="token comment">// Look for container name like dev-peer0.org1.example.com-&#123;chaincodename_version&#125;-xyz</span>    <span class="token comment">// 寻找像 dev-peer0.org1.example.com-&#123;chaincodename_version&#125;-xyz 这样的容器名称</span>    log.Printf(<span class="token string">"CreateAsset Put: collection %v, ID %v, owner %v"</span><span class="token punctuation">,</span> assetCollection<span class="token punctuation">,</span> assetInput.ID<span class="token punctuation">,</span> clientID)    err = ctx.GetStub().PutPrivateData(assetCollection<span class="token punctuation">,</span> assetInput.ID<span class="token punctuation">,</span> assetJSONasBytes)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to put asset into private data collection: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Save asset details to collection visible to owning organization</span>    <span class="token comment">// 将资产详细信息保存到对拥有组织可见的集合</span>    assetPrivateDetails <span class="token operator">:</span>= AssetPrivateDetails<span class="token punctuation">&#123;</span>        ID<span class="token operator">:</span>             assetInput.ID<span class="token punctuation">,</span>        AppraisedValue<span class="token operator">:</span> assetInput.AppraisedValue<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将资产详细信息封装到JSON</span>    <span class="token comment">// marshal asset details to JSON</span>    assetPrivateDetailsAsBytes<span class="token punctuation">,</span> err <span class="token operator">:</span>= json.Marshal(assetPrivateDetails)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to marshal into JSON: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Get collection name for this organization.</span>    <span class="token comment">// 获取该组织的集合名称。</span>    orgCollection<span class="token punctuation">,</span> err <span class="token operator">:</span>= getCollectionName(ctx)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to infer private collection name for the org: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    <span class="token comment">// Put asset appraised value into owners org specific private data collection</span>    <span class="token comment">// 将资产appraised value放入所有者组织特定的私有数据集合中</span>    log.Printf(<span class="token string">"Put: collection %v, ID %v"</span><span class="token punctuation">,</span> orgCollection<span class="token punctuation">,</span> assetInput.ID)    err = ctx.GetStub().PutPrivateData(orgCollection<span class="token punctuation">,</span> assetInput.ID<span class="token punctuation">,</span> assetPrivateDetailsAsBytes)    if err != nil <span class="token punctuation">&#123;</span>        return fmt.Errorf(<span class="token string">"failed to put asset private details: %v"</span><span class="token punctuation">,</span> err)    <span class="token punctuation">&#125;</span>    return nil<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总而言之，上面的 collections_config.json 策略定义允许 Org1 和 Org2 中的所有节点在其私有数据库中存储和处理资产转移私有数据资产 ID、颜色、大小、所有者。 但是只有 Org1 中的节点可以在 Org1 集合 Org1MSPPrivateCollection 中存储和处理 appraisedValue 键数据，只有 Org2 中的节点可以在 Org2 集合 Org2MSPPrivateCollection 中存储和处理 appraisedValue 键数据。</p><p>As an additional data privacy benefit, since a collection is being used, only the private data hashes go through orderer, not the private data itself, keeping private data confidential from orderer.</p><h2 id="4-启动网络"><a href="#4-启动网络" class="headerlink" title="4.启动网络"></a>4.启动网络</h2><p>现在我们准备逐步执行一些演示如何使用私有数据的命令。</p><p>在安装、定义和使用私有数据智能合约之前， 我们需要启动结构测试网络。为了本教程，我们希望 从已知的初始状态进行操作。以下命令将杀死任何活动 或过时的 Docker 容器并删除以前生成的项目。 因此，让我们运行以下命令来清理任何以前的 环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 test-network 目录中，您可以使用以下命令启动带有证书颁发机构和 CouchDB 的 Fabric 测试网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh up createChannel <span class="token parameter variable">-ca</span> <span class="token parameter variable">-s</span> couchdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将部署一个 Fabric 网络，该网络由一个名为 mychannel 的channel组成，具有两个组织（每个组织维护一个peer节点）、证书颁发机构和一个ordering，同时使用 CouchDB 作为状态数据库。 LevelDB 或 CouchDB 都可以与集合一起使用。 选择 CouchDB 是为了演示如何对私有数据使用索引。</p><p>注意：要使集合起作用，正确配置跨组织的八卦是很重要的。请参阅我们关于Gossip数据传播协议的文档，特别注意“锚点peer”部分。我们的教程并不关注gossip，因为它已经在测试网络中配置好了，但是当配置一个channel时，gossip锚节点对于集合的正确工作至关重要。</p><h2 id="5-将私有数据智能合约部署到通道"><a href="#5-将私有数据智能合约部署到通道" class="headerlink" title="5.将私有数据智能合约部署到通道"></a>5.将私有数据智能合约部署到通道</h2><p>我们现在可以使用test-network脚本将智能合约部署到channel。 从test-network目录运行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCC <span class="token parameter variable">-ccn</span> private <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-private-data/chaincode-go/ <span class="token parameter variable">-ccl</span> go <span class="token parameter variable">-ccep</span> <span class="token string">"OR('Org1MSP.peer','Org2MSP.peer')"</span> <span class="token parameter variable">-cccg</span> <span class="token punctuation">..</span>/asset-transfer-private-data/chaincode-go/collections_config.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，我们需要将私有数据集合定义文件的路径传递给命令。作为将链码部署到channel的一部分，channel上的两个组织必须传递相同的私有数据集合定义，作为Fabric链码生命周期的组成部分。我们还部署了链码级背书策略为“OR（‘Org1MSP.peer’，‘Org2MSP.peer’）”的智能合约。这允许Org1和Org2创建一个资产，而不需要从其他组织获得认可。您可以看到在发出上述命令后部署打印在日志中的链码所需的步骤。</p><p>当两个组织都使用 peer lifecycle chaincode approveformyorg 命令批准链码定义时，链码定义包括使用 –collections-config 标志的私有数据集合定义的路径。 您可以在终端中看到以下 approveformyorg 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> private <span class="token parameter variable">--version</span> <span class="token number">1.0</span> --collections-config <span class="token punctuation">..</span>/asset-transfer-private-data/chaincode-go/collections_config.json --signature-policy <span class="token string">"OR('Org1MSP.member','Org2MSP.member')"</span> --package-id <span class="token variable">$CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token variable">$ORDERER_CA</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在channel成员同意将私有数据收集作为链码定义的一部分后，数据集合将使用 peer lifecycle chaincode commit 命令提交到channel。 如果您在日志中查找 commit 命令，您会发现它使用相同的 –collections-config 标志来提供集合定义的路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode commit <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> private <span class="token parameter variable">--version</span> <span class="token number">1.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> --collections-config <span class="token punctuation">..</span>/asset-transfer-private-data/chaincode-go/collections_config.json --signature-policy <span class="token string">"OR('Org1MSP.member','Org2MSP.member')"</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token variable">$ORDERER_CA</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token variable">$ORG1_CA</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token variable">$ORG2_CA</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-注册身份"><a href="#6-注册身份" class="headerlink" title="6.注册身份"></a>6.注册身份</h2><p>私有数据转移智能合约支持属于网络的个人身份的所有权。在我们的场景中，资产的所有者将是Org1的成员，而买方将属于Org2。为了突出显示GetClientIdentity（）.Get ID（）API和用户证书中的信息之间的连接，我们将使用Org1和Org2证书颁发机构（CA）注册两个新的标识，然后使用CA生成每个标识的证书和私钥。</p><p>首先，我们需要设置以下环境变量来使用 Fabric CA 客户端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span><span class="token builtin class-name">:</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们将使用Org1 CA创建身份资产所有者。将Fabric CA客户端设置为Org1 CA管理员的MSP（此标识由test-network脚本生成）:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CA_CLIENT_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用 fabric-ca-client 工具注册一个新的所有者客户端身份：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fabric-ca-client register <span class="token parameter variable">--caname</span> ca-org1 <span class="token parameter variable">--id.name</span> owner <span class="token parameter variable">--id.secret</span> ownerpw <span class="token parameter variable">--id.type</span> client <span class="token parameter variable">--tls.certfiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/fabric-ca/org1/tls-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您现在可以通过向注册命令提供注册名称和密码来生成身份证书和 MSP 文件夹：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fabric-ca-client enroll <span class="token parameter variable">-u</span> https://owner:ownerpw@localhost:7054 <span class="token parameter variable">--caname</span> ca-org1 <span class="token parameter variable">-M</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/owner@org1.example.com/msp"</span> <span class="token parameter variable">--tls.certfiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/fabric-ca/org1/tls-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行以下命令将节点 OU 配置文件复制到所有者身份 MSP 文件夹中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/msp/config.yaml"</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/owner@org1.example.com/msp/config.yaml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在可以使用 Org2 CA 来创建买家身份。 将 Fabric CA 客户端设置为 Org2 CA 管理员：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CA_CLIENT_HOME</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用 fabric-ca-client 工具注册一个新的所有者客户端身份：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fabric-ca-client register <span class="token parameter variable">--caname</span> ca-org2 <span class="token parameter variable">--id.name</span> buyer <span class="token parameter variable">--id.secret</span> buyerpw <span class="token parameter variable">--id.type</span> client <span class="token parameter variable">--tls.certfiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/fabric-ca/org2/tls-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在可以生成注册身份 MSP 文件夹：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fabric-ca-client enroll <span class="token parameter variable">-u</span> https://buyer:buyerpw@localhost:8054 <span class="token parameter variable">--caname</span> ca-org2 <span class="token parameter variable">-M</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/buyer@org2.example.com/msp"</span> <span class="token parameter variable">--tls.certfiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/fabric-ca/org2/tls-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行以下命令将节点 OU 配置文件复制到买方身份 MSP 文件夹中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/msp/config.yaml"</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/buyer@org2.example.com/msp/config.yaml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-在私有数据中创建资产"><a href="#7-在私有数据中创建资产" class="headerlink" title="7.在私有数据中创建资产"></a>7.在私有数据中创建资产</h2><p>现在我们已经创建了资产所有者的身份，我们可以调用私有数据智能合约来创建新资产。 将以下命令集复制并粘贴到终端的test-network目录中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/owner@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将使用 CreateAsset 函数创建一个存储在私有数据中的资产——assetID asset1，颜色为绿色，大小为 20，appraisedValue 为 100。回想一下，私有数据 appraisedValue 将与私有数据 assetID、颜色、大小分开存储。 为此，CreateAsset 函数调用 PutPrivateData() API 两次以保留私有数据，每个集合调用一次。 另请注意，私有数据是使用 –transient 标志传递的。 作为transient数据传递的输入不会保留在事务中，以保持数据的私密性。 transient数据作为二进制数据传递，因此在使用终端时必须对其进行 base64 编码。 我们使用环境变量来捕获 base64 编码值，并使用 tr 命令去除 linux base64 命令添加的有问题的换行符。</p><p>运行以下命令来创建资产：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>objectType<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>assetID<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset1<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>green<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:20,<span class="token entity" title="\&quot;">\"</span>appraisedValue<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":[]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您应该会看到类似于以下内容的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>chaincodeCmd<span class="token punctuation">]</span> chaincodeInvokeOrQuery-<span class="token operator">></span>INFO 001 Chaincode invoke successful. result: status:200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，上面的命令仅针对 Org1 对等体。 CreateAsset 事务写入两个集合，assetCollection 和 Org1MSPPrivateCollection。 Org1MSPPrivateCollection 需要 Org1 节点的背书才能写入集合，而 assetCollection 继承了链码的背书策略，“OR(‘Org1MSP.peer’,’Org2MSP.peer’)”。 来自 Org1 节点的背书可以满足两种背书策略，并且能够在没有来自 Org2 的背书的情况下创建资产。</p><h2 id="8-以授权peer身份查询私有数据"><a href="#8-以授权peer身份查询私有数据" class="headerlink" title="8.以授权peer身份查询私有数据"></a>8.以授权peer身份查询私有数据</h2><p>我们的集合定义允许Org1和Org2的所有peer节点在他们的侧数据库中拥有资产ID、颜色、大小和所有者私有数据，但只有Org1中的peer节点可以在其端数据库中拥有Org1对其评估值私有数据的意见。作为Org1中的授权peers，我们将查询这两组私有数据。</p><p>第一个查询命令调用 ReadAsset 函数，该函数将 assetCollection 作为参数传递。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// ReadAsset reads the information from collection</span><span class="token comment">// ReadAsset 从集合中读取信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SmartContract<span class="token punctuation">)</span> <span class="token function">ReadAsset</span><span class="token punctuation">(</span>ctx contractapi<span class="token punctuation">.</span>TransactionContextInterface<span class="token punctuation">,</span> assetID <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Asset<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ReadAsset: collection %v, ID %v"</span><span class="token punctuation">,</span> assetCollection<span class="token punctuation">,</span> assetID<span class="token punctuation">)</span>     assetJSON<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GetStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetPrivateData</span><span class="token punctuation">(</span>assetCollection<span class="token punctuation">,</span> assetID<span class="token punctuation">)</span> <span class="token comment">//get the asset from chaincode state（从链码状态获取资产）</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to read asset: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">//No Asset found, return empty response（没有找到资源，返回空响应）</span>     <span class="token keyword">if</span> assetJSON <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v does not exist in collection %v"</span><span class="token punctuation">,</span> assetID<span class="token punctuation">,</span> assetCollection<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">var</span> asset <span class="token operator">*</span>Asset     err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>assetJSON<span class="token punctuation">,</span> <span class="token operator">&amp;</span>asset<span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to unmarshal JSON: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> asset<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个查询命令调用 ReadAssetPrivateDetails 函数，该函数将 Org1MSPPrivateDetails 作为参数传递。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// ReadAssetPrivateDetails reads the asset private details in organization specific collection</span><span class="token comment">// ReadAssetPrivateDetails 读取组织特定集合中的资产私有详细信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SmartContract<span class="token punctuation">)</span> <span class="token function">ReadAssetPrivateDetails</span><span class="token punctuation">(</span>ctx contractapi<span class="token punctuation">.</span>TransactionContextInterface<span class="token punctuation">,</span> collection <span class="token builtin">string</span><span class="token punctuation">,</span> assetID <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>AssetPrivateDetails<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ReadAssetPrivateDetails: collection %v, ID %v"</span><span class="token punctuation">,</span> collection<span class="token punctuation">,</span> assetID<span class="token punctuation">)</span>     assetDetailsJSON<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GetStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetPrivateData</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> assetID<span class="token punctuation">)</span> <span class="token comment">// Get the asset from chaincode state（从链码状态获取资产）</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to read asset details: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">if</span> assetDetailsJSON <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"AssetPrivateDetails for %v does not exist in collection %v"</span><span class="token punctuation">,</span> assetID<span class="token punctuation">,</span> collection<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">var</span> assetDetails <span class="token operator">*</span>AssetPrivateDetails     err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>assetDetailsJSON<span class="token punctuation">,</span> <span class="token operator">&amp;</span>assetDetails<span class="token punctuation">)</span>     <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to unmarshal JSON: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> assetDetails<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过使用 ReadAsset 函数查询作为 Org1 的 assetCollection 集合来读取创建的资产的主要详细信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功时，该命令将返回以下结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"objectType"</span><span class="token builtin class-name">:</span><span class="token string">"asset"</span>,<span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"color"</span><span class="token builtin class-name">:</span><span class="token string">"green"</span>,<span class="token string">"size"</span>:20,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"x509::CN=appUser1,OU=admin,O=Hyperledger,ST=North Carolina,C=US::CN=ca.org1.example.com,O=org1.example.com,L=Durham,ST=North Carolina,C=US"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>资产的“所有者”是通过调用智能合约创建资产的身份。 私有数据智能合约使用 GetClientIdentity().GetID() API 读取身份证书的名称和颁发者。 您可以在所有者属性中看到身份证书的名称和颁发者。</p><p>作为 Org1 的成员查询 asset1 的 appraisedValue 私有数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org1MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该会看到以下结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"appraisedValue"</span>:100<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-以未经授权的peer身份查询私有数据"><a href="#9-以未经授权的peer身份查询私有数据" class="headerlink" title="9.以未经授权的peer身份查询私有数据"></a>9.以未经授权的peer身份查询私有数据</h2><p>现在我们将操作一个来自 Org2 的用户。 Org2 在其侧数据库中有资产转移私有数据 assetID、color、size、owner，如 assetCollection 策略中定义的，但不存储 Org1 的资产 appraisedValue 数据。 我们将查询两组私有数据。</p><h3 id="9-1切换到-Org2-中的peer"><a href="#9-1切换到-Org2-中的peer" class="headerlink" title="9.1切换到 Org2 中的peer"></a>9.1切换到 Org2 中的peer</h3><p>运行以下命令以 Org2 成员身份操作并查询 Org2 peer。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/buyer@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2查询私有数据-Org2-被授权"><a href="#9-2查询私有数据-Org2-被授权" class="headerlink" title="9.2查询私有数据 Org2 被授权"></a>9.2查询私有数据 Org2 被授权</h3><p>Org2中的节点应在其端数据库中拥有第一组资产转移私有数据（资产ID、颜色、大小和所有者），并可以使用通过assetCollection参数调用的ReadAsset（）函数访问该数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功后，应该会看到类似于以下结果的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"objectType"</span><span class="token builtin class-name">:</span><span class="token string">"asset"</span>,<span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"color"</span><span class="token builtin class-name">:</span><span class="token string">"green"</span>,<span class="token string">"size"</span>:20,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"x509::CN=appUser1,OU=admin,O=Hyperledger,ST=North Carolina,C=US::CN=ca.org1.example.com,O=org1.example.com,L=Durham,ST=North Carolina,C=US"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-3查询私有数据-Org2-未被授权"><a href="#9-3查询私有数据-Org2-未被授权" class="headerlink" title="9.3查询私有数据 Org2 未被授权"></a>9.3查询私有数据 Org2 未被授权</h3><p>因为资产是由 Org1 创建的，所以与 asset1 关联的 appraisedValue 存储在 Org1MSPPrivateCollection 集合中。 该值不由 Org2 中的peer存储。 运行以下命令以证明资产的 appraisedValue 未存储在 Org2 peer的 Org2MSPPrivateCollection 中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org2MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>空响应表明资产1私有详细信息在买方（Org2）私有集合中不存在。</p><p>Org2 的用户也不能读取 Org1 私有数据集合：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org1MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过在集合配置文件中设置 “memberOnlyRead”: true，我们指定只有来自 Org1 的客户端才能从集合中读取数据。 尝试读取集合的 Org2 客户端只会得到以下响应：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: endorsement failure during query. response: status:500 message:<span class="token string">"failed toread asset details: GET_STATE failed: transaction ID: d23e4bc0538c3abfb7a6bd4323fd5f52306e2723be56460fc6da0e5acaee6b23: txcreator does not have read access permission on privatedata in chaincodeName:private collectionName: Org1MSPPrivateCollection"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来自 Org2 的用户将只能看到私有数据的公共哈希。</p><h2 id="10-转移资产"><a href="#10-转移资产" class="headerlink" title="10.转移资产"></a>10.转移资产</h2><p>让我们看看将 asset1 转移到 Org2 需要什么。 在这种情况下，Org2 需要同意从 Org1 购买资产，并且他们需要就 appraisedValue 达成一致。 您可能想知道，如果 Org1 将他们对 appraisedValue 的意见保留在他们的私人数据库中，他们怎么能达成一致。 对于这个问题的答案，让我们继续。</p><p>使用我们的peer CLI 切换回终端。</p><p>要转移资产，买方（接收者）需要通过调用链码函数 AgreeToTransfer 同意与资产所有者相同的 appraisedValue。 约定的值将存储在 Org2 peer的 Org2MSPDetailsCollection 集合中。 运行以下命令以同意appraisedValue为 100 作为 Org2：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_VALUE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>assetID<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset1<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>appraisedValue<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"AgreeToTransfer","Args":[]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_value<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_VALUE</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>买家现在可以在 Org2 私有数据集合中查询他们同意的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org2MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用将返回以下值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"appraisedValue"</span>:100<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在买方已同意以appraisedValue购买资产，所有者可以将资产转让给 Org2。 资产需要通过拥有该资产的身份进行转移，所以让我们以 Org1 的身份进行操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/owner@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Org1 的所有者可以读取 AgreeToTransfer 交易添加的数据以查看买家身份：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadTransferAgreement","Args":["asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"buyerID"</span><span class="token builtin class-name">:</span><span class="token string">"eDUwOTo6Q049YnV5ZXIsT1U9Y2xpZW50LE89SHlwZXJsZWRnZXIsU1Q9Tm9ydGggQ2Fyb2xpbmEsQz1VUzo6Q049Y2Eub3JnMi5leGFtcGxlLmNvbSxPPW9yZzIuZXhhbXBsZS5jb20sTD1IdXJzbGV5LFNUPUhhbXBzaGlyZSxDPVVL"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在拥有转移资产所需的一切。 智能合约使用 GetPrivateDataHash() 函数检查 Org1MSPPrivateCollection 中appraisedValue的哈希值是否与 Org2MSPPrivateCollection 中appraisedValue的哈希值匹配。 如果哈希相同，则确认所有者和感兴趣的买家已同意相同的资产价值。 如果满足条件，转账功能将从转账协议中获取买方的客户 ID，并使买方成为资产的新所有者。 转让功能还将从前所有者的集合中删除资产评估值，并从资产集合中删除转让协议。</p><p>运行以下命令来转移资产。 Owner需要向转账交易提供assetID和买家的组织MSP ID：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_OWNER</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>assetID<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset1<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>buyerMSP<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>Org2MSP<span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"TransferAsset","Args":[]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_owner<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_OWNER</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可以查询 asset1 以查看传输结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAsset","Args":["asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果将显示买方身份现在拥有该资产：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"objectType"</span><span class="token builtin class-name">:</span><span class="token string">"asset"</span>,<span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"color"</span><span class="token builtin class-name">:</span><span class="token string">"green"</span>,<span class="token string">"size"</span>:20,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"x509::CN=appUser2, OU=client + OU=org2 + OU=department1::CN=ca.org2.example.com, O=org2.example.com, L=Hursley, ST=Hampshire, C=UK"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>资产的“所有者”现在具有买方身份</p><p>您还可以确认转移从Org1集合中删除了私有详细信息:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org1MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询将返回空结果，因为资产私有数据已从 Org1 私有数据收集中删除。</p><h2 id="11-清除私有数据"><a href="#11-清除私有数据" class="headerlink" title="11.清除私有数据"></a>11.清除私有数据</h2><p>对于只需要在短时间内保留私有数据的用例，可以在一定数量的块后“清除”数据，只留下数据的哈希值作为事务的不可变的证据。如果数据包含其他事务使用过但不再需要的敏感信息，或者数据正在复制到脱机数据库，则组织可以决定清除私有数据。</p><p>我们示例中的 appraisedValue 数据包含组织可能希望在特定时间段后过期的私有协议。 因此，它具有有限的生命周期，并且可以使用集合定义中的 blockToLive 属性在指定数量的块在区块链上保持不变后被清除。</p><p>Org2MSPPrivateCollection 定义的 blockToLive 属性值为 3，这意味着该数据将在侧数据库中存在三个块，然后将被清除。 如果我们在通道上创建额外的块，Org2 同意的 appraisedValue 最终将被清除。 我们可以创建 3 个新块来演示：</p><p>在您的终端中运行以下命令以切换回作为Org2的成员操作，并以Org2 peer为目标:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/buyer@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们仍然可以在 Org2MSPPrivateCollection 中查询 appraisedValue：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org2MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该会在日志中看到打印的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"assetID"</span><span class="token builtin class-name">:</span><span class="token string">"asset1"</span>,<span class="token string">"appraisedValue"</span>:100<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我们需要在清除私有数据之前跟踪我们添加了多少块，因此打开一个新的终端窗口并运行以下命令来查看 Org2 peer的私有数据日志。 注意最高的块号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs peer0.org1.example.com <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-E</span> <span class="token string">'private|pvt|privdata'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在返回到我们作为 Org2 成员的终端并运行以下命令来创建三个新资产。 每个命令都会创建一个新块。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>objectType<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>assetID<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset2<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>blue<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:30,<span class="token entity" title="\&quot;">\"</span>appraisedValue<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":[]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>objectType<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>assetID<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset3<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>red<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:25,<span class="token entity" title="\&quot;">\"</span>appraisedValue<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":[]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ASSET_PROPERTIES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>objectType<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>assetID<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>asset4<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>color<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>orange<span class="token entity" title="\&quot;">\"</span>,<span class="token entity" title="\&quot;">\"</span>size<span class="token entity" title="\&quot;">\"</span>:15,<span class="token entity" title="\&quot;">\"</span>appraisedValue<span class="token entity" title="\&quot;">\"</span>:100&#125;"</span> <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>n<span class="token variable">)</span></span>peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":[]&#125;'</span> <span class="token parameter variable">--transient</span> <span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>asset_properties<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span><span class="token variable">$ASSET_PROPERTIES</span><span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回到另一个终端并运行以下命令以确认新资产导致了创建了三个新块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs peer0.org1.example.com <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-E</span> <span class="token string">'private|pvt|privdata'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>appraisedValue 现已从 Org2MSPDetailsCollection 私有数据集合中清除。 从 Org2 终端再次发出查询以查看响应为空。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> private <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"ReadAssetPrivateDetails","Args":["Org2MSPPrivateCollection","asset1"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-对私有数据使用索引"><a href="#12-对私有数据使用索引" class="headerlink" title="12.对私有数据使用索引"></a>12.对私有数据使用索引</h2><p>索引也可以应用于私有数据集合，方法是将索引打包到META-INF/statedb/couchdb/collections/<collection_name>/indexes目录中的链码旁边。这里有一个示例索引。</collection_name></p><p>为了将链码部署到生产环境，建议在链码旁边定义任何索引，以便链码和支持索引作为一个单元自动部署，一旦链码安装在peer节点上并在channel上实例化。 当指定 –collections-config 标志指向集合 JSON 文件的位置时，关联的索引会在channel上的链码实例化时自动部署。</p><p>注意：无法创建用于隐式私有数据集合的索引。 隐式集合基于组织名称并自动创建。 名称的格式为 <em>implicit_org</em><OrgsMSPid> 请参阅 FAB-17916 了解更多信息。</OrgsMSPid></p><h2 id="13-结束"><a href="#13-结束" class="headerlink" title="13.结束"></a>13.结束</h2><p>使用完私有数据智能合约后，可以使用 network.sh 脚本关闭测试网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将关闭我们创建的网络的 CA、peer节点和ordering节点。 请注意，ledger上的所有数据都将丢失。 如果您想再次阅读本教程，您将从一个干净的初始状态开始。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档教程03-运行外部链码生成器</title>
      <link href="/2022/12/05/guan-fang-wen-dang-jiao-cheng-03-yun-xing-wai-bu-lian-ma-sheng-cheng-qi/"/>
      <url>/2022/12/05/guan-fang-wen-dang-jiao-cheng-03-yun-xing-wai-bu-lian-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程03-运行外部链码生成器"><a href="#官方文档教程03-运行外部链码生成器" class="headerlink" title="官方文档教程03-运行外部链码生成器"></a>官方文档教程03-运行外部链码生成器</h1><p>Fabric v2.4.1 外部链代码构建器提供了一种实用的方法来运行智能合约，使peer能够运行外部（对自身）命令来管理链码。 相比之下，早期将智能合约部署到channel方法需要peer节点来编排链代码的完整生命周期。 这要求peer有权访问 Docker 守护进程以创建映像并启动容器。 Java、Node.js 和 Go 链码框架对同行来说是明确已知的，包括它们应该如何构建和启动。</p><p>因此，传统的链码部署方法很难将链码部署到 Kubernetes (K8s) 或其他对 Docker 守护进程的访问受到限制的环境中，并且很难以任何形式的调试模式运行链码。 此外，代码通常由peer重新构建，需要外部互联网连接并引入一些关于已安装依赖项的不确定性。</p><p>链码即服务方法确实需要管理员协调链码构建和部署阶段。 尽管这增加了一个步骤，但它为管理员提供了对该过程的控制。 peer仍然需要安装“链码包”，但没有代码——只安装有关链码托管位置的信息（例如主机名、端口和 TLS 配置）。</p><h2 id="1-Fabric-v2-4-1-改进"><a href="#1-Fabric-v2-4-1-改进" class="headerlink" title="1.Fabric v2.4.1 改进"></a>1.Fabric v2.4.1 改进</h2><p>测试网络使用最新的 Fabric 版本 （v2.4.1），这有助于使用链码‘-as-a-service’：</p><ul><li>peer节点的 Docker 映像包含一个名为“ccaasbuilder”的链码‘-as-a-service’的预配置构建器。这消除了构建自己的外部构建器并重新打包和配置peer的先前要求。</li><li>ccaasbuilder 应用程序包含在二进制 tgz 存档下载中，以供在其他情况下使用。 sampleconfig/core.yaml 更新为引用“ccaasbuilder”。</li><li>Fabric v2.4.1 Java 链码消除了编写自定义引导主类的要求（在 Node.js 链码中实现并计划用于 go 链码）。</li></ul><p><strong>注意：</strong>此核心功能在早期版本中也可用，但需要编写外部链码代码生成器二进制文件并正确配置 core.yaml。</p><h2 id="2-通过测试网络实现端到端"><a href="#2-通过测试网络实现端到端" class="headerlink" title="2.通过测试网络实现端到端"></a>2.通过测试网络实现端到端</h2><p>test-network和一些链码已经更新，以支持链码‘-as-a-service’的运行。下面的命令需要最新的fabric-samples以及最新的fabric docker映像。</p><p>首先打开两个终端窗口，一个用于启动Fabric测试网络，另一个用于监视Docker容器。在”monitoring”窗口中，运行以下bash脚本来监视fabric_test网络上Docker容器的活动；这将监视添加到fabric-test网络的所有Docker容器。</p><p>test-network通常是通过运行./network.sh up命令来创建的，因此请延迟运行bash脚本，直到创建网络。（注意，可以使用docker network create fabric-test提前创建网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># from the fabric-samples repo</span>./test-network/monitordocker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在”Fabric Network”窗口中，启动测试网络:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> test-network./network.sh up createChannel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下一个命令的变体，例如使用 CouchDB 或 CA，可以在不影响链码‘-as-a-service’功能的情况下使用。三个关键步骤如下，顺序不分：</p><ul><li>生成链码包的Docker映像，其中包含用于确定链码容器（托管一个或多个合同）运行位置的信息。资产转移-basic/chaincode-typescript和资产转移-basic/chaincode-java都用Docker文件进行了更新。</li><li>安装、批准和提交链码定义；无论是否使用外部链码生成器，都将运行这些命令。链码包只包含连接信息（主机名、端口、TLS证书），没有代码。</li><li>启动包含合同的Docker容器。</li></ul><p>容器必须在peer提交第一个事务之前运行。如果设置了initRequired标志，这可能发生在提交时。</p><p>该序列可以按如下方式运行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCCAAS  <span class="token parameter variable">-ccn</span> basicts <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这与deployCC命令类似，因为它指定了名称和路径。因为每个容器都在fabric-test网络上，更改端口可以避免与其他链码容器发送冲突。如果运行多个服务，则需要更改端口。</p><p>如果成功到这一点，智能合约（链码）应该在监控窗口中启动。应该有两个容器在运行，一个用于org1，一个用于org2。容器名称包含组织名称、peer名称和链码名称。</p><p>作为测试，运行“合同原数据”功能，如下所示。（有关作为不同组织进行测试的详细信息，请参阅<a href="https://hyperledger-fabric.readthedocs.io/en/latest/test_network.html#interacting-with-the-network">与网络交互</a>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Environment variables for Org1</span><span class="token comment"># Org1的环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/config<span class="token comment"># invoke the function</span><span class="token comment"># 调用函数</span>peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basicts <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["org.hyperledger.fabric:GetMetadata"]&#125;'</span> <span class="token operator">|</span> jq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"$schema"</span><span class="token operator">:</span> <span class="token string">"https://hyperledger.github.io/fabric-chaincode-node/main/api/contract-schema.json"</span><span class="token punctuation">,</span>  <span class="token property">"contracts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"AssetTransferContract"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"AssetTransferContract"</span><span class="token punctuation">,</span>      <span class="token property">"contractInstance"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"AssetTransferContract"</span><span class="token punctuation">,</span>        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"SUBMIT"</span><span class="token punctuation">,</span>            <span class="token string">"submitTx"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"InitLedger"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"SUBMIT"</span><span class="token punctuation">,</span>            <span class="token string">"submitTx"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"size"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"owner"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"appraisedValue"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"CreateAsset"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"EVALUATE"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ReadAsset"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"SUBMIT"</span><span class="token punctuation">,</span>            <span class="token string">"submitTx"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"size"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"owner"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"appraisedValue"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"UpdateAsset"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"SUBMIT"</span><span class="token punctuation">,</span>            <span class="token string">"submitTx"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"DeleteAsset"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"returns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"boolean"</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"AssetExists"</span><span class="token punctuation">,</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"EVALUATE"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"SUBMIT"</span><span class="token punctuation">,</span>            <span class="token string">"submitTx"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"newOwner"</span><span class="token punctuation">,</span>              <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>              <span class="token property">"schema"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"TransferAsset"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"returns"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"GetAllAssets"</span><span class="token punctuation">,</span>          <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"EVALUATE"</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"parameters"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"AssetTransfer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Smart contract for trading assets"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"AssetTransferContract"</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">""</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"org.hyperledger.fabric"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"org.hyperledger.fabric"</span><span class="token punctuation">,</span>      <span class="token property">"contractInstance"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"org.hyperledger.fabric"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"GetMetadata"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">""</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"asset-transfer-basic"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"components"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"schemas"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果没有安装jq，可以省略|jq。但是，原数据在JSON中显示了部署契约的详细信息，因此jq提供了易读性。要确认智能合约正在工作，请重复org2前面的命令。</p><p>要运行Java示例，请按如下方式更改deployCCAAS命令，该命令将创建两个新容器:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCCAAS  <span class="token parameter variable">-ccn</span> basicj <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-可能存在的错误"><a href="#3-可能存在的错误" class="headerlink" title="3.可能存在的错误"></a>3.可能存在的错误</h2><p>如果传递的JSON结构格式不正确，对等日志将包含以下错误:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">::Error: Failed to unmarshal json: cannot unmarshal string into Go value of <span class="token builtin class-name">type</span> map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>interface <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">command</span><span class="token operator">=</span>build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-如何配置每种语言"><a href="#4-如何配置每种语言" class="headerlink" title="4.如何配置每种语言"></a>4.如何配置每种语言</h2><p>每种语言都可以在“即服务”模式下运行。以下方法基于出版时的最新库。启动映像时，可以指定相应链码库的任何TLS选项或其他日志记录选项。</p><h3 id="4-1Java"><a href="#4-1Java" class="headerlink" title="4.1Java"></a>4.1Java</h3><p>使用Fabric v2.4.1Java链码库，没有代码更改或构建更改来实现。如果设置了环境变量CHAINCODE_SERVER_ADDRESS，则将使用“-as-a-service”模式。</p><p>下面的示例Docker run命令显示了两个必需的变量，CHAINCODE_SERVER_ADDRESS和CORE_CHAICODE_ID_NAME:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> peer0org1_assettx_ccaas  <span class="token punctuation">\</span>              <span class="token parameter variable">--network</span> fabric_test <span class="token punctuation">\</span>              <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_SERVER_ADDRESS</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:9999 <span class="token punctuation">\</span>              <span class="token parameter variable">-e</span> <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span><span class="token operator">&lt;</span>use package <span class="token function">id</span> here<span class="token operator">></span> <span class="token punctuation">\</span>               assettx_ccaas_image:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2Node-js"><a href="#4-2Node-js" class="headerlink" title="4.2Node.js"></a>4.2Node.js</h3><p>对于Node.js（JavaScript或TypeScript）链码，package.json通常使用fabric-chaincode-node start作为主启动命令。要以“-as-a-service”模式运行，请将此启动命令更改为fabric-chaincode-node服务器–链码地址=$CHAINCODE_SERVER_ADDRESS-链码ID=$CHAINCODE_ID</p><h2 id="5-调试链码"><a href="#5-调试链码" class="headerlink" title="5.调试链码"></a>5.调试链码</h2><p>运行在‘-as-a-service’模式提供选项，类似于用于调试代码的Fabric“dev”模式。dev模式的限制不适用于‘-as-a-service’。</p><p>deployCCAAS命令可以提供-cca as docker false选项来不生成Docker映像或启动Docker容器。该选项输出将要运行的命令。</p><p>命令输出类似于以下示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCCAAS  <span class="token parameter variable">-ccn</span> basicj <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-java <span class="token parameter variable">-ccaasdocker</span> <span class="token boolean">false</span><span class="token comment">#....</span>Not building <span class="token function">docker</span> image<span class="token punctuation">;</span> this the <span class="token builtin class-name">command</span> we would have run<span class="token function">docker</span> build <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-java/Dockerfile <span class="token parameter variable">-t</span> basicj_ccaas_image:latest --build-arg <span class="token assign-left variable">CC_SERVER_PORT</span><span class="token operator">=</span><span class="token number">9999</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-java<span class="token comment">#....</span>Not starting <span class="token function">docker</span> containers<span class="token punctuation">;</span> these are the commands we would have run    <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> peer0org1_basicj_ccaas                    <span class="token parameter variable">--network</span> fabric_test                   <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_SERVER_ADDRESS</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:9999                   <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_ID</span><span class="token operator">=</span>basicj_1.0:59dcd73a14e2db8eab7f7683343ce27ac242b93b4e8075605a460d63a0438405 <span class="token parameter variable">-e</span> <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span>basicj_1.0:59dcd73a14e2db8eab7f7683343ce27ac242b93b4e8075605a460d63a0438405                     basicj_ccaas_image:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：根据目录位置或调试要求，前面的命令可能需要调整。</p><h2 id="6-构建-Docker-镜像"><a href="#6-构建-Docker-镜像" class="headerlink" title="6.构建 Docker 镜像"></a>6.构建 Docker 镜像</h2><p>调试链码的第一个要求是构建Docker映像。只要peer能够连接到connection.json中指定的hostname:port，链码的实际打包对peer就不重要了。可以重新定位下面指定的Docker文件。</p><p>手动构建用于资产转移的Docker映像-basic/chaincode-java：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-java/Dockerfile <span class="token parameter variable">-t</span> basicj_ccaas_image:latest --build-arg <span class="token assign-left variable">CC_SERVER_PORT</span><span class="token operator">=</span><span class="token number">9999</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-启动-Docker-容器"><a href="#7-启动-Docker-容器" class="headerlink" title="7.启动 Docker 容器"></a>7.启动 Docker 容器</h2><p>下来，必须启动 Docker 容器。例如，在 Node.js 中，容器可以按如下方式启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-p</span> <span class="token number">9229</span>:9229 <span class="token parameter variable">--name</span> peer0org2_basic_ccaas <span class="token parameter variable">--network</span> fabric_test <span class="token parameter variable">-e</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>true <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_SERVER_ADDRESS</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:9999 <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_ID</span><span class="token operator">=</span>basic_1.0:7c7dff5cdc43c77ccea028c422b3348c3c1fb5a26ace0077cf3cc627bd355ef0 <span class="token parameter variable">-e</span> <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span>basic_1.0:7c7dff5cdc43c77ccea028c422b3348c3c1fb5a26ace0077cf3cc627bd355ef0 basic_ccaas_image:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，在Java中，Docker容器可以按如下方式启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> peer0org1_basicj_ccaas <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">--network</span> fabric_test <span class="token parameter variable">-e</span> <span class="token assign-left variable">DEBUG</span><span class="token operator">=</span>true <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_SERVER_ADDRESS</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:9999 <span class="token parameter variable">-e</span> <span class="token assign-left variable">CHAINCODE_ID</span><span class="token operator">=</span>basicj_1.0:b014a03d8eb1898535e25b4dfeeb3f8244c9f07d91a06aec03e2d19174c45e4f <span class="token parameter variable">-e</span> <span class="token assign-left variable">CORE_CHAINCODE_ID_NAME</span><span class="token operator">=</span>basicj_1.0:b014a03d8eb1898535e25b4dfeeb3f8244c9f07d91a06aec03e2d19174c45e4f  basicj_ccaas_image:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-调试先决条件"><a href="#8-调试先决条件" class="headerlink" title="8.调试先决条件"></a>8.调试先决条件</h2><p>以下先决条件适用于调试所有语言:</p><ul><li>容器名称必须与peer的connection.json中的名称匹配。</li><li>peer节点通过Docker网络连接到链码容器。因此，端口9999不需要转发到主机。</li><li>调试器中的单个单步执行可能会触发默认的Fabric事务超时值30秒。通过将CORE_CHAINCODE_EXECUTETIMEOUT=300s添加到test-network/docker/docker-composer-test-net.yml文件中每个peer的环境选项中，将链码完成事务的时间增加到300秒。</li><li>在上一节中的docker run命令中，test-network -d默认选项已被-it取代。此更改在前台运行Docker容器，而不是在分离模式下运行Docker容器。</li></ul><p>以下先决条件适用于调试Node.js:</p><ul><li>端口9229被转发。但是，这是Node.js使用的调试端口。</li><li>-e DEBUG=true将触发节点运行时以调试模式启动。这是在docker/docker-entrypoint.sh脚本中编码的，出于安全考虑，应该考虑从生产映像中删除该脚本。</li><li>如果您使用的是TypeScript，请确保TypeScript已使用sourcemaps编译；否则，调试器将难以匹配源代码。</li></ul><p>以下先决条件适用于调试 Java：</p><ul><li>端口8000被转发，这是JVM的调试端口。</li><li>-e DEBUG=true将触发节点运行时以调试模式启动。这是一个在docker/docker-entrypoint.sh脚本中编码的示例，出于安全考虑，应该考虑将其从生产映像中删除。</li><li>启动调试器的java命令选项是java-agent lib:jdwp=传输=dt_socket，服务器=y，挂起=n，地址=0.0.0.0:8000 -jar/链码.jar。注意0.0.0.0，作为调试端口，必须绑定到所有的网络适配器因此可以从容器外部连接调试器。</li></ul><h2 id="9-与多个peer一起运行"><a href="#9-与多个peer一起运行" class="headerlink" title="9.与多个peer一起运行"></a>9.与多个peer一起运行</h2><p>在前面的方法中，链码被批准的每个peer都有一个运行链码的容器。‘-as-a-service’方法需要实现相同的体系结构。</p><p>json包含正在运行的链码容器的地址，因此可以对其进行更新，以确保每个peer连接到不同的容器。但是，与链码包中的connection.json一样，Fabric要求包ID在组织中的所有peer之间保持一致。为了实现这一点，外部构建器支持模板功能。此模板的上下文取自每个peer上设置的环境变量CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG。</p><p>将地址定义为connection.json中的模板，如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"&#123;&#123;.peername&#125;&#125;_assettransfer_ccaas:9999"</span><span class="token punctuation">,</span>  <span class="token property">"dial_timeout"</span><span class="token operator">:</span> <span class="token string">"10s"</span><span class="token punctuation">,</span>  <span class="token property">"tls_required"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在peer的环境配置中，为org1的peer1设置以下变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG</span><span class="token operator">=</span><span class="token string">"&#123;<span class="token entity" title="\&quot;">\"</span>peername<span class="token entity" title="\&quot;">\"</span>:<span class="token entity" title="\&quot;">\"</span>org1peer1<span class="token entity" title="\&quot;">\"</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>外部构建器然后将此地址解析为org1peer1_assettransfer_ccaas:9999，供peer使用。</p><p>每个peer都可以有自己独立的配置，因此有一个唯一的地址。设置的JSON字符串可以具有任何结构，只要模板（在golang模板语法中）匹配。</p><p>connection.json中的任何值都可以模板化，但只能模板化值，不能模板化键。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档教程02-运行Fabric应用程序</title>
      <link href="/2022/12/04/guan-fang-wen-dang-jiao-cheng-02-yun-xing-fabric-ying-yong-cheng-xu/"/>
      <url>/2022/12/04/guan-fang-wen-dang-jiao-cheng-02-yun-xing-fabric-ying-yong-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程02-运行Fabric应用程序"><a href="#官方文档教程02-运行Fabric应用程序" class="headerlink" title="官方文档教程02-运行Fabric应用程序"></a>官方文档教程02-运行Fabric应用程序</h1><p>本教程介绍了Fabric应用程序如何与部署的区块链网络交互。本教程使用使用Fabric Gateway客户端API构建的示例程序来调用智能合约，该智能合约使用智能合约API查询和更新账本—在官方文档教程案例分析01-将智能合约部署到通道中有详细介绍。</p><p><strong>关于资产转移</strong></p><p>资产转移（basic）示例演示如何创建、更新和查询资产。它涉及以下两个 组件：</p><ol><li><p><strong>示例应用</strong>：调用区块链网络，调用交易 在智能合约中实现。应用程序位于以下fabric-samples目录中：</p><pre class="line-numbers language-none"><code class="language-none">asset-transfer-basic&#x2F;application-gateway-typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>智能合约</strong>：实现与智能合约交互的交易 分类帐。智能合约位于以下fabric-samples目录中：</p><pre class="line-numbers language-none"><code class="language-none">asset-transfer-basic&#x2F;chaincode-(typescript, go, java)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>在本例中，我们将使用TypeScript 智能合约。</p><p>本教程由两个主要部分组成：</p><ol><li><p><strong>建立区块链网络</strong>。我们的应用程序需要一个区块链网络来交互，因此我们将启动一个基础网络并部署一个智能 我们申请的合同。</p><p><img src="https://hyperledger-fabric.readthedocs.io/en/latest/_images/AppConceptsOverview.png" alt="_images/应用概念概述.png"></p><p>名词介绍：</p><ul><li>Application：应用程序</li><li>Application Developer Identity：应用程序开发人员身份</li><li>Smart Contracts：智能合约</li><li>Receive ledger update：接收账本更新</li><li>Blockchain Network：区块链网络</li><li>ledger：账本</li></ul></li><li><p><strong>运行示例应用程序以与智能合约交互</strong>。我们的应用程序将使用资产转移智能合约来创建、查询和更新账本上的资产。我们会的 逐步完成应用程序的代码及其调用的事务，包括创建一些初始资产， 查询资产、查询一系列资产、创建新资产以及将资产转让给新所有者。</p></li></ol><p>完成本教程后，您应该对 Fabric 应用程序和智能合约有基本的了解 共同管理区块链网络分布式账本上的数据。</p><h2 id="1-设置区块链网络"><a href="#1-设置区块链网络" class="headerlink" title="1.设置区块链网络"></a>1.设置区块链网络</h2><p>如果您已经完成了<a href="https://hyperledger-fabric.readthedocs.io/en/latest/test_network.html">使用 Fabric 测试</a>网络教程并已启动并运行网络，本教程将带来 在启动新网络之前，先向下运行，以确保您从一个空账本开始。</p><h3 id="1-1启动区块链网络"><a href="#1-1启动区块链网络" class="headerlink" title="1.1启动区块链网络"></a>1.1启动区块链网络</h3><p>导航到test-network存储库的本地克隆中的fabric-samples子目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您已经运行了测试网络，请将其关闭以确保环境干净。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用network.sh shell 脚本启动结构测试网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh up createChannel <span class="token parameter variable">-c</span> mychannel <span class="token parameter variable">-ca</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>此命令将使用两个peer、一个ordering和三个证书颁发机构部署 Fabric 测试网络 （Orderer, Org1, Org2）。</li><li>我们不使用cryptogen工具，而是使用证书颁发机构（因此使用-ca标志）启动测试网络。此外，在启动证书颁发机构时启动org admin用户注册。</li></ul><h3 id="1-2部署智能合约"><a href="#1-2部署智能合约" class="headerlink" title="1.2部署智能合约"></a>1.2部署智能合约</h3><p>注意：本教程演示了Asset Transfer智能合约和应用程序的TypeScript版本，但您可以将任何智能合约语言示例与TypeScript应用程序示例一起使用（例如调用Go智能合约函数的TypeScript应用程序或调用Java智能合约函数的TypeScript应用程序等）。要尝试智能合约的Go或Java版本，请更改./network.sh的typescript参数。部署CC -ccl类型脚本命令下面的go或java，并按照写在终端的说明。</p><p>接下来，让我们通过调用./network.sh来部署包含智能合约的chaincode包使用链码名称和语言选项的脚本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCC <span class="token parameter variable">-ccn</span> basic <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-typescript/ <span class="token parameter variable">-ccl</span> typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此脚本使用链码生命周期来打包、安装、查询已安装的链码，批准两者的链码 Org1 和 Org2，最后提交链码。</p><p>如果链码包部署成功，终端中输出的末尾应如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Committed chaincode definition <span class="token keyword">for</span> chaincode <span class="token string">'basic'</span> on channel <span class="token string">'mychannel'</span><span class="token builtin class-name">:</span>Version: <span class="token number">1.0</span>, Sequence: <span class="token number">1</span>, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: <span class="token punctuation">[</span>Org1MSP: true, Org2MSP: true<span class="token punctuation">]</span>Query chaincode definition successful on peer0.org2 on channel <span class="token string">'mychannel'</span>Chaincode initialization is not required<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3准备示例应用程序"><a href="#1-3准备示例应用程序" class="headerlink" title="1.3准备示例应用程序"></a>1.3准备示例应用程序</h3><p>现在，让我们准备一个示例资产转移<a href="https://github.com/hyperledger/fabric-samples/tree/main/asset-transfer-basic/application-gateway-typescript">TypeScript 应用程序</a>，该应用程序将用于与部署的智能合约进行交互。</p><p>打开一个新终端，然后导航到application-gateway-typescript目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> asset-transfer-basic/application-gateway-typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此目录包含使用适用于 Node 的结构网关客户端 API 开发的示例应用程序。</p><p>运行以下命令以安装依赖项并生成应用程序。可能需要一些时间才能完成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此过程安装在应用程序的package.json中定义的应用程序依赖项。其中最重要的是@hyperledger/fabric-gateway Node.js包；它提供了Fabric Gateway客户端API，用于连接Fabric Gateway，并使用特定的客户端标识提交和评估事务以及接收事件。</p><p>npm安装完成后，运行应用程序的一切都就绪了。</p><p>让我们看一下我们将在本教程中使用的示例 TypeScript 应用程序文件。运行以下命令 命令列出此目录中的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该看到以下内容：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-02-yun-xing-fabric-ying-yong-cheng-xu/image-20221204214223739.png"></p><p>src目录包含客户端应用程序源代码。安装过程中从源代码生成的JavaScript输出位于dist目录中，可以忽略。</p><h2 id="2运行示例应用程序"><a href="#2运行示例应用程序" class="headerlink" title="2运行示例应用程序"></a>2运行示例应用程序</h2><p>当我们在本教程前面启动Fabric测试网络时，使用证书颁发机构创建了几个身份。其中包括每个组织的用户身份。应用程序将使用其中一个用户身份的凭证与区块链网络进行交易。</p><p>让我们运行应用程序，然后逐步完成与智能合约功能的每个交互。在Asset-transfer-basic/application-gateway-typescript目录中，运行以下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1首先，建立与网关的-gRPC-连接"><a href="#2-1首先，建立与网关的-gRPC-连接" class="headerlink" title="2.1首先，建立与网关的 gRPC 连接"></a>2.1首先，建立与网关的 gRPC 连接</h3><p>客户端应用程序建立一个与Fabric网关服务的更高级的GRPC连接，用于与区块链网络进行交易。为此，它只需要Fabric 网关的端点地址，如果配置为使用TLS，则需要适当的TLS证书。在本示例中，网关端点地址是提供Fabric 网关服务的对等方的地址。</p><p>注意：与建立 gRPC 连接相关的开销很大，因此此连接应 由应用程序保留，并用于与Fabric网关的所有交互。</p><p>警告：为了维护事务中使用的任何私有数据的安全性，应用程序应该连接到与客户机身份属于同一组织的Fabric 网关。如果客户端标识的组织没有托管任何网关，则应使用另一个组织中的受信任网关。</p><p>TypeScript 应用程序使用签名证书颁发机构的 TLS 证书创建 gRPC 连接，因此 可以验证网关 TLS 证书的真实性。</p><p>要成功建立TLS连接，客户端使用的端点地址必须与网关TLS证书中的地址匹配。由于客户机在本地主机地址访问网关的Docker容器，因此指定了一个gRPC选项来强制将此端点地址解释为网关配置的主机名。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> peerEndpoint <span class="token operator">=</span> <span class="token string">'localhost:7051'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">newGrpcConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>grpc<span class="token punctuation">.</span>Client<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tlsRootCert <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>tlsCertPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> tlsCredentials <span class="token operator">=</span> grpc<span class="token punctuation">.</span>credentials<span class="token punctuation">.</span><span class="token function">createSsl</span><span class="token punctuation">(</span>tlsRootCert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">grpc</span><span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>peerEndpoint<span class="token punctuation">,</span> tlsCredentials<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'grpc.ssl_target_name_override'</span><span class="token operator">:</span> <span class="token string">'peer0.org1.example.com'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2其次，创建网关连接"><a href="#2-2其次，创建网关连接" class="headerlink" title="2.2其次，创建网关连接"></a>2.2其次，创建网关连接</h3><p>然后，应用程序创建一个网关连接，用于访问Fabric 网关可访问的任何网络（类似于channel），以及随后部署到这些网络的智能合约。网关连接有三个要求：</p><ol><li>gRPC连接到Fabric网关。</li><li>用于与网络进行交易的客户端标识。</li><li>用于为客户端标识生成数字签名的签名实现。</li></ol><p>示例应用程序使用 Org1 用户的 X.509 证书作为客户端标识和签名实现 基于该用户的私钥。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">newGrpcConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> gateway <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">,</span>    identity<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">newIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    signer<span class="token operator">:</span> <span class="token keyword">await</span> <span class="token function">newSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">newIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Identity<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> credentials <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>certPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> mspId<span class="token operator">:</span> <span class="token string">'Org1MSP'</span><span class="token punctuation">,</span> credentials <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">newSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Signer<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> privateKeyPem <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> privateKey <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createPrivateKey</span><span class="token punctuation">(</span>privateKeyPem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> signers<span class="token punctuation">.</span><span class="token function">newPrivateKeySigner</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3第三，访问要调用的智能合约"><a href="#2-3第三，访问要调用的智能合约" class="headerlink" title="2.3第三，访问要调用的智能合约"></a>2.3第三，访问要调用的智能合约</h3><p>示例应用程序使用网关连接获取对该网络的引用，然后是部署在该网络上的链码内的默认合同。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> network <span class="token operator">=</span> gateway<span class="token punctuation">.</span><span class="token function">getNetwork</span><span class="token punctuation">(</span>channelName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> contract <span class="token operator">=</span> network<span class="token punctuation">.</span><span class="token function">getContract</span><span class="token punctuation">(</span>chaincodeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当一个链码包包含多个智能合约时，您可以同时提供链码的名称和名称 一个特定的智能合约作为<a href="https://hyperledger.github.io/fabric-gateway/main/api/node/interfaces/Network.html#getContract">getContract（）</a>调用的参数。例如：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> contract <span class="token operator">=</span> network<span class="token punctuation">.</span><span class="token function">getContract</span><span class="token punctuation">(</span>chaincodeName<span class="token punctuation">,</span> smartContractName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4第四，用样本资产填充账本"><a href="#2-4第四，用样本资产填充账本" class="headerlink" title="2.4第四，用样本资产填充账本"></a>2.4第四，用样本资产填充账本</h3><p>在初始部署链码包之后，ledger立即为空。应用程序使用submitTransaction（）调用InitLedger事务函数，该函数使用一些示例资产填充ledger。Submit Transaction（）将使用Fabric网关执行以下操作:</p><ol><li>认可交易建议。</li><li>将背书交易提交到ordering。</li><li>等待事务提交，更新ledger状态。</li></ol><p>示例应用程序InitLedger调用：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">submitTransaction</span><span class="token punctuation">(</span><span class="token string">'InitLedger'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5调用事务函数读写资产"><a href="#2-5调用事务函数读写资产" class="headerlink" title="2.5调用事务函数读写资产"></a>2.5调用事务函数读写资产</h3><p>现在，应用程序已经准备好执行业务逻辑，通过调用智能合约上的事务函数来查询、创建其他资产和修改ledger上的资产。</p><h4 id="2-5-1查询所有资产"><a href="#2-5-1查询所有资产" class="headerlink" title="2.5.1查询所有资产"></a>2.5.1查询所有资产</h4><p>应用程序使用evaluateTransaction（）通过执行只读事务调用来查询分类账。evaluateTransaction（）将使用Fabric网关调用事务函数并返回其结果。事务处理不会发送到ordering，也不会进行ledger更新。</p><p>下面的示例应用程序只是获取上一步填充ledger时创建的所有资产。</p><p>示例应用程序GetAllAssets调用：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> resultBytes <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">evaluateTransaction</span><span class="token punctuation">(</span><span class="token string">'GetAllAssets'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resultJson <span class="token operator">=</span> utf8Decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>resultBytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>resultJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*** Result:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：事务函数的结果总是以字节的形式返回，因为事务函数可以返回任何类型的数据。事务函数通常返回字符串；或者，如上所述，返回JSON数据的UTF-8字符串。应用程序负责正确解释结果字节。</p><p>终端输出应如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">*** Result<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    AppraisedValue<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    Color<span class="token operator">:</span> 'blue'<span class="token punctuation">,</span>    ID<span class="token operator">:</span> 'asset1'<span class="token punctuation">,</span>    Owner<span class="token operator">:</span> 'Tomoko'<span class="token punctuation">,</span>    Size<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    docType<span class="token operator">:</span> 'asset'  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    AppraisedValue<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>    Color<span class="token operator">:</span> 'red'<span class="token punctuation">,</span>    ID<span class="token operator">:</span> 'asset2'<span class="token punctuation">,</span>    Owner<span class="token operator">:</span> 'Brad'<span class="token punctuation">,</span>    Size<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    docType<span class="token operator">:</span> 'asset'  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    AppraisedValue<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    Color<span class="token operator">:</span> 'green'<span class="token punctuation">,</span>    ID<span class="token operator">:</span> 'asset3'<span class="token punctuation">,</span>    Owner<span class="token operator">:</span> 'Jin Soo'<span class="token punctuation">,</span>    Size<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    docType<span class="token operator">:</span> 'asset'  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    AppraisedValue<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>    Color<span class="token operator">:</span> 'yellow'<span class="token punctuation">,</span>    ID<span class="token operator">:</span> 'asset4'<span class="token punctuation">,</span>    Owner<span class="token operator">:</span> 'Max'<span class="token punctuation">,</span>    Size<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    docType<span class="token operator">:</span> 'asset'  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    AppraisedValue<span class="token operator">:</span> <span class="token number">700</span><span class="token punctuation">,</span>    Color<span class="token operator">:</span> 'black'<span class="token punctuation">,</span>    ID<span class="token operator">:</span> 'asset5'<span class="token punctuation">,</span>    Owner<span class="token operator">:</span> 'Adriana'<span class="token punctuation">,</span>    Size<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    docType<span class="token operator">:</span> 'asset'  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    AppraisedValue<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>    Color<span class="token operator">:</span> 'white'<span class="token punctuation">,</span>    ID<span class="token operator">:</span> 'asset6'<span class="token punctuation">,</span>    Owner<span class="token operator">:</span> 'Michel'<span class="token punctuation">,</span>    Size<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    docType<span class="token operator">:</span> 'asset'  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2创建新资产"><a href="#2-5-2创建新资产" class="headerlink" title="2.5.2创建新资产"></a>2.5.2创建新资产</h4><p>示例应用程序提交事务以创建新资产。</p><p>示例应用程序CreateAsset调用：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> assetId <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">asset</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">submitTransaction</span><span class="token punctuation">(</span>    <span class="token string">'CreateAsset'</span><span class="token punctuation">,</span>    assetId<span class="token punctuation">,</span>    <span class="token string">'yellow'</span><span class="token punctuation">,</span>    <span class="token string">'5'</span><span class="token punctuation">,</span>    <span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token string">'1300'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在上面的应用程序片段中，需要注意的是，CreateAsset事务使用链码所期望的相同类型和数量的参数提交，并且以正确的顺序提交。在本例中，正确排序的参数为:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">assetId<span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"1300"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相应的智能合约的CreateAsset事务函数需要定义资产对象的以下参数序列:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token constant">ID</span><span class="token punctuation">,</span> Color<span class="token punctuation">,</span> Size<span class="token punctuation">,</span> Owner<span class="token punctuation">,</span> AppraisedValue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-5-3更新资产"><a href="#2-5-3更新资产" class="headerlink" title="2.5.3更新资产"></a>2.5.3更新资产</h4><p>示例应用程序提交一个事务以转移新创建的资产的所有权。这一次使用submitAsync（）调用事务，它在成功地将已认可的事务提交给ordering后返回，而不是等到事务提交到ledger。这允许应用程序在等待提交事务结果时使用事务结果执行工作。</p><p>示例应用程序TransferAsset调用：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> commit <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">submitAsync</span><span class="token punctuation">(</span><span class="token string">'TransferAsset'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    arguments<span class="token operator">:</span> <span class="token punctuation">[</span>assetId<span class="token punctuation">,</span> <span class="token string">'Saptha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> oldOwner <span class="token operator">=</span> utf8Decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>commit<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">*** Successfully submitted transaction to transfer ownership from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>oldOwner<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> to Saptha</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*** Waiting for transaction commit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">await</span> commit<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">.</span>successful<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Transaction </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>status<span class="token punctuation">.</span>transactionId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> failed to commit with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>status<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*** Transaction committed successfully'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*** Successfully submitted transaction to transfer ownership from Tom to Saptha*** Waiting <span class="token keyword">for</span> transaction commit*** Transaction committed successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-5-4查询更新的资产"><a href="#2-5-4查询更新的资产" class="headerlink" title="2.5.4查询更新的资产"></a>2.5.4查询更新的资产</h4><p>然后，示例应用程序评估已传输资产的查询，显示该资产是用所描述的属性创建的，然后被传输到新的所有者。</p><p>示例应用程序ReadAsset调用：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> resultBytes <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">evaluateTransaction</span><span class="token punctuation">(</span><span class="token string">'ReadAsset'</span><span class="token punctuation">,</span> assetId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resultJson <span class="token operator">=</span> utf8Decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>resultBytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>resultJson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*** Result:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*** Result: <span class="token punctuation">&#123;</span>    AppraisedValue: <span class="token number">1300</span>,    Color: <span class="token string">'yellow'</span>,    ID: <span class="token string">'asset1639084597466'</span>,    Owner: <span class="token string">'Saptha'</span>,    Size: <span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-5处理事务错误"><a href="#2-5-5处理事务错误" class="headerlink" title="2.5.5处理事务错误"></a>2.5.5处理事务错误</h4><p>序列的最后一部分演示了提交事务的错误。在此示例中，应用程序尝试提交UpdateAsset事务，但指定了一个不存在的资产ID。事务函数返回错误响应，submitTransaction（）调用失败。</p><p>提交事务（）失败可能会生成几种不同类型的错误，指示提交流中发生错误的点，并包含使应用程序能够适当响应的附加信息。有关可能生成的不同错误类型的详细信息，请参阅API文档。</p><p>示例应用程序失败UpdateAsset调用：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">submitTransaction</span><span class="token punctuation">(</span>        <span class="token string">'UpdateAsset'</span><span class="token punctuation">,</span>        <span class="token string">'asset70'</span><span class="token punctuation">,</span>        <span class="token string">'blue'</span><span class="token punctuation">,</span>        <span class="token string">'5'</span><span class="token punctuation">,</span>        <span class="token string">'Tomoko'</span><span class="token punctuation">,</span>        <span class="token string">'300'</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'******** FAILED to return an error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*** Successfully caught the error: \n'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端输出（为清楚起见，删除了堆栈迹线）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*** Successfully caught the error:EndorseError: <span class="token number">10</span> ABORTED: failed to endorse transaction, see attached details <span class="token keyword">for</span> <span class="token function">more</span> info    at <span class="token punctuation">..</span>. <span class="token punctuation">&#123;</span>  code: <span class="token number">10</span>,  details: <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      address: <span class="token string">'peer0.org1.example.com:7051'</span>,      message: <span class="token string">'error in simulation: transaction returned with failure: Error: The asset asset70 does not exist'</span>,      mspId: <span class="token string">'Org1MSP'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span>,  cause: Error: <span class="token number">10</span> ABORTED: failed to endorse transaction, see attached details <span class="token keyword">for</span> <span class="token function">more</span> info      at <span class="token punctuation">..</span>. <span class="token punctuation">&#123;</span>    code: <span class="token number">10</span>,    details: <span class="token string">'failed to endorse transaction, see attached details for more info'</span>,    metadata: Metadata <span class="token punctuation">&#123;</span> internalRepr: <span class="token punctuation">[</span>Map<span class="token punctuation">]</span>, options: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>,  transactionId: <span class="token string">'a92980d41eef1d6492d63acd5fbb6ef1db0f53252330ad28e548fedfdb9167fe'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EndorseError类型表示在背书过程中发生了故障，而gRPC状态代码ABORTED表示应用程序成功调用了Fabric 网关，但在背书过程中发生了故障。如果gRPC状态代码为不可用或DEADY_EXCERED，则表示无法访问Fabric Gateway或未收到及时响应，因此可能需要重试操作。</p><h2 id="3-结束"><a href="#3-结束" class="headerlink" title="3.结束"></a>3.结束</h2><p>使用完资产转移示例后，可以使用network.sh脚本关闭测试网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令将关闭我们所在的区块链网络的证书颁发机构、对等节点和排序节点 创建。请注意，账本上的所有数据都将丢失。如果您想再次学习本教程，您将 从干净的初始状态开始。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方文档教程案例分析01-将智能合约部署到管道</title>
      <link href="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/"/>
      <url>/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程01-将智能合约部署到通道"><a href="#官方文档教程01-将智能合约部署到通道" class="headerlink" title="官方文档教程01-将智能合约部署到通道"></a>官方文档教程01-将智能合约部署到通道</h1><p>最终用户通过调用智能合约与区块链分类账进行交互。在Hyperledger Fabric中，<strong>智能合约（smart contract）</strong>部署在称为<strong>链码（chaincode）</strong>的包中。想要验证交易和查询账本的组织需要在其对等<strong>节点（peers）</strong>上安装链码。在加入<strong>通道（channel）</strong>的节点上安装链码后，通道成员可以将链码部署到通道，并使用链码中的智能合约在通道账本上创建和更新资产。</p><p>链码使用称为<strong>Fabric链码生命周期的过程</strong>部署到通道。Fabric链码生命周期允许多个组织就链码在用于创建交易之前如何交易之前如何操作达成一致（代表各个节点都需要认可这个智能合约才能进行交易）。例如，虽然<strong>背书策略（endorsement policy.）</strong>指定哪些组织需要执行链码来验证交易，但通道成员需要使用Fabric链码生命周期来就链码背书策略达成一致。</p><p>接下来是教程环节，您可以使用本教程了解如何使用<strong>peer lifecycle chaincode commands</strong>命令将链码部署到 Fabric 测试网络的通道。</p><h2 id="1-启动网络"><a href="#1-启动网络" class="headerlink" title="1.启动网络"></a>1.启动网络</h2><p>我们将首先部署 Fabric 测试网络的实例。在开始之前，请确保已按照<a href="https://hyperledger-fabric.readthedocs.io/en/latest/getting_started.html">getting_started</a>上的说明安装了必要的软件。使用以下命令导航到存储库的本地克隆中的测试网络目录（fabric-samples）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>老样子，先关闭一次网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，可以使用以下命令启动测试网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh up createChannel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>createChannel命令将会创建一个名为两个channel成员（Org1 和 Org2）的channel（mychannell）。该命令还会将属于每个组织的peer加入channel。如果网络和channel创建成功，您可以在日志中看到打印的以下消息：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204140532209.png"></p><p>现在，我们可以使用 Peer CLI 通过以下步骤将资产转移（basic）链码部署到通道：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#package-the-smart-contract">第一步：打包智能合约</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#install-the-chaincode-package">第二步：安装链码包</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#approve-a-chaincode-definition">第三步：批准链码定义</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#committing-the-chaincode-definition-to-the-channel">第四步：将链码定义提交到通道</a></li></ul><h2 id="2-打包智能合约"><a href="#2-打包智能合约" class="headerlink" title="2.打包智能合约"></a>2.打包智能合约</h2><p>我们需要先打包链码，然后才能将其安装在我们的peer节点上。如果你想安装一个用<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#go">Go</a>，<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#javascript">JavaScript</a>或<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#typescript">Typescript</a>编写的智能合约，步骤是不同的。</p><h3 id="2-1go"><a href="#2-1go" class="headerlink" title="2.1go"></a>2.1go</h3><p>在打包链码之前，我们需要安装链码依赖项。导航到包含资产转移（basic）链码的 Go 版本的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/asset-transfer-basic/chaincode-go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此示例使用 Go 模块（go.mod）来安装链码依赖项。依赖项列在目录（asset-transfer-basic/chaincode-go）中的文件中。您应该花点时间检查此文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> go.modmodule github.com/hyperledger/fabric-samples/asset-transfer-basic/chaincode-gogo <span class="token number">1.14</span>require <span class="token punctuation">(</span>        github.com/golang/protobuf v1.3.2        github.com/hyperledger/fabric-chaincode-go v0.0.0-20200424173110-d7076418f212        github.com/hyperledger/fabric-contract-api-go v1.1.0        github.com/hyperledger/fabric-protos-go v0.0.0-20200424173316-dd554ba3746e        github.com/stretchr/testify v1.5.1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件（go.mod）将结构合约 API 导入到智能合约包中。您可以使用文本编辑器vi或vim打开（asset-transfer-basic/chaincode-go/chaincode/smartcontract.go），以查看合约API如何使用智能合约（SmartContract）在智能合约开头定义类型： </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SmartContract provides functions for managing an Asset</span><span class="token comment">// 智能合约将提供管理资产的功能</span><span class="token keyword">type</span> SmartContract <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    contractapi<span class="token punctuation">.</span>Contract<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，该类型用于为智能合约（SmartContract）中定义的函数创建交易上下文，这些函数将数据读取和写入区块链分类账。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// CreateAsset issues a new asset to the world state with given details.</span><span class="token comment">// 该方法为创建资产</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SmartContract<span class="token punctuation">)</span> <span class="token function">CreateAsset</span><span class="token punctuation">(</span>ctx contractapi<span class="token punctuation">.</span>TransactionContextInterface<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">,</span> color <span class="token builtin">string</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">,</span> owner <span class="token builtin">string</span><span class="token punctuation">,</span> appraisedValue <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    exists<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">AssetExists</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> exists <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the asset %s already exists"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    asset <span class="token operator">:=</span> Asset<span class="token punctuation">&#123;</span>        ID<span class="token punctuation">:</span>             id<span class="token punctuation">,</span>        Color<span class="token punctuation">:</span>          color<span class="token punctuation">,</span>        Size<span class="token punctuation">:</span>           size<span class="token punctuation">,</span>        Owner<span class="token punctuation">:</span>          owner<span class="token punctuation">,</span>        AppraisedValue<span class="token punctuation">:</span> appraisedValue<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    assetJSON<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>asset<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">GetStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PutState</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> assetJSON<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过访问 API 文档和<a href="https://hyperledger-fabric.readthedocs.io/en/latest/developapps/smartcontract.html">智能合约处理主题</a>来了解有关 Go 合约<a href="https://github.com/hyperledger/fabric-contract-api-go">API</a>的更多信息。</p><p>要安装智能合约依赖项，请从目录（asset-transfer-basic/chaincode-go）运行以下命令。</p><p>首先进入该目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on go mod vendor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，go 包将安装在（vendor）文件夹中。</p><p>运行命令查看是否存在vendor文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204141937534.png"></p><p>现在我们有了依赖项，我们可以创建链码包了。导航回文件夹中的工作目录（test-network），以便我们可以将链码与其他网络工件打包在一起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用peer CLI创建所需格式的链码包。peer二进制文件位于fabric-samples存储库的bin文件夹中。使用以下命令将这些二进制文件添加到CLI路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还需要设置FACTORY_CFG_PATH以指向fabric-samples存储库中的core.yaml文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确认您能够使用peerCLI，请检查二进制文件的版本。二进制文件必须是2.0.0或更高版本才能运行本教程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204142137684.png"></p><p>您现在可以使用 <strong>peer lifecycle chaincode package</strong>命令创建<a href="https://hyperledger-fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-chaincode-package">链码包</a>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode package basic.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-go/ <span class="token parameter variable">--lang</span> golang <span class="token parameter variable">--label</span> basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>创建一个命名为basic.tar.gz的包</li><li>–lang用于指定链码语言</li><li>–path提供智能合约代码的位置。该路径必须是绝对路径或相对于当前工作目录的路径。</li><li> –label用于指定一个链码的标签，该标签将在安装后识别您的链码。建议您的标签包含链码名称和版本</li></ul><p>使用ls命令查看是否创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到如下包即创建成功！</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204142220118.png"></p><p>现在我们创建了链码包，我们可以在测试网络的peer节点上<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#install-the-chaincode-package">安装链码</a>。</p><h3 id="2-2JavaScript"><a href="#2-2JavaScript" class="headerlink" title="2.2JavaScript"></a>2.2JavaScript</h3><p>在打包链码之前，我们需要安装链码依赖项。导航到包含资产转移（basic）链码的 JavaScript 版本的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/asset-transfer-basic/chaincode-javascript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依赖项列在asset-transfer-basic/chaincode-javascript目录中的package.json文件中。您应该花点时间检查此文件。您可以找到下面显示的依赖项部分：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"fabric-contract-api"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"fabric-shim"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>package.json文件将结构合约类导入智能合约包。您可以在文本编辑器中打开lib/assetTransfer.js文件，查看导入到智能合约中并用于创建资产转移（basir）类的合约类。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Contract <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fabric-contract-api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AssetTransfer</span> <span class="token keyword">extends</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AssetTransfer类为智能合约中定义的函数提供交易上下文，这些函数将数据读取和写入区块链账本。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">CreateAsset</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> id<span class="token punctuation">,</span> color<span class="token punctuation">,</span> size<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> appraisedValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> asset <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token constant">ID</span><span class="token operator">:</span> id<span class="token punctuation">,</span>            <span class="token literal-property property">Color</span><span class="token operator">:</span> color<span class="token punctuation">,</span>            <span class="token literal-property property">Size</span><span class="token operator">:</span> size<span class="token punctuation">,</span>            <span class="token literal-property property">Owner</span><span class="token operator">:</span> owner<span class="token punctuation">,</span>            <span class="token literal-property property">AppraisedValue</span><span class="token operator">:</span> appraisedValue<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">putState</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>asset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过访问 API 文档和<a href="https://hyperledger-fabric.readthedocs.io/en/latest/developapps/smartcontract.html">智能合约处理主题</a>来了解有关 JavaScript 合约<a href="https://hyperledger.github.io/fabric-chaincode-node/main/api/">API</a>的更多信息。</p><p>要安装智能合约依赖项，请从asset-transfer-basic/chaincode-javascript目录运行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，JavaScript 包将安装在node_modules文件夹中。</p><p>现在我们有了依赖项，我们可以创建链码包了。导航回test-network文件夹中的工作目录，以便我们可以将链码与其他网络工件打包在一起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用对等CLI创建所需格式的链码包。对等二进制文件位于fabric-samples存储库的bin文件夹中。使用以下命令将这些二进制文件添加到CLI路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还需要设置FACTORY_CFG_PATH以指向fabric-samples存储库中的core.yaml文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确认您能够使用对等CLI，请检查二进制文件的版本。二进制文件必须是2.0.0或更高版本才能运行本教程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，您可以使用<strong>peer lifecycle chaincode</strong>包命令创建链码包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode package basic.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-javascript/ <span class="token parameter variable">--lang</span> <span class="token function">node</span> <span class="token parameter variable">--label</span> basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>创建一个命名为basic.tar.gz的包</li><li>–lang用于指定链码语言</li><li>–path提供智能合约代码的位置。该路径必须是绝对路径或相对于当前工作目录的路径。</li><li>–label用于指定一个链码的标签，该标签将在安装后识别您的链码。建议您的标签包含链码名称和版本</li></ul><p>现在我们已经创建了链码包，我们可以在测试网络的peer上安装链码了。</p><h3 id="2-3TypeScript"><a href="#2-3TypeScript" class="headerlink" title="2.3TypeScript"></a>2.3TypeScript</h3><p>在打包链码之前，我们需要安装链码依赖项。导航到包含资产转移（basic）链码的 TypeScript 版本的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/asset-transfer-basic/chaincode-typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依赖项列在asset-transfer-basic/chaincode-typescript目录中的package.json文件中。您应该花点时间检查此文件。您可以找到下面显示的依赖项部分：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"fabric-contract-api"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"fabric-shim"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>package.json文件将Fabric合约类导入到智能契约包中。您可以在文本编辑器中打开src/assetTransfer.ts，以查看导入智能合约并用于创建资产转移（basic）类的合约类。还要注意，Asset类是从类型定义文件asset.ts导入的。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Context<span class="token punctuation">,</span> Contract <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'fabric-contract-api'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Asset <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./asset'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AssetTransfer</span> <span class="token keyword">extends</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AssetTransfer类为智能合约中定义的函数提供交易上下文，这些函数将数据读取和写入区块链账本。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// CreateAsset issues a new asset to the world state with given details.</span><span class="token comment">// 初始化资产</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">CreateAsset</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> Context<span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> appraisedValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> asset <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token constant">ID</span><span class="token operator">:</span> id<span class="token punctuation">,</span>            Color<span class="token operator">:</span> color<span class="token punctuation">,</span>            Size<span class="token operator">:</span> size<span class="token punctuation">,</span>            Owner<span class="token operator">:</span> owner<span class="token punctuation">,</span>            AppraisedValue<span class="token operator">:</span> appraisedValue<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">putState</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>asset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过访问 API 文档和<a href="https://hyperledger-fabric.readthedocs.io/en/latest/developapps/smartcontract.html">智能合约处理主题</a>来了解有关 JavaScript 合约<a href="https://hyperledger.github.io/fabric-chaincode-node/main/api/">API</a>的更多信息。</p><p>要安装智能合约依赖项，请从asset-transfer-basic/chaincode-typescript目录运行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，JavaScript 包将安装在node_modules文件夹中。</p><p>现在我们有了依赖项，我们可以创建链码包了。导航回test-network文件夹中的工作目录，以便我们可以将链码与其他网络工件打包在一起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用对等CLI创建所需格式的链码包。对等二进制文件位于fabric-samples存储库的bin文件夹中。使用以下命令将这些二进制文件添加到CLI路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还需要设置FACTORY_CFG_PATH以指向fabric-samples存储库中的core.yaml文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确认您能够使用对等CLI，请检查二进制文件的版本。二进制文件必须是2.0.0或更高版本才能运行本教程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，您可以使用<strong>peer lifecycle chaincode</strong>包命令创建链码包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode package basic.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-typescript/ <span class="token parameter variable">--lang</span> <span class="token function">node</span> <span class="token parameter variable">--label</span> basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>创建一个命名为basic.tar.gz的包</li><li>–lang用于指定链码语言</li><li>–path提供智能合约代码的位置。该路径必须是绝对路径或相对于当前工作目录的路径。</li><li>–label用于指定一个链码的标签，该标签将在安装后识别您的链码。建议您的标签包含链码名称和版本</li></ul><p>现在我们已经创建了链码包，我们可以在测试网络的peer上安装链码了。</p><h2 id="3-安装链码包"><a href="#3-安装链码包" class="headerlink" title="3.安装链码包"></a>3.安装链码包</h2><p>在我们打包资产转移（基本）智能合约后，我们可以在节点上安装链码。链码需要安装在每个背书交易的节点上。即你需要跟谁交易，便把链码安装到谁哪里去。由于我们将设置背书策略以要求来自Org1和Org2的背书，因此我们需要在两个组织运营的对等节点上安装链码：</p><ul><li>peer0.org1.example.com</li><li>peer0.org2.example.com</li></ul><p>让我们先在 Org1 peer上安装链码。设置以下环境变量以 Org1 管理员用户身份操作peer CLI。（CORE_PEER_ADDRESS）将设置为指向 Org1 peer（peer0.org1.example.com）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//安全协议<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true//peer0.org1Id<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span>//peer0.org1ca证书文件路径<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> //peer0.org1msp配置路径<span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp//peer0.org1服务器地址<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>peer 节点<strong>peer lifecycle chaincode install</strong>命令，在peer节点上安装链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode <span class="token function">install</span> basic.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，对等方将生成并返回包标识符。此包 ID 将用于在下一步中批准链码。应会看到类似于以下内容的输出：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204170443994.png"></p><p>我们现在可以在 Org2 peer上安装链码。将以下环境变量设置为以 Org2 管理员身份运行，并以 Org2 peer为目标。<code>peer0.org2.example.com</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//peer0.org2Id<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span>//peer0.org2ca证书文件路径<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt//peer0.org2msp配置路径<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp//peer0.org2服务器地址<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发出以下命令以安装链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode <span class="token function">install</span> basic.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>链码由节点在安装链码时构建。如果智能合约代码有问题，install 命令将从链码返回任何构建错误。</p><h2 id="4-批准链码定义"><a href="#4-批准链码定义" class="headerlink" title="4.批准链码定义"></a>4.批准链码定义</h2><p>安装链码包后，您需要为您的组织批准链码定义。该定义包括链码治理的重要参数，例如名称、版本和链码背书策略。                                            </p><p>在部署链码之前需要由（/Channel/Application/LifecycleEndorsement）策略约束channel所有成员进行批准认可，默认情况下，此策略要求大多数channel成员需要批准链码才能在channel上使用。因为我们在channel上只有两个组织，我们需要批准资产转移（basic）的链码定义为 Org1 和 Org2。</p><p>如果组织在其peer节点上安装了链码，则需要将 packageID 包含在其组织批准的链码定义中。包 ID 用于将节点上安装的链码与批准的链码定义相关联，并允许组织使用链码背书交易。您可以使用 <strong>peer lifecycle chaincode queryinstalled</strong>命令来查询您的peer节点，从而查找链码的包 ID。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode queryinstalled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>包 ID 是链码标签和链码二进制文件的哈希的组合。每个peer将生成相同的包 ID。应会看到类似于以下内容的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installed chaincodes on peer:Package ID: basic_1.0:56069c8c46fe01a7837a218a6e2ab49a2b6c4a715c95ab2ab321a863b642d021, Label: basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们批准链码时，我们将使用包 ID，所以让我们继续将其保存为环境变量。peer lifecycle chaincode queryinstalled命令将返回的包 ID 粘贴到下面的命令中。<strong>注意：</strong>所有用户的包 ID 不会相同，因此需要使用上一步中从命令窗口返回的包 ID 完成此步骤。</p><pre class="line-numbers language-none"><code class="language-none">export CC_PACKAGE_ID&#x3D;basic_1.0:56069c8c46fe01a7837a218a6e2ab49a2b6c4a715c95ab2ab321a863b642d021<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于环境变量已设置为以 Org2 管理员身份操作 peer CLI，因此我们可以批准将资产转移（basic）的链码定义批准为 Org2。链码在组织级别获得批准，因此该命令只需要针对一个对等节点。批准使用八卦分发给组织内的其他同行。使用<strong>peer lifecycle chaincode approveformyorg</strong>命令来批准链码定义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> --package-id <span class="token variable">$CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li><p>使用–package-id 标志将包标识符包含在链码定义中。</p></li><li><p>–sequence参数是一个整数，用于跟踪链码被定义或更新的次数。由于链码是首次部署到channel，因此序列号为 1。当资产转移（basic）链码升级时，序列号将递增到 2。</p></li><li><p>如果您使用的是结构链码垫片 API 提供的低级 API，您可以将 -init-required标志传递给上面的命令，以请求执行 Init 函数来初始化链码。链码的第一次调用需要针对 Init 函数并包含–isInit标志 ，然后才能使用链码中的其他函数与账本交互。</p></li></ul><p>我们可以向approveformyorg命令中添加–signature-policy或–channel-config-policy参数来指定链码背书策略。背书策略指定了属于不同channel成员的节点需要多少个节点来验证给定链码的交易。由于我们没有设置策略，因此资产转移（basic）的定义将使用默认背书策略，该策略要求交易在提交交易时由在场的大多数渠道成员背书。这意味着，如果在频道中添加或删除新组织，则背书策略 会自动更新以要求更多或更少的背书。在本教程中，默认策略需要 2 个中的 2 个多数，并且事务需要由 Org1 和 Org2 的peer认可。如果要指定自定义背书策略，可以使用<a href="https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html">背书</a>策略操作指南了解策略语法。</p><p>您需要批准具有管理员角色的身份的链码定义。因此，CORE_PEER_MSPCONFIGPATH变量需要指向包含管理员标识的 MSP 文件夹。您不能批准客户端用户的链码定义。审批需要提交到ordering，该服务将验证管理员签名，然后将审批分发给peer。</p><p>我们仍然需要批准链码定义为 Org1。设置以下环境变量以 Org1 管理员身份运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您现在可以为 Org1批准链码定义。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> --package-id <span class="token variable">$CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在拥有将资产转移（basic）链码部署到channel所需的大部分。虽然只有大多数组织需要批准链码定义（使用默认策略），但所有组织都需要批准链码定义才能在其peer节点上启动链码。如果您在channel成员批准链码之前提交定义，组织将无法背书交易。因此，建议所有channel成员在提交链码定义之前批准链码。</p><h2 id="5-将链码定义提交到通道"><a href="#5-将链码定义提交到通道" class="headerlink" title="5.将链码定义提交到通道"></a>5.将链码定义提交到通道</h2><p>在足够数量的组织批准链码定义后，一个组织可以将链码定义提交到channel。如果大多数channel成员批准了该定义，则提交交易将成功，链码定义中约定的参数将在channel上实现。</p><p>您可以使用 **peer lifecycle chaincode checkcommitreadiness **命令来检查channel成员是否批准了相同的链码定义。用于checkcommitreadiness的标志命令与用于批准组织链码的标志相同。然而·，您不需要包含–package-id标志。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode checkcommitreadiness <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--output</span> json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果channel成员批准了check commit ready命令中指定的参数，则该命令将生成一个JSON映射:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"approvals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Org1MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Org2MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于作为channel成员的两个组织都批准了相同的参数，因此链码定义已准备好提交到channel。您可以使用 **peer lifecycle chaincode commit **命令将链码定义提交到channel。提交命令还需要由组织管理员提交。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode commit <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的事务使用**–peerAddresses**标志从Org1（peer0.org1.example.com） 和 Org2（peer0.org2.example.com） 定位。提交事务被提交给连接到channel的peer，以查询由操作peer的组织批准的链码定义。该命令需要针对来自足够数量的组织的对等方，以满足部署链码的策略。由于审批在每个组织内分发，因此您可以定位属于channel成员的任何peer。</p><p>channel成员的链码定义背书被提交给ordering，以添加到区块中并分发到channel。然后，channel上的peer验证是否足够数量的组织批准了链码定义。<strong>peer lifecycle chaincode commit</strong>命令将在返回响应之前等待peer的验证。</p><p>您可以使用 <strong>peer lifecycle chaincode querycommitted</strong>命令来确认链码定义已提交到channel。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode querycommitted <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果链码成功提交到channel，querycommitted命令将返回链码定义的序列和版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Committed chaincode definition <span class="token keyword">for</span> chaincode <span class="token string">'basic'</span> on channel <span class="token string">'mychannel'</span><span class="token builtin class-name">:</span>Version: <span class="token number">1.0</span>, Sequence: <span class="token number">1</span>, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: <span class="token punctuation">[</span>Org1MSP: true, Org2MSP: true<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-调用链码"><a href="#6-调用链码" class="headerlink" title="6.调用链码"></a>6.调用链码</h2><p>链码定义提交到channel后，链码将在加入安装链码的channel的peer节点上启动。资产转移（baric）链码现在已准备好由客户端应用程序调用。使用以下命令在账本上创建一组初始资产。请注意，调用命令需要针对足够数量的peer节点以满足链码背书策略。（请注意，CLI 不访问结构网关peer，因此必须指定每个认可peer。）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span> <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"InitLedger","Args":[]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，您应该会看到类似于以下内容的响应：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-12-04 <span class="token number">18</span>:55:29.413 CST 0001 INFO <span class="token punctuation">[</span>chaincodeCmd<span class="token punctuation">]</span> chaincodeInvokeOrQuery -<span class="token operator">></span> Chaincode invoke successful. result: status:200 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以使用query函数来读取由链码创建的汽车集：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["GetAllAssets"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对查询的响应应为以下资产列表：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Tomoko"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Brad"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Jin Soo"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Max"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">600</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Adriana"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">700</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Michel"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-升级智能合约"><a href="#7-升级智能合约" class="headerlink" title="7.升级智能合约"></a>7.升级智能合约</h2><p>您可以使用相同的 Fabric 链码生命周期流程来升级已部署到channel的链码。channel成员可以通过安装新的链码包，然后批准具有新包 ID、新链码版本和序列号递增 1 的链码定义来升级链码。新的链码可以在链码定义提交到channel后使用。此过程允许channel成员协调链码何时升级，并确保在将新链码部署到channel之前，有足够数量的channel成员准备好使用新链码。</p><p>channel成员还可以使用升级过程来更改链码背书策略。通过批准具有新背书策略的链码定义并将链码定义提交到channel，channel成员可以更改管理链码的背书策略，而无需安装新的链码包。</p><p>为了提供升级我们刚刚部署的资产转移（basic）链码的场景，假设 Org1 和 Org2 想要安装用另一种语言编写的链码版本。他们将使用 Fabric 链码生命周期来更新链码版本，并确保两个组织在channel上激活之前都安装了新链码。</p><p>我们假设 Org1 和 Org2 最初安装了资产转移（basic）链码的 GO 版本，但使用用 JavaScript 编写的链码会更舒服。第一步是打包资产转移（basic）链码的 JavaScript 版本。如果您在学习本教程时使用 JavaScript 指令打包链码，则可以按照打包用<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#go">Go</a>或<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#typescript">TypeScript</a> 编写的链码的步骤安装新的链码二进制文件。</p><p>从目录（test-network）中发出以下命令以安装链码依赖项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-javascript<span class="token function">npm</span> <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，您可以发出以下命令来打包（test-network）目录中的 JavaScript 链码。我们将设置在您关闭终端的情况下再次使用peer CLI 所需的环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msppeer lifecycle chaincode package basic_2.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-javascript/ <span class="token parameter variable">--lang</span> <span class="token function">node</span> <span class="token parameter variable">--label</span> basic_2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行以下命令以 Org1 管理员身份操作peer CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在可以使用以下命令在 Org1 peer上安装新的链码包。</p><pre class="line-numbers language-none"><code class="language-none">peer lifecycle chaincode install basic_2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新的链码包将创建一个新的包 ID。我们可以通过查询我们的peer来找到新的包 ID。</p><pre class="line-numbers language-none"><code class="language-none">peer lifecycle chaincode queryinstalled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>queryinstalled命令将返回已安装在peer节点上的链码列表，类似于此输出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installed chaincodes on peer:Package ID: basic_1.0:56069c8c46fe01a7837a218a6e2ab49a2b6c4a715c95ab2ab321a863b642d021, Label: basic_1.0Package ID: basic_2.0:cbb6c1822047f9b1ba24b07458c0f19145fa5da1ba3bcba1fe77fc6d68011a33, Label: basic_2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以使用包标签查找新链码的包 ID，并将其另存为新的环境变量。此输出为 仅举一例 – 您的包裹 ID 会有所不同，因此请勿复制和粘贴！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NEW_CC_PACKAGE_ID</span><span class="token operator">=</span> basic_2.0:cbb6c1822047f9b1ba24b07458c0f19145fa5da1ba3bcba1fe77fc6d68011a33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Org1 现在可以批准新的链码定义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> --package-id <span class="token variable">$NEW_CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新的链码定义使用 JavaScript 链码包的包 ID 并更新链码版本。由于 Fabric 链码生命周期使用序列参数来跟踪链码升级，因此 Org1 还需要将序列号从 1 递增到 2。您可以使用 <strong>peer lifecycle chaincode querycommitted</strong>命令来查找上次提交到channel的链码序列。</p><p>我们现在需要安装链码包并将链码定义批准为 Org2，以便升级链码。运行以下命令以 Org2 管理员身份操作 peer CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在可以使用以下命令在 Org2 peer上安装新的链码包。</p><pre class="line-numbers language-none"><code class="language-none">peer lifecycle chaincode install basic_2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您现在可以批准 Org2 的新链码定义。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> --package-id <span class="token variable">$NEW_CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用peer lifecycle chaincode checkcommitreadiness命令检查序列 2 的链码定义是否已准备好提交到channel：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode checkcommitreadiness <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--output</span> json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令返回以下 JSON，则链码已准备好升级：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"Approvals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Org1MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Org2MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交新的链码定义后，链码将在channel上升级。在此之前，之前的链码将继续在两个组织的peer节点上运行。Org2 可以使用以下命令升级链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode commit <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功的提交交易将立即启动新的链码。如果链码定义改变了背书策略，新策略将生效。</p><p>您可以使用docker ps命令来验证新链码是否已在您的peer节点上启动：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-an-li-fen-xi-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204191053032.png"></p><p>如果您使用了 –init-required标志，则需要调用 Init 函数，然后才能使用升级后的链码。因为我们没有请求执行 Init，所以我们可以通过创建一个新车来测试我们新的 JavaScript 链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span> <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":["asset8","blue","16","Kelley","750"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以再次查询账本上的所有汽车以查看新车：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["GetAllAssets"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该看到来自 JavaScript 链码的以下结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Tomoko"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Brad"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Jin Soo"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Max"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">600</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Adriana"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">700</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Michel"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset8"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset8"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Kelley"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">750</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-关闭网络"><a href="#8-关闭网络" class="headerlink" title="8.关闭网络"></a>8.关闭网络</h2><p>使用完链码后，您还可以使用以下命令删除 Logspout 工具。</p><pre class="line-numbers language-none"><code class="language-none">docker stop logspoutdocker rm logspout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，您可以通过从（test-network）目录中发出以下命令来关闭测试网络：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-可能存在的错误"><a href="#9-可能存在的错误" class="headerlink" title="9.可能存在的错误"></a>9.可能存在的错误</h2><h3 id="9-1此组织未同意链码"><a href="#9-1此组织未同意链码" class="headerlink" title="9.1此组织未同意链码"></a>9.1此组织未同意链码</h3><p><strong>问题：</strong>当我尝试将新的链码定义提交到channel时，peer lifecycle chaincode commit命令失败并显示以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: failed to create signed transaction: proposal response was not successful, error code <span class="token number">500</span>, msg failed to invoke backing implementation of <span class="token string">'CommitChaincodeDefinition'</span><span class="token builtin class-name">:</span> chaincode definition not agreed to by this org <span class="token punctuation">(</span>Org1MSP<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方案：您可以尝试通过使用<strong>peer lifecycle chaincode checkcommitreadiness</strong>命令来检查哪些channel成员批准了您尝试提交的链码定义，从而尝试解决此错误。如果任何组织对链码定义的任何参数使用不同的值，则提交事务将失败。<strong>peer lifecycle chaincode checkcommitreadiness</strong>命令可以帮你得知哪些组织没有批准您尝试提交的链码定义：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"approvals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Org1MSP"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"Org2MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2调用失败"><a href="#9-2调用失败" class="headerlink" title="9.2调用失败"></a>9.2调用失败</h3><p><strong>问题</strong>：<strong>peer lifecycle chaincode commit</strong>提交事务成功，但是当我第一次尝试调用链码时，它失败并显示以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: endorsement failure during invoke. response: status:500 message:<span class="token string">"make sure the chaincode asset-transfer (basic) has been successfully defined on channel mychannel and try again: chaincode definition for 'asset-transfer (basic)' exists, but chaincode is not installed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong>：您可能没有在你批准链码定义时设置正确的–package-id因此，提交到channel的链码定义与您安装的链码包无关，并且链码未在您的peer节点上启动。如果您运行的是基于 docker 的网络，您可以使用docker ps命令检查您的链码是否正在运行：</p><pre class="line-numbers language-none"><code class="language-none">docker psCONTAINER ID        IMAGE                               COMMAND             CREATED             STATUS              PORTS                              NAMES7fe1ae0a69fa        hyperledger&#x2F;fabric-orderer:latest   &quot;orderer&quot;           5 minutes ago       Up 4 minutes        0.0.0.0:7050-&gt;7050&#x2F;tcp             orderer.example.com2b9c684bd07e        hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   5 minutes ago       Up 4 minutes        0.0.0.0:7051-&gt;7051&#x2F;tcp             peer0.org1.example.com39a3e41b2573        hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   5 minutes ago       Up 4 minutes        7051&#x2F;tcp, 0.0.0.0:9051-&gt;9051&#x2F;tcp   peer0.org2.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您没有看到任何链码容器列出，请使用<strong>peer lifecycle chaincode approveformyorg</strong>命令批准具有正确包 ID 的链码定义。</p><h3 id="9-3背书策略失败"><a href="#9-3背书策略失败" class="headerlink" title="9.3背书策略失败"></a>9.3背书策略失败</h3><p><strong>问题：</strong>当我尝试将链码定义提交到channel时，交易失败并显示以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-04-07 <span class="token number">20</span>:08:23.306 EDT <span class="token punctuation">[</span>chaincodeCmd<span class="token punctuation">]</span> ClientWait -<span class="token operator">></span> INFO 001 txid <span class="token punctuation">[</span>5f569e50ae58efa6261c4ad93180d49ac85ec29a07b58f576405b826a8213aeb<span class="token punctuation">]</span> committed with status <span class="token punctuation">(</span>ENDORSEMENT_POLICY_FAILURE<span class="token punctuation">)</span> at localhost:7051Error: transaction invalidated with status <span class="token punctuation">(</span>ENDORSEMENT_POLICY_FAILURE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：此错误是由于提交事务未收集足够的背书来满足生命周期背书策略。此问题可能是由于您的事务未针对足够数量的peer来满足策略。这也可能是一些peer组织不包括认可的Endorsement:默认的/Channel/Application/背书策略在configtx.yaml文件中引用的签名策略:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Readers<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"</span>Writers<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.admin', 'Org2MSP.client')"</span>Admins<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.admin')"</span>Endorsement<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.peer')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用 <strong>enable the Fabric chaincode lifecycle</strong>时，除了将channel升级到功能之外，您还需要使用新的 Fabric 2.0 channel策略。您的频道需要包含新的（/Channel/Application/LifecycleEndorsement）和（/Channel/Application/Endorsement）策略。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Policies:        Readers:                Type: ImplicitMeta                Rule: <span class="token string">"ANY Readers"</span>        Writers:                Type: ImplicitMeta                Rule: <span class="token string">"ANY Writers"</span>        Admins:                Type: ImplicitMeta                Rule: <span class="token string">"MAJORITY Admins"</span>        LifecycleEndorsement:                Type: ImplicitMeta                Rule: <span class="token string">"MAJORITY Endorsement"</span>        Endorsement:                Type: ImplicitMeta                Rule: <span class="token string">"MAJORITY Endorsement"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您未在channel配置中包含新的channel策略，则在批准组织的链码定义时将收到以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: proposal failed with status: <span class="token number">500</span> - failed to invoke backing implementation of <span class="token string">'ApproveChaincodeDefinitionForMyOrg'</span><span class="token builtin class-name">:</span> could not <span class="token builtin class-name">set</span> defaults <span class="token keyword">for</span> chaincode definition <span class="token keyword">in</span> channel mychannel: policy <span class="token string">'/Channel/Application/Endorsement'</span> must be defined <span class="token keyword">for</span> channel <span class="token string">'mychannel'</span> before chaincode operations can be attempted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>官方文档教程01-将智能合约部署到管道</title>
      <link href="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/"/>
      <url>/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档教程01-将智能合约部署到通道"><a href="#官方文档教程01-将智能合约部署到通道" class="headerlink" title="官方文档教程01-将智能合约部署到通道"></a>官方文档教程01-将智能合约部署到通道</h1><p>最终用户通过调用智能合约与区块链分类账进行交互。在Hyperledger Fabric中，<strong>智能合约（smart contract）</strong>部署在称为<strong>链码（chaincode）</strong>的包中。想要验证交易和查询账本的组织需要在其对等<strong>节点（peers）</strong>上安装链码。在加入<strong>通道（channel）</strong>的节点上安装链码后，通道成员可以将链码部署到通道，并使用链码中的智能合约在通道账本上创建和更新资产。</p><p>链码使用称为<strong>Fabric链码生命周期的过程</strong>部署到通道。Fabric链码生命周期允许多个组织就链码在用于创建交易之前如何交易之前如何操作达成一致（代表各个节点都需要认可这个智能合约才能进行交易）。例如，虽然<strong>背书策略（endorsement policy.）</strong>指定哪些组织需要执行链码来验证交易，但通道成员需要使用Fabric链码生命周期来就链码背书策略达成一致。</p><p>接下来是教程环节，您可以使用本教程了解如何使用<strong>peer lifecycle chaincode commands</strong>命令将链码部署到 Fabric 测试网络的通道。</p><h2 id="1-启动网络"><a href="#1-启动网络" class="headerlink" title="1.启动网络"></a>1.启动网络</h2><p>我们将首先部署 Fabric 测试网络的实例。在开始之前，请确保已按照<a href="https://hyperledger-fabric.readthedocs.io/en/latest/getting_started.html">getting_started</a>上的说明安装了必要的软件。使用以下命令导航到存储库的本地克隆中的测试网络目录（fabric-samples）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>老样子，先关闭一次网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，可以使用以下命令启动测试网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh up createChannel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>createChannel命令将会创建一个名为两个channel成员（Org1 和 Org2）的channel（mychannell）。该命令还会将属于每个组织的peer加入channel。如果网络和channel创建成功，您可以在日志中看到打印的以下消息：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204140532209.png"></p><p>现在，我们可以使用 Peer CLI 通过以下步骤将资产转移（basic）链码部署到通道：</p><ul><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#package-the-smart-contract">第一步：打包智能合约</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#install-the-chaincode-package">第二步：安装链码包</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#approve-a-chaincode-definition">第三步：批准链码定义</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#committing-the-chaincode-definition-to-the-channel">第四步：将链码定义提交到通道</a></li></ul><h2 id="2-打包智能合约"><a href="#2-打包智能合约" class="headerlink" title="2.打包智能合约"></a>2.打包智能合约</h2><p>我们需要先打包链码，然后才能将其安装在我们的peer节点上。如果你想安装一个用<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#go">Go</a>，<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#javascript">JavaScript</a>或<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#typescript">Typescript</a>编写的智能合约，步骤是不同的。</p><h3 id="2-1go"><a href="#2-1go" class="headerlink" title="2.1go"></a>2.1go</h3><p>在打包链码之前，我们需要安装链码依赖项。导航到包含资产转移（basic）链码的 Go 版本的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/asset-transfer-basic/chaincode-go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此示例使用 Go 模块（go.mod）来安装链码依赖项。依赖项列在目录（asset-transfer-basic/chaincode-go）中的文件中。您应该花点时间检查此文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> go.modmodule github.com/hyperledger/fabric-samples/asset-transfer-basic/chaincode-gogo <span class="token number">1.14</span>require <span class="token punctuation">(</span>        github.com/golang/protobuf v1.3.2        github.com/hyperledger/fabric-chaincode-go v0.0.0-20200424173110-d7076418f212        github.com/hyperledger/fabric-contract-api-go v1.1.0        github.com/hyperledger/fabric-protos-go v0.0.0-20200424173316-dd554ba3746e        github.com/stretchr/testify v1.5.1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件（go.mod）将结构合约 API 导入到智能合约包中。您可以使用文本编辑器vi或vim打开（asset-transfer-basic/chaincode-go/chaincode/smartcontract.go），以查看合约API如何使用智能合约（SmartContract）在智能合约开头定义类型： </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// SmartContract provides functions for managing an Asset</span><span class="token comment">// 智能合约将提供管理资产的功能</span><span class="token keyword">type</span> SmartContract <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    contractapi<span class="token punctuation">.</span>Contract<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，该类型用于为智能合约（SmartContract）中定义的函数创建交易上下文，这些函数将数据读取和写入区块链分类账。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// CreateAsset issues a new asset to the world state with given details.</span><span class="token comment">// 该方法为创建资产</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SmartContract<span class="token punctuation">)</span> <span class="token function">CreateAsset</span><span class="token punctuation">(</span>ctx contractapi<span class="token punctuation">.</span>TransactionContextInterface<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">,</span> color <span class="token builtin">string</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">,</span> owner <span class="token builtin">string</span><span class="token punctuation">,</span> appraisedValue <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    exists<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">AssetExists</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> exists <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"the asset %s already exists"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    asset <span class="token operator">:=</span> Asset<span class="token punctuation">&#123;</span>        ID<span class="token punctuation">:</span>             id<span class="token punctuation">,</span>        Color<span class="token punctuation">:</span>          color<span class="token punctuation">,</span>        Size<span class="token punctuation">:</span>           size<span class="token punctuation">,</span>        Owner<span class="token punctuation">:</span>          owner<span class="token punctuation">,</span>        AppraisedValue<span class="token punctuation">:</span> appraisedValue<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    assetJSON<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>asset<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">GetStub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PutState</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> assetJSON<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过访问 API 文档和<a href="https://hyperledger-fabric.readthedocs.io/en/latest/developapps/smartcontract.html">智能合约处理主题</a>来了解有关 Go 合约<a href="https://github.com/hyperledger/fabric-contract-api-go">API</a>的更多信息。</p><p>要安装智能合约依赖项，请从目录（asset-transfer-basic/chaincode-go）运行以下命令。</p><p>首先进入该目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on go mod vendor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，go 包将安装在（vendor）文件夹中。</p><p>运行命令查看是否存在vendor文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204141937534.png"></p><p>现在我们有了依赖项，我们可以创建链码包了。导航回文件夹中的工作目录（test-network），以便我们可以将链码与其他网络工件打包在一起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用peer CLI创建所需格式的链码包。peer二进制文件位于fabric-samples存储库的bin文件夹中。使用以下命令将这些二进制文件添加到CLI路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还需要设置FACTORY_CFG_PATH以指向fabric-samples存储库中的core.yaml文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确认您能够使用peerCLI，请检查二进制文件的版本。二进制文件必须是2.0.0或更高版本才能运行本教程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204142137684.png"></p><p>您现在可以使用 <strong>peer lifecycle chaincode package</strong>命令创建<a href="https://hyperledger-fabric.readthedocs.io/en/latest/commands/peerlifecycle.html#peer-lifecycle-chaincode-package">链码包</a>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode package basic.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-go/ <span class="token parameter variable">--lang</span> golang <span class="token parameter variable">--label</span> basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>创建一个命名为basic.tar.gz的包</li><li>–lang用于指定链码语言</li><li>–path提供智能合约代码的位置。该路径必须是绝对路径或相对于当前工作目录的路径。</li><li> –label用于指定一个链码的标签，该标签将在安装后识别您的链码。建议您的标签包含链码名称和版本</li></ul><p>使用ls命令查看是否创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到如下包即创建成功！</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204142220118.png"></p><p>现在我们创建了链码包，我们可以在测试网络的peer节点上<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#install-the-chaincode-package">安装链码</a>。</p><h3 id="2-2JavaScript"><a href="#2-2JavaScript" class="headerlink" title="2.2JavaScript"></a>2.2JavaScript</h3><p>在打包链码之前，我们需要安装链码依赖项。导航到包含资产转移（basic）链码的 JavaScript 版本的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/asset-transfer-basic/chaincode-javascript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依赖项列在asset-transfer-basic/chaincode-javascript目录中的package.json文件中。您应该花点时间检查此文件。您可以找到下面显示的依赖项部分：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"fabric-contract-api"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"fabric-shim"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>package.json文件将结构合约类导入智能合约包。您可以在文本编辑器中打开lib/assetTransfer.js文件，查看导入到智能合约中并用于创建资产转移（basir）类的合约类。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Contract <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fabric-contract-api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AssetTransfer</span> <span class="token keyword">extends</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AssetTransfer类为智能合约中定义的函数提供交易上下文，这些函数将数据读取和写入区块链账本。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">CreateAsset</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> id<span class="token punctuation">,</span> color<span class="token punctuation">,</span> size<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> appraisedValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> asset <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token constant">ID</span><span class="token operator">:</span> id<span class="token punctuation">,</span>            <span class="token literal-property property">Color</span><span class="token operator">:</span> color<span class="token punctuation">,</span>            <span class="token literal-property property">Size</span><span class="token operator">:</span> size<span class="token punctuation">,</span>            <span class="token literal-property property">Owner</span><span class="token operator">:</span> owner<span class="token punctuation">,</span>            <span class="token literal-property property">AppraisedValue</span><span class="token operator">:</span> appraisedValue<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">putState</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>asset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过访问 API 文档和<a href="https://hyperledger-fabric.readthedocs.io/en/latest/developapps/smartcontract.html">智能合约处理主题</a>来了解有关 JavaScript 合约<a href="https://hyperledger.github.io/fabric-chaincode-node/main/api/">API</a>的更多信息。</p><p>要安装智能合约依赖项，请从asset-transfer-basic/chaincode-javascript目录运行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，JavaScript 包将安装在node_modules文件夹中。</p><p>现在我们有了依赖项，我们可以创建链码包了。导航回test-network文件夹中的工作目录，以便我们可以将链码与其他网络工件打包在一起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用对等CLI创建所需格式的链码包。对等二进制文件位于fabric-samples存储库的bin文件夹中。使用以下命令将这些二进制文件添加到CLI路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还需要设置FACTORY_CFG_PATH以指向fabric-samples存储库中的core.yaml文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确认您能够使用对等CLI，请检查二进制文件的版本。二进制文件必须是2.0.0或更高版本才能运行本教程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，您可以使用<strong>peer lifecycle chaincode</strong>包命令创建链码包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode package basic.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-javascript/ <span class="token parameter variable">--lang</span> <span class="token function">node</span> <span class="token parameter variable">--label</span> basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>创建一个命名为basic.tar.gz的包</li><li>–lang用于指定链码语言</li><li>–path提供智能合约代码的位置。该路径必须是绝对路径或相对于当前工作目录的路径。</li><li>–label用于指定一个链码的标签，该标签将在安装后识别您的链码。建议您的标签包含链码名称和版本</li></ul><p>现在我们已经创建了链码包，我们可以在测试网络的peer上安装链码了。</p><h3 id="2-3TypeScript"><a href="#2-3TypeScript" class="headerlink" title="2.3TypeScript"></a>2.3TypeScript</h3><p>在打包链码之前，我们需要安装链码依赖项。导航到包含资产转移（basic）链码的 TypeScript 版本的文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/asset-transfer-basic/chaincode-typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依赖项列在asset-transfer-basic/chaincode-typescript目录中的package.json文件中。您应该花点时间检查此文件。您可以找到下面显示的依赖项部分：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"fabric-contract-api"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>        <span class="token property">"fabric-shim"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>package.json文件将Fabric合约类导入到智能契约包中。您可以在文本编辑器中打开src/assetTransfer.ts，以查看导入智能合约并用于创建资产转移（basic）类的合约类。还要注意，Asset类是从类型定义文件asset.ts导入的。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Context<span class="token punctuation">,</span> Contract <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'fabric-contract-api'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Asset <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./asset'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AssetTransfer</span> <span class="token keyword">extends</span> <span class="token class-name">Contract</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AssetTransfer类为智能合约中定义的函数提供交易上下文，这些函数将数据读取和写入区块链账本。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// CreateAsset issues a new asset to the world state with given details.</span><span class="token comment">// 初始化资产</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">CreateAsset</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> Context<span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> appraisedValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> asset <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token constant">ID</span><span class="token operator">:</span> id<span class="token punctuation">,</span>            Color<span class="token operator">:</span> color<span class="token punctuation">,</span>            Size<span class="token operator">:</span> size<span class="token punctuation">,</span>            Owner<span class="token operator">:</span> owner<span class="token punctuation">,</span>            AppraisedValue<span class="token operator">:</span> appraisedValue<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">putState</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>asset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过访问 API 文档和<a href="https://hyperledger-fabric.readthedocs.io/en/latest/developapps/smartcontract.html">智能合约处理主题</a>来了解有关 JavaScript 合约<a href="https://hyperledger.github.io/fabric-chaincode-node/main/api/">API</a>的更多信息。</p><p>要安装智能合约依赖项，请从asset-transfer-basic/chaincode-typescript目录运行以下命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，JavaScript 包将安装在node_modules文件夹中。</p><p>现在我们有了依赖项，我们可以创建链码包了。导航回test-network文件夹中的工作目录，以便我们可以将链码与其他网络工件打包在一起。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以使用对等CLI创建所需格式的链码包。对等二进制文件位于fabric-samples存储库的bin文件夹中。使用以下命令将这些二进制文件添加到CLI路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您还需要设置FACTORY_CFG_PATH以指向fabric-samples存储库中的core.yaml文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要确认您能够使用对等CLI，请检查二进制文件的版本。二进制文件必须是2.0.0或更高版本才能运行本教程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，您可以使用<strong>peer lifecycle chaincode</strong>包命令创建链码包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode package basic.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-typescript/ <span class="token parameter variable">--lang</span> <span class="token function">node</span> <span class="token parameter variable">--label</span> basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li>创建一个命名为basic.tar.gz的包</li><li>–lang用于指定链码语言</li><li>–path提供智能合约代码的位置。该路径必须是绝对路径或相对于当前工作目录的路径。</li><li>–label用于指定一个链码的标签，该标签将在安装后识别您的链码。建议您的标签包含链码名称和版本</li></ul><p>现在我们已经创建了链码包，我们可以在测试网络的peer上安装链码了。</p><h2 id="3-安装链码包"><a href="#3-安装链码包" class="headerlink" title="3.安装链码包"></a>3.安装链码包</h2><p>在我们打包资产转移（基本）智能合约后，我们可以在节点上安装链码。链码需要安装在每个背书交易的节点上。即你需要跟谁交易，便把链码安装到谁哪里去。由于我们将设置背书策略以要求来自Org1和Org2的背书，因此我们需要在两个组织运营的对等节点上安装链码：</p><ul><li>peer0.org1.example.com</li><li>peer0.org2.example.com</li></ul><p>让我们先在 Org1 peer上安装链码。设置以下环境变量以 Org1 管理员用户身份操作peer CLI。（CORE_PEER_ADDRESS）将设置为指向 Org1 peer（peer0.org1.example.com）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//安全协议<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true//peer0.org1Id<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span>//peer0.org1ca证书文件路径<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> //peer0.org1msp配置路径<span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp//peer0.org1服务器地址<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>peer 节点<strong>peer lifecycle chaincode install</strong>命令，在peer节点上安装链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode <span class="token function">install</span> basic.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，对等方将生成并返回包标识符。此包 ID 将用于在下一步中批准链码。应会看到类似于以下内容的输出：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204170443994.png"></p><p>我们现在可以在 Org2 peer上安装链码。将以下环境变量设置为以 Org2 管理员身份运行，并以 Org2 peer为目标。<code>peer0.org2.example.com</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//peer0.org2Id<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span>//peer0.org2ca证书文件路径<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt//peer0.org2msp配置路径<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp//peer0.org2服务器地址<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发出以下命令以安装链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode <span class="token function">install</span> basic.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>链码由节点在安装链码时构建。如果智能合约代码有问题，install 命令将从链码返回任何构建错误。</p><h2 id="4-批准链码定义"><a href="#4-批准链码定义" class="headerlink" title="4.批准链码定义"></a>4.批准链码定义</h2><p>安装链码包后，您需要为您的组织批准链码定义。该定义包括链码治理的重要参数，例如名称、版本和链码背书策略。                                            </p><p>在部署链码之前需要由（/Channel/Application/LifecycleEndorsement）策略约束channel所有成员进行批准认可，默认情况下，此策略要求大多数channel成员需要批准链码才能在channel上使用。因为我们在channel上只有两个组织，我们需要批准资产转移（basic）的链码定义为 Org1 和 Org2。</p><p>如果组织在其peer节点上安装了链码，则需要将 packageID 包含在其组织批准的链码定义中。包 ID 用于将节点上安装的链码与批准的链码定义相关联，并允许组织使用链码背书交易。您可以使用 <strong>peer lifecycle chaincode queryinstalled</strong>命令来查询您的peer节点，从而查找链码的包 ID。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode queryinstalled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>包 ID 是链码标签和链码二进制文件的哈希的组合。每个peer将生成相同的包 ID。应会看到类似于以下内容的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installed chaincodes on peer:Package ID: basic_1.0:56069c8c46fe01a7837a218a6e2ab49a2b6c4a715c95ab2ab321a863b642d021, Label: basic_1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们批准链码时，我们将使用包 ID，所以让我们继续将其保存为环境变量。peer lifecycle chaincode queryinstalled命令将返回的包 ID 粘贴到下面的命令中。<strong>注意：</strong>所有用户的包 ID 不会相同，因此需要使用上一步中从命令窗口返回的包 ID 完成此步骤。</p><pre class="line-numbers language-none"><code class="language-none">export CC_PACKAGE_ID&#x3D;basic_1.0:56069c8c46fe01a7837a218a6e2ab49a2b6c4a715c95ab2ab321a863b642d021<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于环境变量已设置为以 Org2 管理员身份操作 peer CLI，因此我们可以批准将资产转移（basic）的链码定义批准为 Org2。链码在组织级别获得批准，因此该命令只需要针对一个对等节点。批准使用八卦分发给组织内的其他同行。使用<strong>peer lifecycle chaincode approveformyorg</strong>命令来批准链码定义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> --package-id <span class="token variable">$CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解读：</p><ul><li><p>使用–package-id 标志将包标识符包含在链码定义中。</p></li><li><p>–sequence参数是一个整数，用于跟踪链码被定义或更新的次数。由于链码是首次部署到channel，因此序列号为 1。当资产转移（basic）链码升级时，序列号将递增到 2。</p></li><li><p>如果您使用的是结构链码垫片 API 提供的低级 API，您可以将 -init-required标志传递给上面的命令，以请求执行 Init 函数来初始化链码。链码的第一次调用需要针对 Init 函数并包含–isInit标志 ，然后才能使用链码中的其他函数与账本交互。</p></li></ul><p>我们可以向approveformyorg命令中添加–signature-policy或–channel-config-policy参数来指定链码背书策略。背书策略指定了属于不同channel成员的节点需要多少个节点来验证给定链码的交易。由于我们没有设置策略，因此资产转移（basic）的定义将使用默认背书策略，该策略要求交易在提交交易时由在场的大多数渠道成员背书。这意味着，如果在频道中添加或删除新组织，则背书策略 会自动更新以要求更多或更少的背书。在本教程中，默认策略需要 2 个中的 2 个多数，并且事务需要由 Org1 和 Org2 的peer认可。如果要指定自定义背书策略，可以使用<a href="https://hyperledger-fabric.readthedocs.io/en/latest/endorsement-policies.html">背书</a>策略操作指南了解策略语法。</p><p>您需要批准具有管理员角色的身份的链码定义。因此，CORE_PEER_MSPCONFIGPATH变量需要指向包含管理员标识的 MSP 文件夹。您不能批准客户端用户的链码定义。审批需要提交到ordering，该服务将验证管理员签名，然后将审批分发给peer。</p><p>我们仍然需要批准链码定义为 Org1。设置以下环境变量以 Org1 管理员身份运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>您现在可以为 Org1批准链码定义。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> --package-id <span class="token variable">$CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们现在拥有将资产转移（basic）链码部署到channel所需的大部分。虽然只有大多数组织需要批准链码定义（使用默认策略），但所有组织都需要批准链码定义才能在其peer节点上启动链码。如果您在channel成员批准链码之前提交定义，组织将无法背书交易。因此，建议所有channel成员在提交链码定义之前批准链码。</p><h2 id="5-将链码定义提交到通道"><a href="#5-将链码定义提交到通道" class="headerlink" title="5.将链码定义提交到通道"></a>5.将链码定义提交到通道</h2><p>在足够数量的组织批准链码定义后，一个组织可以将链码定义提交到channel。如果大多数channel成员批准了该定义，则提交交易将成功，链码定义中约定的参数将在channel上实现。</p><p>您可以使用 **peer lifecycle chaincode checkcommitreadiness **命令来检查channel成员是否批准了相同的链码定义。用于checkcommitreadiness的标志命令与用于批准组织链码的标志相同。然而·，您不需要包含–package-id标志。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode checkcommitreadiness <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--output</span> json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果channel成员批准了check commit ready命令中指定的参数，则该命令将生成一个JSON映射:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"approvals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Org1MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Org2MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于作为channel成员的两个组织都批准了相同的参数，因此链码定义已准备好提交到channel。您可以使用 **peer lifecycle chaincode commit **命令将链码定义提交到channel。提交命令还需要由组织管理员提交。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode commit <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">1.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">1</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的事务使用**–peerAddresses**标志从Org1（peer0.org1.example.com） 和 Org2（peer0.org2.example.com） 定位。提交事务被提交给连接到channel的peer，以查询由操作peer的组织批准的链码定义。该命令需要针对来自足够数量的组织的对等方，以满足部署链码的策略。由于审批在每个组织内分发，因此您可以定位属于channel成员的任何peer。</p><p>channel成员的链码定义背书被提交给ordering，以添加到区块中并分发到channel。然后，channel上的peer验证是否足够数量的组织批准了链码定义。<strong>peer lifecycle chaincode commit</strong>命令将在返回响应之前等待peer的验证。</p><p>您可以使用 <strong>peer lifecycle chaincode querycommitted</strong>命令来确认链码定义已提交到channel。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode querycommitted <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果链码成功提交到channel，querycommitted命令将返回链码定义的序列和版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Committed chaincode definition <span class="token keyword">for</span> chaincode <span class="token string">'basic'</span> on channel <span class="token string">'mychannel'</span><span class="token builtin class-name">:</span>Version: <span class="token number">1.0</span>, Sequence: <span class="token number">1</span>, Endorsement Plugin: escc, Validation Plugin: vscc, Approvals: <span class="token punctuation">[</span>Org1MSP: true, Org2MSP: true<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-调用链码"><a href="#6-调用链码" class="headerlink" title="6.调用链码"></a>6.调用链码</h2><p>链码定义提交到channel后，链码将在加入安装链码的channel的peer节点上启动。资产转移（baric）链码现在已准备好由客户端应用程序调用。使用以下命令在账本上创建一组初始资产。请注意，调用命令需要针对足够数量的peer节点以满足链码背书策略。（请注意，CLI 不访问结构网关peer，因此必须指定每个认可peer。）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span> <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"InitLedger","Args":[]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令成功，您应该会看到类似于以下内容的响应：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2022</span>-12-04 <span class="token number">18</span>:55:29.413 CST 0001 INFO <span class="token punctuation">[</span>chaincodeCmd<span class="token punctuation">]</span> chaincodeInvokeOrQuery -<span class="token operator">></span> Chaincode invoke successful. result: status:200 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以使用query函数来读取由链码创建的汽车集：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["GetAllAssets"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对查询的响应应为以下资产列表：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Tomoko"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Brad"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Jin Soo"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Max"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">600</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Adriana"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">700</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Michel"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-升级智能合约"><a href="#7-升级智能合约" class="headerlink" title="7.升级智能合约"></a>7.升级智能合约</h2><p>您可以使用相同的 Fabric 链码生命周期流程来升级已部署到channel的链码。channel成员可以通过安装新的链码包，然后批准具有新包 ID、新链码版本和序列号递增 1 的链码定义来升级链码。新的链码可以在链码定义提交到channel后使用。此过程允许channel成员协调链码何时升级，并确保在将新链码部署到channel之前，有足够数量的channel成员准备好使用新链码。</p><p>channel成员还可以使用升级过程来更改链码背书策略。通过批准具有新背书策略的链码定义并将链码定义提交到channel，channel成员可以更改管理链码的背书策略，而无需安装新的链码包。</p><p>为了提供升级我们刚刚部署的资产转移（basic）链码的场景，假设 Org1 和 Org2 想要安装用另一种语言编写的链码版本。他们将使用 Fabric 链码生命周期来更新链码版本，并确保两个组织在channel上激活之前都安装了新链码。</p><p>我们假设 Org1 和 Org2 最初安装了资产转移（basic）链码的 GO 版本，但使用用 JavaScript 编写的链码会更舒服。第一步是打包资产转移（basic）链码的 JavaScript 版本。如果您在学习本教程时使用 JavaScript 指令打包链码，则可以按照打包用<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#go">Go</a>或<a href="https://hyperledger-fabric.readthedocs.io/en/latest/deploy_chaincode.html#typescript">TypeScript</a> 编写的链码的步骤安装新的链码二进制文件。</p><p>从目录（test-network）中发出以下命令以安装链码依赖项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-javascript<span class="token function">npm</span> <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，您可以发出以下命令来打包（test-network）目录中的 JavaScript 链码。我们将设置在您关闭终端的情况下再次使用peer CLI 所需的环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msppeer lifecycle chaincode package basic_2.tar.gz <span class="token parameter variable">--path</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-javascript/ <span class="token parameter variable">--lang</span> <span class="token function">node</span> <span class="token parameter variable">--label</span> basic_2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行以下命令以 Org1 管理员身份操作peer CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在可以使用以下命令在 Org1 peer上安装新的链码包。</p><pre class="line-numbers language-none"><code class="language-none">peer lifecycle chaincode install basic_2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新的链码包将创建一个新的包 ID。我们可以通过查询我们的peer来找到新的包 ID。</p><pre class="line-numbers language-none"><code class="language-none">peer lifecycle chaincode queryinstalled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>queryinstalled命令将返回已安装在peer节点上的链码列表，类似于此输出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installed chaincodes on peer:Package ID: basic_1.0:56069c8c46fe01a7837a218a6e2ab49a2b6c4a715c95ab2ab321a863b642d021, Label: basic_1.0Package ID: basic_2.0:cbb6c1822047f9b1ba24b07458c0f19145fa5da1ba3bcba1fe77fc6d68011a33, Label: basic_2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以使用包标签查找新链码的包 ID，并将其另存为新的环境变量。此输出为 仅举一例 – 您的包裹 ID 会有所不同，因此请勿复制和粘贴！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NEW_CC_PACKAGE_ID</span><span class="token operator">=</span> basic_2.0:cbb6c1822047f9b1ba24b07458c0f19145fa5da1ba3bcba1fe77fc6d68011a33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Org1 现在可以批准新的链码定义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> --package-id <span class="token variable">$NEW_CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新的链码定义使用 JavaScript 链码包的包 ID 并更新链码版本。由于 Fabric 链码生命周期使用序列参数来跟踪链码升级，因此 Org1 还需要将序列号从 1 递增到 2。您可以使用 <strong>peer lifecycle chaincode querycommitted</strong>命令来查找上次提交到channel的链码序列。</p><p>我们现在需要安装链码包并将链码定义批准为 Org2，以便升级链码。运行以下命令以 Org2 管理员身份操作 peer CLI：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在可以使用以下命令在 Org2 peer上安装新的链码包。</p><pre class="line-numbers language-none"><code class="language-none">peer lifecycle chaincode install basic_2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您现在可以批准 Org2 的新链码定义。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode approveformyorg <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> --package-id <span class="token variable">$NEW_CC_PACKAGE_ID</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用peer lifecycle chaincode checkcommitreadiness命令检查序列 2 的链码定义是否已准备好提交到channel：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode checkcommitreadiness <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--output</span> json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果命令返回以下 JSON，则链码已准备好升级：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"Approvals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Org1MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Org2MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交新的链码定义后，链码将在channel上升级。在此之前，之前的链码将继续在两个组织的peer节点上运行。Org2 可以使用以下命令升级链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer lifecycle chaincode commit <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--channelID</span> mychannel <span class="token parameter variable">--name</span> basic <span class="token parameter variable">--version</span> <span class="token number">2.0</span> <span class="token parameter variable">--sequence</span> <span class="token number">2</span> <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功的提交交易将立即启动新的链码。如果链码定义改变了背书策略，新策略将生效。</p><p>您可以使用docker ps命令来验证新链码是否已在您的peer节点上启动：</p><p><img src="/2022/12/04/guan-fang-wen-dang-jiao-cheng-01-jiang-zhi-neng-he-yue-bu-shu-dao-guan-dao/image-20221204191053032.png"></p><p>如果您使用了 –init-required标志，则需要调用 Init 函数，然后才能使用升级后的链码。因为我们没有请求执行 Init，所以我们可以通过创建一个新车来测试我们新的 JavaScript 链码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span> orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"</span> <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">--peerAddresses</span> localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"</span> <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"</span> <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"CreateAsset","Args":["asset8","blue","16","Kelley","750"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以再次查询账本上的所有汽车以查看新车：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["GetAllAssets"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该看到来自 JavaScript 链码的以下结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset1"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Tomoko"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset2"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Brad"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset3"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Jin Soo"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset4"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Max"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">600</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset5"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Adriana"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">700</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset6"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Michel"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"Key"</span><span class="token operator">:</span><span class="token string">"asset8"</span><span class="token punctuation">,</span><span class="token property">"Record"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"ID"</span><span class="token operator">:</span><span class="token string">"asset8"</span><span class="token punctuation">,</span><span class="token property">"color"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token property">"size"</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token property">"owner"</span><span class="token operator">:</span><span class="token string">"Kelley"</span><span class="token punctuation">,</span><span class="token property">"appraisedValue"</span><span class="token operator">:</span><span class="token number">750</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-关闭网络"><a href="#8-关闭网络" class="headerlink" title="8.关闭网络"></a>8.关闭网络</h2><p>使用完链码后，您还可以使用以下命令删除 Logspout 工具。</p><pre class="line-numbers language-none"><code class="language-none">docker stop logspoutdocker rm logspout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，您可以通过从（test-network）目录中发出以下命令来关闭测试网络：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-可能存在的错误"><a href="#9-可能存在的错误" class="headerlink" title="9.可能存在的错误"></a>9.可能存在的错误</h2><h3 id="9-1此组织未同意链码"><a href="#9-1此组织未同意链码" class="headerlink" title="9.1此组织未同意链码"></a>9.1此组织未同意链码</h3><p><strong>问题：</strong>当我尝试将新的链码定义提交到channel时，peer lifecycle chaincode commit命令失败并显示以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: failed to create signed transaction: proposal response was not successful, error code <span class="token number">500</span>, msg failed to invoke backing implementation of <span class="token string">'CommitChaincodeDefinition'</span><span class="token builtin class-name">:</span> chaincode definition not agreed to by this org <span class="token punctuation">(</span>Org1MSP<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方案：您可以尝试通过使用<strong>peer lifecycle chaincode checkcommitreadiness</strong>命令来检查哪些channel成员批准了您尝试提交的链码定义，从而尝试解决此错误。如果任何组织对链码定义的任何参数使用不同的值，则提交事务将失败。<strong>peer lifecycle chaincode checkcommitreadiness</strong>命令可以帮你得知哪些组织没有批准您尝试提交的链码定义：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"approvals"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"Org1MSP"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"Org2MSP"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2调用失败"><a href="#9-2调用失败" class="headerlink" title="9.2调用失败"></a>9.2调用失败</h3><p><strong>问题</strong>：<strong>peer lifecycle chaincode commit</strong>提交事务成功，但是当我第一次尝试调用链码时，它失败并显示以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: endorsement failure during invoke. response: status:500 message:<span class="token string">"make sure the chaincode asset-transfer (basic) has been successfully defined on channel mychannel and try again: chaincode definition for 'asset-transfer (basic)' exists, but chaincode is not installed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong>：您可能没有在你批准链码定义时设置正确的–package-id因此，提交到channel的链码定义与您安装的链码包无关，并且链码未在您的peer节点上启动。如果您运行的是基于 docker 的网络，您可以使用docker ps命令检查您的链码是否正在运行：</p><pre class="line-numbers language-none"><code class="language-none">docker psCONTAINER ID        IMAGE                               COMMAND             CREATED             STATUS              PORTS                              NAMES7fe1ae0a69fa        hyperledger&#x2F;fabric-orderer:latest   &quot;orderer&quot;           5 minutes ago       Up 4 minutes        0.0.0.0:7050-&gt;7050&#x2F;tcp             orderer.example.com2b9c684bd07e        hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   5 minutes ago       Up 4 minutes        0.0.0.0:7051-&gt;7051&#x2F;tcp             peer0.org1.example.com39a3e41b2573        hyperledger&#x2F;fabric-peer:latest      &quot;peer node start&quot;   5 minutes ago       Up 4 minutes        7051&#x2F;tcp, 0.0.0.0:9051-&gt;9051&#x2F;tcp   peer0.org2.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您没有看到任何链码容器列出，请使用<strong>peer lifecycle chaincode approveformyorg</strong>命令批准具有正确包 ID 的链码定义。</p><h3 id="9-3背书策略失败"><a href="#9-3背书策略失败" class="headerlink" title="9.3背书策略失败"></a>9.3背书策略失败</h3><p><strong>问题：</strong>当我尝试将链码定义提交到channel时，交易失败并显示以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-04-07 <span class="token number">20</span>:08:23.306 EDT <span class="token punctuation">[</span>chaincodeCmd<span class="token punctuation">]</span> ClientWait -<span class="token operator">></span> INFO 001 txid <span class="token punctuation">[</span>5f569e50ae58efa6261c4ad93180d49ac85ec29a07b58f576405b826a8213aeb<span class="token punctuation">]</span> committed with status <span class="token punctuation">(</span>ENDORSEMENT_POLICY_FAILURE<span class="token punctuation">)</span> at localhost:7051Error: transaction invalidated with status <span class="token punctuation">(</span>ENDORSEMENT_POLICY_FAILURE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：此错误是由于提交事务未收集足够的背书来满足生命周期背书策略。此问题可能是由于您的事务未针对足够数量的peer来满足策略。这也可能是一些peer组织不包括认可的Endorsement:默认的/Channel/Application/背书策略在configtx.yaml文件中引用的签名策略:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Readers<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.admin', 'Org2MSP.peer', 'Org2MSP.client')"</span>Writers<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.admin', 'Org2MSP.client')"</span>Admins<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.admin')"</span>Endorsement<span class="token operator">:</span>        Type<span class="token operator">:</span> Signature        Rule<span class="token operator">:</span> <span class="token string">"OR('Org2MSP.peer')"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用 <strong>enable the Fabric chaincode lifecycle</strong>时，除了将channel升级到功能之外，您还需要使用新的 Fabric 2.0 channel策略。您的频道需要包含新的（/Channel/Application/LifecycleEndorsement）和（/Channel/Application/Endorsement）策略。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Policies:        Readers:                Type: ImplicitMeta                Rule: <span class="token string">"ANY Readers"</span>        Writers:                Type: ImplicitMeta                Rule: <span class="token string">"ANY Writers"</span>        Admins:                Type: ImplicitMeta                Rule: <span class="token string">"MAJORITY Admins"</span>        LifecycleEndorsement:                Type: ImplicitMeta                Rule: <span class="token string">"MAJORITY Endorsement"</span>        Endorsement:                Type: ImplicitMeta                Rule: <span class="token string">"MAJORITY Endorsement"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您未在channel配置中包含新的channel策略，则在批准组织的链码定义时将收到以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: proposal failed with status: <span class="token number">500</span> - failed to invoke backing implementation of <span class="token string">'ApproveChaincodeDefinitionForMyOrg'</span><span class="token builtin class-name">:</span> could not <span class="token builtin class-name">set</span> defaults <span class="token keyword">for</span> chaincode definition <span class="token keyword">in</span> channel mychannel: policy <span class="token string">'/Channel/Application/Endorsement'</span> must be defined <span class="token keyword">for</span> channel <span class="token string">'mychannel'</span> before chaincode operations can be attempted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于腾讯云ubuntu18.04版本搭建Hyperledger Fabric</title>
      <link href="/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/"/>
      <url>/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/</url>
      
        <content type="html"><![CDATA[<h1 id="基于腾讯云ubuntu18-04版本搭建Hyperledger-Fabric"><a href="#基于腾讯云ubuntu18-04版本搭建Hyperledger-Fabric" class="headerlink" title="基于腾讯云ubuntu18.04版本搭建Hyperledger Fabric"></a>基于腾讯云ubuntu18.04版本搭建Hyperledger Fabric</h1><h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h2><h3 id="1-1git"><a href="#1-1git" class="headerlink" title="1.1git"></a>1.1git</h3><p>安装最新版本的git（如果尚未安装）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2cURL"><a href="#1-2cURL" class="headerlink" title="1.2cURL"></a>1.2cURL</h3><p>安装最新版本的<a href="https://curl.haxx.se/download.html">cURL</a>（如果尚未安装）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3dokcer"><a href="#1-3dokcer" class="headerlink" title="1.3dokcer"></a>1.3dokcer</h3><p>由于博主亲身体验，建议先安装docker-compose再安装docker，并且hyperledger fabric需要1.27.2版本的docker-compose，所以我们先输入下面这行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.27.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后对<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>文件执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果这一步遇到问题，可以创建/usr/bin路径建立链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后检查版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到如下字样即可代表安装完毕</p><p><img src="/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/image-20221203234134602.png"></p><p>然后我们就可以安装docker了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查docker版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/image-20221203234317946.png"></p><p>当然hyperledger fabric建议的版本为19.03.12，只要不小于这个版本基本都ok</p><p>确保 Docker 守护程序正在运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选：如果您希望 Docker 守护程序在系统启动时启动，请使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将您的用户添加到 Docker 组。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-G</span> <span class="token function">docker</span> <span class="token operator">&lt;</span>username<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4go语言"><a href="#1-4go语言" class="headerlink" title="1.4go语言"></a>1.4go语言</h3><p>下载最新的Go安装包：<a href="https://go.dev/doc/install%E6%88%96%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%85%A5%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4">https://go.dev/doc/install或直接输入如下命令</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://studygolang.com/dl/golang/go1.19.3.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除已安装的go，并解压go安装包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/go <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-C</span> /usr/local <span class="token parameter variable">-xzf</span> go1.19.3.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/go/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更换代理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,directgo <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看安装情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/image-20221203234651629.png"></p><h3 id="1-5JQ"><a href="#1-5JQ" class="headerlink" title="1.5JQ"></a>1.5JQ</h3><p>⾃动安装JQ。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> jq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6nodejs"><a href="#1-6nodejs" class="headerlink" title="1.6nodejs"></a>1.6nodejs</h3><p>使用ubuntu自带apt-get安装，安装后使用node-v查看版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs-legacy nodejs <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>升级nodejs版本，首先安装n模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>升级node.js到最新稳定版</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">n stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS：n后面也可以跟随版本号（用于升级或降级）比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">n v16.2.0//后面的案例所需版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载完毕之后，使用n命令修改node版本，最后使用sudo node -v和sudo npm -v查看版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">n<span class="token function">sudo</span> <span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-7Hyperledger-Fabric安装与配置"><a href="#1-7Hyperledger-Fabric安装与配置" class="headerlink" title="1.7Hyperledger Fabric安装与配置"></a>1.7<strong>Hyperledger Fabric</strong>安装与配置</h3><p>新建HLF⽬录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> hyperledger //新建HLF⽬录<span class="token builtin class-name">cd</span> hyperledger //进⼊HLF⽬录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Github中拉取HLF最新安装脚本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-sSLO</span>https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh <span class="token operator">&amp;&amp;</span><span class="token function">chmod</span> +x install-fabric.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装HLF和HLF示例⽹络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./install-fabric.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Hyperledger-Fabric网络运行和测试"><a href="#2-Hyperledger-Fabric网络运行和测试" class="headerlink" title="2.Hyperledger Fabric网络运行和测试"></a>2.Hyperledger Fabric网络运行和测试</h2><h3 id="2-1搭建Fabric网络"><a href="#2-1搭建Fabric网络" class="headerlink" title="2.1搭建Fabric网络"></a>2.1搭建Fabric网络</h3><p>进⼊fabric⽹络测试实例⽬录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> fabric-samples/test-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启fabric⽹络。这边建议先关闭一次fabric网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down//关闭网络./network.sh up//开启网络<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启成功则出现如下结果：</p><p><img src="/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/image-20221203235154070.png"></p><p>查看fabric⽹络状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/12/03/ji-yu-teng-xun-yun-ubuntu18-04-ban-ben-da-jian-hyperledger-fabric/image-20221203235251293.png"></p><p>创建fabric⽹络channel。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh createChannel//看到如下结果说明channel创建成功<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Channel <span class="token string">'mychannel'</span> <span class="token assign-left variable">joined</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建channel的chaincode。只要不报错就是成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh deployCC <span class="token parameter variable">-ccn</span> basic <span class="token parameter variable">-ccp</span> <span class="token punctuation">..</span>/asset-transfer-basic/chaincode-go <span class="token parameter variable">-ccl</span> go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2Client-SDK与Fabric⽹络交互"><a href="#2-2Client-SDK与Fabric⽹络交互" class="headerlink" title="2.2Client SDK与Fabric⽹络交互"></a>2.2Client SDK与Fabric⽹络交互</h3><p>为client SDK添加环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/<span class="token punctuation">..</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">FABRIC_CFG_PATH</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token punctuation">..</span>/config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将client SDK绑定在⼀个peer0.org1上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Environment variables for Org1</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org1MSP"</span><span class="token builtin class-name">export</span><span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<span class="token builtin class-name">export</span><span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:7051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在client SDK上执⾏chaincode的InitLedger⽅法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span>orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">--peerAddresses</span>localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"InitLedger","Args":[]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功执⾏则出现如下结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-<span class="token operator">></span> INFO 001 Chaincode invoke successful. result: status:200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在client SDK上执⾏chaincode的queryAll⽅法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["GetAllAssets"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功执⾏则出现如下结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span> <span class="token string">"asset1"</span>, <span class="token string">"color"</span><span class="token builtin class-name">:</span> <span class="token string">"blue"</span>, <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">5</span>, <span class="token string">"owner"</span><span class="token builtin class-name">:</span> <span class="token string">"Tomoko"</span>, <span class="token string">"appraisedValue"</span><span class="token builtin class-name">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span> <span class="token string">"asset2"</span>, <span class="token string">"color"</span><span class="token builtin class-name">:</span> <span class="token string">"red"</span>, <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">5</span>, <span class="token string">"owner"</span><span class="token builtin class-name">:</span> <span class="token string">"Brad"</span>, <span class="token string">"appraisedValue"</span><span class="token builtin class-name">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span> <span class="token string">"asset3"</span>, <span class="token string">"color"</span><span class="token builtin class-name">:</span> <span class="token string">"green"</span>, <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">10</span>, <span class="token string">"owner"</span><span class="token builtin class-name">:</span> <span class="token string">"Jin Soo"</span>, <span class="token string">"appraisedValue"</span><span class="token builtin class-name">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span> <span class="token string">"asset4"</span>, <span class="token string">"color"</span><span class="token builtin class-name">:</span> <span class="token string">"yellow"</span>, <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">10</span>, <span class="token string">"owner"</span><span class="token builtin class-name">:</span> <span class="token string">"Max"</span>, <span class="token string">"appraisedValue"</span><span class="token builtin class-name">:</span><span class="token number">600</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span> <span class="token string">"asset5"</span>, <span class="token string">"color"</span><span class="token builtin class-name">:</span> <span class="token string">"black"</span>, <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">15</span>, <span class="token string">"owner"</span><span class="token builtin class-name">:</span> <span class="token string">"Adriana"</span>, <span class="token string">"appraisedValue"</span><span class="token builtin class-name">:</span><span class="token number">700</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span> <span class="token string">"asset6"</span>, <span class="token string">"color"</span><span class="token builtin class-name">:</span> <span class="token string">"white"</span>, <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">15</span>, <span class="token string">"owner"</span><span class="token builtin class-name">:</span> <span class="token string">"Michel"</span>, <span class="token string">"appraisedValue"</span><span class="token builtin class-name">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在client SDK上执⾏chaincode的transfer⽅法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode invoke <span class="token parameter variable">-o</span> localhost:7050 <span class="token parameter variable">--ordererTLSHostnameOverride</span>orderer.example.com <span class="token parameter variable">--tls</span> <span class="token parameter variable">--cafile</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">--peerAddresses</span>localhost:7051 <span class="token parameter variable">--tlsRootCertFiles</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt <span class="token parameter variable">--peerAddresses</span> localhost:9051 <span class="token parameter variable">--tlsRootCertFiles</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt <span class="token parameter variable">-c</span> <span class="token string">'&#123;"function":"TransferAsset","Args":["asset6","Christopher"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功执⾏则出现如下结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2019</span>-12-04 <span class="token number">17</span>:38:21.048 EST <span class="token punctuation">[</span>chaincodeCmd<span class="token punctuation">]</span> chaincodeInvokeOrQuery -<span class="token operator">></span> INFO 001 Chaincodeinvoke successful. result: status:200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将client SDK绑定在⼀个peer0.org2上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Environment variables for Org2</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_TLS_ENABLED</span><span class="token operator">=</span>true<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_LOCALMSPID</span><span class="token operator">=</span><span class="token string">"Org2MSP"</span><span class="token builtin class-name">export</span><span class="token assign-left variable">CORE_PEER_TLS_ROOTCERT_FILE</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<span class="token builtin class-name">export</span><span class="token assign-left variable">CORE_PEER_MSPCONFIGPATH</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<span class="token builtin class-name">export</span> <span class="token assign-left variable">CORE_PEER_ADDRESS</span><span class="token operator">=</span>localhost:9051<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在client SDK上执⾏chaincode的query⽅法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">peer chaincode query <span class="token parameter variable">-C</span> mychannel <span class="token parameter variable">-n</span> basic <span class="token parameter variable">-c</span> <span class="token string">'&#123;"Args":["ReadAsset","asset6"]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功执⾏则出现如下结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"ID"</span><span class="token builtin class-name">:</span><span class="token string">"asset6"</span>,<span class="token string">"color"</span><span class="token builtin class-name">:</span><span class="token string">"white"</span>,<span class="token string">"size"</span>:15,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"Christopher"</span>,<span class="token string">"appraisedValue"</span>:800<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只要上述操作不报错便可证明你已经成功搭建了Hyperledger Fabric网络了！！！！！</p><h3 id="2-3关闭网络"><a href="#2-3关闭网络" class="headerlink" title="2.3关闭网络"></a>2.3关闭网络</h3><p>关闭测试的实例Fabric⽹络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./network.sh down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 部署类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo部署到github上</title>
      <link href="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/"/>
      <url>/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/</url>
      
        <content type="html"><![CDATA[<h1 id="将hexo部署到github上"><a href="#将hexo部署到github上" class="headerlink" title="将hexo部署到github上"></a>将hexo部署到github上</h1><p>本文章属于半笔记半教程的零基础小白入门文，教你将 Hexo 部署到了 <a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a> Pages，从而获得自己的静态博客网站。首先我们需要一个自己的github账号。</p><h2 id="1-创建github账号"><a href="#1-创建github账号" class="headerlink" title="1.创建github账号"></a>1.创建github账号</h2><p>github官网：<a href="https://github.com/">https://github.com/</a></p><p>进入官网，点击sign up创建账号</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/7516cbd52de417df747237e94ca3720.jpg"></p><p>然后填写邮箱</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/f83bdbc232f4b3b733aac88f953f88c.jpg"></p><p>填写密码</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/e9ca019828165b2dad36438a8947e6c.jpg"></p><p>填写github用户名<img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/cd73b7d53ed1a4103d51f900b783675.jpg"></p><p>选择y或者n</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/e7013e39156107f118084430f2c7e8c.jpg"></p><p>全部填写完进入下一步</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/be9b315d76b57459df71c72be89ee0c.jpg"></p><p>根据自己的情况进行选择</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/c5e2e9e089882c4010eff2a1c292f27.jpg"></p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/7691ebfae468a55d6903ec58d4f1a89.jpg"></p><p>最后选择完毕之后就创建好啦</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/ac7f524d08c6c58d26fe283c47e085f.jpg"></p><h2 id="2-创建github仓库"><a href="#2-创建github仓库" class="headerlink" title="2.创建github仓库"></a>2.创建github仓库</h2><p>我们需要把在本地的博客文件部署到github上就需要存放在github的仓库中，所以我们需要先创建一个仓库。</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/0d5ab5f5f8f1dc61556645e2128448c.jpg"></p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/5df604c349ba7c2af7999cb5d5722c9.jpg"></p><h2 id="3-一键生成SSH密钥"><a href="#3-一键生成SSH密钥" class="headerlink" title="3.一键生成SSH密钥"></a>3.一键生成SSH密钥</h2><h3 id="git-ssh的使用"><a href="#git-ssh的使用" class="headerlink" title="git_ssh的使用"></a>git_ssh的使用</h3><p>您需要在存放install.sh脚本的目录中,右键打开git bash运行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;install.sh git_ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/37d0e386ad0e1de1fef8ef48cfb6b7e.jpg"></p><p>可以看到会有四条可执行命令,输入对应数字可以执行对应的命令</p><pre class="line-numbers language-none"><code class="language-none">1)Key2)SSH3)Verify-github4)Verify-coding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1)Key 执行1后可以一键生成秘钥如果你的电脑已经存在秘钥,程序将会自动退出2)SSH 执行2后可以查看你电脑中已生成的秘钥]3)Verify-github 执行3后可以检查秘钥是否配置github成功4)Verify-coding 执行4后可以检查秘钥是否配置coding成功生成秘钥后别忘记将秘钥添加到账号里,否则秘钥不会配置成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>博主这里已经创建过SSH密钥了，所以不必在意。</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/2902c16ec516a528bfe48347066dc80.jpg"></p><h2 id="4-将博客部署到github上"><a href="#4-将博客部署到github上" class="headerlink" title="4.将博客部署到github上"></a>4.将博客部署到github上</h2><p>我们首先需要在GitHub <strong>头像下的 Settings</strong> 里找到添加 SSH key，点击<strong>New SSH key</strong> 。</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/9fe66380a2d1ae1954e00e7c94117d8.jpg"></p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/2a849658f3c8276aed0ca8e24ecca2d.jpg"></p><h3 id="up-sh的使用"><a href="#up-sh的使用" class="headerlink" title="up.sh的使用"></a>up.sh的使用</h3><p>您需要在存放install.sh脚本的目录中,右键打开git bash运行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">source install.sh deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://3344701850-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-LlpfTEtpw-XHjloYx-t%2F-LlurwQcZHGhMvMGz358%2F-LlutGTSONJsGgLT-HB3%2F8.png?alt=media&token=6b16f0f3-aaa4-4083-960c-e41031408d1a"></p><p>你需要将up.sh复制到hexoblog文件,也就是复制到你的博客根目录下</p><p><img src="https://3344701850-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-LlpfTEtpw-XHjloYx-t%2F-LluvTLNmEKB-I1ZDiSA%2F-LluzdSM_MrB7O9qCs1Z%2F9.png?alt=media&token=bce8b33c-c6ec-4242-80fb-a0ac97e99d1a"></p><p>然后在存放up.sh脚本的目录中,右键打开git bash运行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">source up.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后即可自动部署到你的github或者coding上</p><p>如果上传失败你需要检查是否安装的是最新版本的[hexo-script] ,或者在根目录配置了deploy信息.</p><p>如果你不会配置,可以看下面的教程:</p><h3 id="部署博客必要的配置"><a href="#部署博客必要的配置" class="headerlink" title="部署博客必要的配置"></a>部署博客必要的配置</h3><p>首先你需要打开根目录配置文件_config.yml</p><p><img src="/2022/10/26/jiang-hexo-bu-shu-dao-github-shang/d942cf2c487c3fad259ac353a674aef.jpg"></p><p>找到deploy,它一般在最后一行,按照以下的格式修改即可</p><p><img src="https://3344701850-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-LlpfTEtpw-XHjloYx-t%2F-LluvTLNmEKB-I1ZDiSA%2F-LluyCdpQ92nd8tuqn9Z%2F22.png?alt=media&token=05f14980-032b-4997-b2b2-9bb31c28332d"></p><p>你只需要修改repo后面的信息即可</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: 这里填你的仓库地址,建议使用SSH地址,它是以git开头的  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在1.3版本的[heox-script]后你无需自己安装上传插件,但如果报出了not found git的错误证明上传插件没有安装成功,你需要执行以下命令</p><pre class="line-numbers language-none"><code class="language-none">cnpm install hexo-deployer-git --save或者是npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后依次执行下列命令。</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy# 当然也可简写成hexo clean &amp;&amp; hexo g &amp;&amp; hexo d# 这里，不一定每次都要 clean，clean 会清除缓存，导致一些计数脚本清零。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以在 <strong>本地PC</strong> 浏览器上输入 GitHub Pages 的域名 <code>https://自己的用户名.github.io</code> 访问我们的博客了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 部署类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题美化与发布文章</title>
      <link href="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/"/>
      <url>/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo主题美化与发布文章"><a href="#hexo主题美化与发布文章" class="headerlink" title="hexo主题美化与发布文章"></a>hexo主题美化与发布文章</h1><p><a href="https://link.zhihu.com/?target=https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://link.zhihu.com/?target=https://www.lixl.cn/">这里</a> 可以查看示例效果。博主的hexo博客采用的就是hexo-teme-matery，当然网上还有很多主题，大家可以自行上网搜索。</p><h2 id="1-下载Matery主题"><a href="#1-下载Matery主题" class="headerlink" title="1.下载Matery主题"></a>1.下载Matery主题</h2><p>首先在<a href="https://hexo.io/themes/">hexo官网主题</a>里面搜索<strong>Matery</strong>主题点击进入作者大大的<a href="https://github.com/blinkfox/hexo-theme-matery">github</a>，然后下载 master 分支的最新稳定版的代码，解压缩后将 hexo-theme-matery 的文件夹重命名为matery，复制到Hexo 的 themes 文件夹中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/361b48a77bf17f875d870a7b76678a41.png"></p><p>可以在themes 文件夹下使用Git Bash Here来下载：</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a><strong>切换主题</strong></h3><p>下载完后，将博客配置文件中的 theme 值修改为你下载主题的文件名</p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025091752294.png"></p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025092015060.png"></p><h3 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h3><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h2 id="2-新建页面"><a href="#2-新建页面" class="headerlink" title="2.新建页面"></a>2.新建页面</h2><h3 id="2-1、新建标签tags页"><a href="#2-1、新建标签tags页" class="headerlink" title="2.1、新建标签tags页"></a>2.1、新建标签tags页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件夹中打开Git Bash Herehexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: tagsdate: 2022-10-25 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、新建关于我-about-页"><a href="#2-2、新建关于我-about-页" class="headerlink" title="2.2、新建关于我 about 页"></a>2.2、新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件夹中打开Git Bash Herehexo new page &quot;about&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: aboutdate: 2022-10-25 18:23:38type: &quot;about&quot;layout: &quot;about&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、新建友情连接-friends-页（可选的）"><a href="#2-3、新建友情连接-friends-页（可选的）" class="headerlink" title="2.3、新建友情连接 friends 页（可选的）"></a>2.3、新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件夹中打开Git Bash Herehexo new page &quot;friends&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: friendsdate: 2022-10-25 18:23:38type: &quot;friends&quot;layout: &quot;friends&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-none"><code class="language-none">[&#123;    &quot;avatar&quot;: &quot;https:&#x2F;&#x2F;www.lixl.cn&#x2F;medias&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;悟尘记&quot;,    &quot;introduction&quot;: &quot;人生就是一场修行，上善若水，厚德载物。&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.lixl.cn&#x2F;&quot;,    &quot;title&quot;: &quot;前去参观&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;https:&#x2F;&#x2F;wiki.hyperledger.org&#x2F;download&#x2F;attachments&#x2F;2392069&#x2F;fabric?version&#x3D;1&amp;modificationDate&#x3D;1540928132000&amp;api&#x3D;v2&quot;,    &quot;name&quot;: &quot;Fabric&quot;,    &quot;introduction&quot;: &quot;A Blockchain Platform for the Enterprise&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;hyperledger-fabric.readthedocs.io&#x2F;en&#x2F;master&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;https:&#x2F;&#x2F;www.bootcdn.cn&#x2F;assets&#x2F;img&#x2F;maoyun.svg&quot;,    &quot;name&quot;: &quot;BootCDN&quot;,    &quot;introduction&quot;: &quot;稳定、快速、免费的前端开源项目 CDN 加速服务。&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.bootcdn.cn&#x2F;&quot;,    &quot;title&quot;: &quot;前去加速&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4、新建分类-categories-页"><a href="#2-4、新建分类-categories-页" class="headerlink" title="2.4、新建分类 categories 页"></a>2.4、新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件夹中打开Git Bash Herehexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: categoriesdate: 2022-10-25 18:23:38type: &quot;categories&quot;layout: &quot;categories&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5、新建留言板contact页面"><a href="#2-5、新建留言板contact页面" class="headerlink" title="2.5、新建留言板contact页面"></a>2.5、新建留言板contact页面</h3><p>contact页是用来展示留言板的页面，如果<code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件夹中打开Git Bash Herehexo new page &quot;contact&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: contactdate: 2022-10-25 18:23:38type: &quot;contact&quot;layout: &quot;contact&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6、新建404页面"><a href="#2-6、新建404页面" class="headerlink" title="2.6、新建404页面"></a>2.6、新建404页面</h3><p>404页是用来展示网页崩溃时的页面，如果<code>source</code> 目录下还没有 <code>404/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件夹中打开Git Bash Herehexo new page &quot;404&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-none"><code class="language-none">---title: 404date: 2022-10-25 18:23:38type: &quot;404&quot;layout: &quot;404&quot;description: &quot;Oops～，我崩溃了！找不到你想要的页面了&quot;---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着再新建主题文件夹的 layout 目录下新建 404.ejs 文件，添加内容如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;    &#x2F;* don&#39;t remove. *&#x2F;    .about-cover &#123;        height: 90.2vh;    &#125;&lt;&#x2F;style&gt;&lt;div class&#x3D;&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;row&quot;&gt;            &lt;div class&#x3D;&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class&#x3D;&quot;brand&quot;&gt;                    &lt;div class&#x3D;&quot;title center-align&quot;&gt;                        404                    &lt;&#x2F;div&gt;                    &lt;div class&#x3D;&quot;description center-align&quot;&gt;                        &lt;%&#x3D; page.description %&gt;                    &lt;&#x2F;div&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;script&gt;    &#x2F;&#x2F; 每天切换 banner 图.  Switch banner image every day.    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7、新建自定义页面"><a href="#2-7、新建自定义页面" class="headerlink" title="2.7、新建自定义页面"></a>2.7、新建自定义页面</h3><p>首先在站点目录下的 source 文件夹下新建 aboutme 文件夹，文件名可自定义，然后编写一个 index.html 放入 aboutme 文件夹下，然后在主题配置文件下的导航配置信息添加下面的配置：</p><pre class="line-numbers language-none"><code class="language-none">About:    url: &#x2F;    icon: fas fa-address-card    children:      - name: 关于我        url: &#x2F;about        icon: fas fa-user-circle      - name: Another    #这是新添加的，在原有配置基础上添加        url: &#x2F;aboutme        icon: fa fa-user-secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在站点配置文件下，找到 skip_render，在后面添加属性，如下：</p><pre class="line-numbers language-none"><code class="language-none"># 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件skip_render:     - aboutme&#x2F;**     - aaa&#x2F;**    - bbb&#x2F;**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置菜单导航"><a href="#配置菜单导航" class="headerlink" title="配置菜单导航"></a>配置菜单导航</h3><p>配置基本菜单导航的名称、路径 url 和图标 icon.</p><p>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 或者<a href="%5Biconfont-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9F%A2%E9%87%8F%E5%9B%BE%E6%A0%87%E5%BA%93%5D(https://www.iconfont.cn/)">阿里巴巴矢量库</a> 中查找</p><p>首先打开博客主题的配置文件</p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025093942236.png"></p><p>找到菜单导航的配置，修改其中的配置项即可</p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025094030954.png"></p><h5 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h5><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)<br>2.在children下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 -.<br>4.注意缩进格式<br>例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-主题优化"><a href="#3-主题优化" class="headerlink" title="3.主题优化"></a>3.主题优化</h2><h3 id="添加emoji表情"><a href="#添加emoji表情" class="headerlink" title="添加emoji表情"></a>添加emoji表情</h3><p>使用emoji表情需要安装插件 hexo-filter-<a href="https://so.csdn.net/so/search?q=github&spm=1001.2101.3001.7020">github</a>-emojis</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来下载：npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果没成功</strong></p><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>😍 😄 😂 ✨ 🎵 👌 👍 💜<br>👫 💧 ☀ 🐼 🐦 🌚 🌏 📞 🔫 🔭 🚴 🍅 🚀 🇨🇳 🈚 🈳 🚯 ♎ ©。<strong>来一波表情支持</strong></p><p>在网站<a href="https://www.webfx.com/tools/emoji-cheat-sheet/%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E5%B8%B8%E7%94%A8%E8%A1%A8%E6%83%85%E5%AF%B9%E5%BA%94%E4%BB%A3%E7%A0%81">https://www.webfx.com/tools/emoji-cheat-sheet/可以搜索常用表情对应代码</a></p><p>在 emoji-cheat-sheet 中找到你想要的表情，然后点击即可复制。使用方法和 GitHub 一样，比如你想发一个笑脸 😄 直接输入笑脸对应的 emoji 编码 :smile： 就可以。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>代码美化需要安装hexo-prism-plugin 插件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来下载：npm install hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:#代码块的设置  enable: false#开启代码块高亮  line_number: true#如果未指定语言，则启用自动检测  auto_detect: false#显示行数  tab_replace: &#39;&#39;#用n个空格替换tabs；如果值为空，则不会替换tabs  wrap: true  hljs: false# 关闭原有的代码高亮，使用自己的prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>参数KEY</strong></th><th><strong>可选值</strong></th></tr></thead><tbody><tr><td>mode</td><td>realtime (Parse code on browser in real time) preprocess (Preprocess code in node)</td></tr><tr><td>theme</td><td>default coy dark funky okaidia solarizedlight tomorrow twilight 如果要更多的选择访问： <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a></td></tr><tr><td>line_number</td><td>true (Show line numbers) false (Default, Hide line numbers)</td></tr><tr><td>no_assets</td><td>true (Stop loading asset files) false (Default, load script and stylesheets files)</td></tr></tbody></table><p><strong>注意：</strong></p><p>hexo花括号显示失败的话，需要将hexo版本降级，改成hexo4.2.0版本就好了</p><p>卸载hexo5.0</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来进行：npm uninstall hexo --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/91cccfeb6967936038c56f582b1d67e5.png"></p><p>安装4.2.0版本</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来进行：npm install hexo@4.2.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/898a784da02aceb7a0eb1a335829af5c.png"></p><h3 id="主题的搜索功能"><a href="#主题的搜索功能" class="headerlink" title="主题的搜索功能"></a>主题的搜索功能</h3><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025205645206.png"></p><p>需要安装hexo-generator-search插件</p><p>在博客主题根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B8%8E%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0image-20221025205801331.png"></p><p>需要安装 hexo-wordcount 插件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来进行：npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>博客下的 _config.yml 文件中，激活以下配置项即可：</p><pre class="line-numbers language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果保存后报错</p><p><img src="https://img-blog.csdnimg.cn/img_convert/563272a84cd22d44dd09c7da3aecef19.png"></p><pre class="line-numbers language-none"><code class="language-none">npm ls --depth 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令查看 npm 安装各 hexo 插件的情况</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eb3612270fba079022596168fff630b6.png"></p><p>无问题，改为以下不报错</p><p>一天后问题自动恢复</p><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/f00f819bd8a8e1961de4b1e5d7eae29b.png"></p><p>需要安装hexo-generator-feed插件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来进行：npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>博客根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class="line-numbers language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 public 文件夹中即可看到 atom.xml 文件，则已经安装成功</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在博客主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在博客主题的 config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.github) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.github %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 source/medias/reward 文件中修改</p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025210212780.png"></p><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/29cae7820140cae42300533bdbc22a16.png"></p><p>支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p><p>博客主题的 _config.yml 配置文件中激活 music 配置即可：</p><pre class="line-numbers language-none"><code class="language-none"># Whether to display the musics.# 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: somewei的歌单  autoHide: true    # hide automaticaly  server: netease   #requiremusic platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 2888085740     #requiresong id &#x2F; playlist id &#x2F; album id &#x2F; search keyword  fixed: false       # 开启吸底模式  autoplay: false   # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠  hideLrc: true     # 隐藏歌词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">server 可选 netease（网易云音乐），tencent（QQ 音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。type 可选 song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）id 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist 的 id 即为这串数字。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来进行：hexo new 文章名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">hexo new HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么hexo会创建一个文章名为HelloWorld的文章，文章格式则是md格式，存放在\博客文件夹\source_posts\world.md</p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025211048938.png"></p><p><img src="/2022/10/25/hexo-zhu-ti-mei-hua-yu-fa-bu-wen-zhang/image-20221025211120755.png"></p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">注意:1.如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。2.date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。3.如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。4.您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: HelloWorlddate: 2022-10-25 18:23:38---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: HelloWorlddate: 2022-10-25 18:23:38author: 张三img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，可以将<code>博客文件夹/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-none"><code class="language-none">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;author: img: coverImg: top: falsecover: falsetoc: truemathjax: falsepassword:summary:keywords:tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在博客主题文件的 /source/css/matery.css 文件中修改</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #2558FF 0%, #0f9d58 100%);&#125;&#x2F;*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*&#x2F;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>在博客主题文件夹 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 博客主题文件夹/layout/_partial/bg-cover-content.ejs 文件的 代码中：</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 博客主题文件夹/source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在博客主题文件夹下的 _config.yml 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 getDay() 改为 getHours() 或者 getMinutes() 即可。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d388f57880ddbaaf25977bd7e0719d23.png"></p><p>修改文章特色图见front_matter</p><h4 id="修改网站相关信息"><a href="#修改网站相关信息" class="headerlink" title="修改网站相关信息"></a>修改网站相关信息</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/ae1941eec39efd37c4da722d0543d9bf.png"></p><pre class="line-numbers language-none"><code class="language-none">#这是根目录下的配置文件信息# Sitetitle: 咕咕星Blog#网站标题subtitle: 世界很暗，但是你来了 #网站副标题description: 本网站是个人兴趣爱好，总结分享经验，记录生活点滴的平台，希望在以后的学习旅途中，走出自己的风景。#网站描述description 主要用于5E0，告诉搜索引擎一个关于您站点的简单描述keywords: [HTML, CSS, JavaScript, JQuery, java, linux等]#网站的关键词。使用半角逗号“，”分隔多个关键词author: 咕咕星#您的名字language: zh-CN#网站使用的语言。建议修改为zh-CNtimezone:#网站时区。Hexo默认使用您电脑的时区。# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;guixinchn&#x2F;image&#x2F;blog&#x2F;favicon.pnglogo: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;guixinchn&#x2F;image&#x2F;blog&#x2F;logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 如果放弃太早，你永远都不知道自己会错过什么。  sub2: 没有伞的孩子必须努力奔跑！  sub3: 花开不是为了花落，而是为了开的更加灿烂。  sub4: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>网站打字效果副标题默认有两个，即 sub1 和 sub2，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在 sub1 和 sub2 后面继续添加即可，然后在去主题目录下的 layout 文件夹下的_partial 文件夹，修改 bg-cover-content.ejs 文件，大约在 12 行左右，如下面所示：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;description center-align&quot;&gt;                &lt;% if (theme.subtitle.enable) &#123; %&gt;                &lt;span id&#x3D;&quot;subtitle&quot;&gt;&lt;&#x2F;span&gt;                &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;typed.js@2.0.11&quot;&gt;&lt;&#x2F;script&gt;                &lt;script&gt;                    var typed &#x3D; new Typed(&quot;#subtitle&quot;, &#123;                        strings: [&#39;&lt;%&#x3D; theme.subtitle.sub1 %&gt;&#39;,   &#39;&lt;%&#x3D; theme.subtitle.sub2 %&gt;&#39;,  &#39;&lt;%&#x3D; theme.subtitle.sub3 %&gt;&#39;,   &#39;&lt;%&#x3D; theme.subtitle.sub4 %&gt;&#39;],                        startDelay: &lt;%&#x3D; theme.subtitle.startDelay %&gt;,                        typeSpeed: &lt;%&#x3D; theme.subtitle.typeSpeed %&gt;,                        loop: &lt;%&#x3D; theme.subtitle.loop %&gt;,                        backSpeed: &lt;%&#x3D; theme.subtitle.backSpeed %&gt;,                        showCursor: &lt;%&#x3D; theme.subtitle.showCursor %&gt;                    &#125;);                &lt;&#x2F;script&gt;                &lt;% &#125; else &#123; %&gt;                    &lt;%&#x3D; config.description %&gt;                &lt;% &#125; %&gt;            &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>社交链接的修改</strong></p><p>在博客主题文件夹的配置文件中修改：</p><pre class="line-numbers language-none"><code class="language-none"># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  qq: 1275017708  weixin: https:&#x2F;&#x2F;gitee.com&#x2F;marmalade0&#x2F;images&#x2F;blob&#x2F;master&#x2F;www.marmalade.vip&#x2F;wechat.jpg  github: #https:&#x2F;&#x2F;github.com&#x2F;junwuqing  email: 1563972718@qq.com  facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  zhihu: # https:&#x2F;&#x2F;www.zhihu.com&#x2F;xxx  csdn: https:&#x2F;&#x2F;blog.csdn.net&#x2F;kuashijidexibao  cnblogs: https:&#x2F;&#x2F;www.cnblogs.com&#x2F;kuashijidexibao  rss: true # true、false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>期中的 weixin 我是用的图片链接，会跳转到一个新的标签页，之后还需要修改 ejs 文件，文件在主题目录下的 layout 文件夹下的_partial 文件夹，修改 social-link.ejs，添加相关的配置，比如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.github) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.github %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.email) &#123; %&gt;    &lt;a href&#x3D;&quot;mailto:&lt;%&#x3D; theme.socialLink.email %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;邮件联系我&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fas fa-envelope-open&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.facebook) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.facebook %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的Facebook: &lt;%&#x3D; theme.socialLink.facebook %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-facebook-f&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.twitter) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.twitter %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的Twitter: &lt;%&#x3D; theme.socialLink.twitter %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-twitter&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.qq) &#123; %&gt;    &lt;a href&#x3D;&quot;tencent:&#x2F;&#x2F;AddContact&#x2F;?fromId&#x3D;50&amp;fromSubId&#x3D;1&amp;subcmd&#x3D;all&amp;uin&#x3D;&lt;%&#x3D; theme.socialLink.qq %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;QQ联系我: &lt;%&#x3D; theme.socialLink.qq %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-qq&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.weibo) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.weibo %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的微博: &lt;%&#x3D; theme.socialLink.weibo %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-weibo&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.zhihu) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.zhihu %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的知乎: &lt;%&#x3D; theme.socialLink.zhihu %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-zhihu1&quot;&gt;知&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.rss) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%- url_for(&#39;&#x2F;atom.xml&#39;) %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;RSS 订阅&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fas fa-rss&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.jianshu) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.jianshu %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的简书: &lt;%&#x3D; theme.socialLink.jianshu %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-jianshu&quot;&gt;简&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.csdn) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的CSDN: &lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-csdn&quot;&gt;C&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.juejin) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.juejin %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的掘金: &lt;%&#x3D; theme.socialLink.juejin %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-juejin&quot;&gt;掘&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.cnblogs) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.cnblogs %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的博客园: &lt;%&#x3D; theme.socialLink.cnblogs %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-juejin&quot;&gt;博&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.weixin) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.weixin %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;微信联系我: &lt;%&#x3D; theme.socialLink.weixin %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-weixin&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他一些个性DIY"><a href="#其他一些个性DIY" class="headerlink" title="其他一些个性DIY"></a>其他一些个性DIY</h3><h4 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/852e0a0f925f350540a3edcf0db0e2f1.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcb8a9deebfa0f8eb9641daab4746530.png"></p><p>实现方法，引入 js 文件，在主题文件下的 /source/js/ 下新建 FunnyTitle.js，增加以下代码：</p><pre class="line-numbers language-none"><code class="language-none">var OriginTitle &#x3D; document.title;var titleTime;document.addEventListener(&#39;visibilitychange&#39;, function () &#123;    if (document.hidden) &#123;        $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;guixinchn&#x2F;image&#x2F;blog&#x2F;favicon.png&quot;);        document.title &#x3D; &#39;我相信你还会回来的！&#39;;        clearTimeout(titleTime);    &#125;    else &#123;        $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;guixinchn&#x2F;image&#x2F;blog&#x2F;favicon.png&quot;);        document.title &#x3D; &#39;哈哈，我就知道！&#39; + OriginTitle;        titleTime &#x3D; setTimeout(function () &#123;            document.title &#x3D; OriginTitle;        &#125;, 2000);    &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在添加到 博客文件夹/themes/matery/layout/layout.ejs 引入</p><h4 id="关于我页面添加个人简历"><a href="#关于我页面添加个人简历" class="headerlink" title="关于我页面添加个人简历"></a>关于我页面添加个人简历</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/ace8ee988a7e65ac74e6c42a3cebc707.png"></p><p>打开 博客文件夹/theme/matery/layout/about.ejs 文件，大约在 13 行。有一个 `` 标签，找出其对应结尾的标签，大约在 61 行左右，然后在新增如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;card&quot;&gt;     &lt;div class&#x3D;&quot;card-content&quot;&gt;         &lt;div class&#x3D;&quot;card-content article-card-content&quot;&gt;             &lt;div class&#x3D;&quot;title center-align&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;                 &lt;i class&#x3D;&quot;fa fa-address-book&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;个人简历&#39;) %&gt;              &lt;&#x2F;div&gt;                 &lt;div id&#x3D;&quot;articleContent&quot; data-aos&#x3D;&quot;fade-up&quot;&gt;                     &lt;%- page.content %&gt;                 &lt;&#x2F;div&gt;           &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/7024e13cb618b1c4f5e84d5e24752a4c.png"></p><p>可以在about页面自定义内容</p><h3 id="修改网站背景图"><a href="#修改网站背景图" class="headerlink" title="修改网站背景图"></a>修改网站背景图</h3><p>主题配置文件</p><pre class="line-numbers language-none"><code class="language-none">background:  enable: true  url: &quot;https:&#x2F;&#x2F;gitee.com&#x2F;marmalade0&#x2F;images&#x2F;blob&#x2F;master&#x2F;www.marmalade.vip&#x2F;24.jpg&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="valine评论模块配置"><a href="#valine评论模块配置" class="headerlink" title="valine评论模块配置"></a>valine评论模块配置</h3><p>主题配置文件找到valine部分，按以下要求配置：</p><p>其中appId与appKey需要到找valine专门设置</p><pre class="line-numbers language-none"><code class="language-none">valine:  enable: true  appId: xxxxxxxx # Your leancloud application appid# 将应用key的App ID设置在这里  appKey: xxxxxxx # Your leancloud application appkey# 将应用key的App Key设置在这里  notify: true # Mail notifier邮箱通知 , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki，默认为false  verify: true # Verification code验证码 默认为false  avatar: &#39;mm&#39; # Gravatar style : mm&#x2F;identicon&#x2F;monsterid&#x2F;wavatar&#x2F;retro&#x2F;hide  placeholder: 想说点啥？Just go go ^_^ # Comment box placeholder# 初始化评论显示，根据自己修改，这里默认  background: &#x2F;medias&#x2F;comment_bg.png  guest_info: nick,mail,link # Custom comment header# 自定义评论标题  pageSize: 10 # Pagination size# 分页大小，10页就自动分页  language: zh-cn # Language, available values: en, zh-cn  visitor: true # Article reading statistic# 是否允许游客评论 ，进入官网查看设置：https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.html  comment_count: true # If false, comment count will only be displayed in post page, not in home page  recordIP: false # Whether to record the commenter IP  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)  #post_meta_order: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="看板娘模块的安装和使用"><a href="#看板娘模块的安装和使用" class="headerlink" title="看板娘模块的安装和使用"></a>看板娘模块的安装和使用</h3><p>模块安装：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要在博客文件下打开Git Bash Here来进行：cnpm install --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完成后，可以在博客文件夹/node_modules文件夹中找到自己安装的插件。</p><p>然后下载你想要的看板娘模块（可以自己到网上找哪个合心意的），执行命令：</p><pre class="line-numbers language-none"><code class="language-none">cnpm install &#123;packagename&#125;# 例如cnpm install live2d-widget-model-haru<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完成后，回到博客根目录下配置_config.yml，添加以下代码（model要根据自己情况设置）：</p><pre class="line-numbers language-none"><code class="language-none">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw&#x2F;  pluginJsPath: lib&#x2F;  pluginModelPath: assets&#x2F;  tagMode: false  debug: false  model:    use: live2d-widget-model-z16  display:    position: right    width: 200    height: 400  mobile:    show: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在右下角有看板娘啦！</p><h3 id="添加页面樱花飘落动效"><a href="#添加页面樱花飘落动效" class="headerlink" title="添加页面樱花飘落动效"></a>添加页面樱花飘落动效</h3><p>在 <code>/themes/matery/source/js</code> 新建文件 <code>sakura.js</code>，并添加如下代码</p><pre class="line-numbers language-none"><code class="language-none">var stop, staticx;var img &#x3D; new Image();img.src &#x3D; &quot;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAAUgAAAEwCAYAAADVZeifAAAACXBIWXMAAACYAAAAmAGiyIKYAAAHG2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDIgNzkuMTYwOTI0LCAyMDE3LzA3LzEzLTAxOjA2OjM5ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXBSaWdodHM9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9yaWdodHMvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcFJpZ2h0czpNYXJrZWQ9IkZhbHNlIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NDFDMjQxQjYyNjIwNjgxMTgwODNEMjE2MDAzOTU1NDQiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDozNDVjOWViOC04NDc4LTFkNDctOGRjMi0yZDkyOGNhYTYxZWQiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6YjAzN2ZiMGItNTU5Mi0xYjRkLWJjZGQtOWU4NGExMDJiMGM2IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDQyAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDE4LTA1LTA5VDE0OjQ5OjM3KzA4OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAxOC0wNS0wOVQxNDo1MToyNSswODowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAxOC0wNS0wOVQxNDo1MToyNSswODowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjEyMjVlZWE3LTEyY2QtMTY0NC04ZDAzLWFjOTE2ZTAxZDQ1YyIgc3RSZWY6ZG9jdW1lbnRJRD0idXVpZDoxRDIwNUFGNjZCRDlFNTExOUM5REMwMzg2RjlEQjFGNyIvPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphYmMzNjIzMy1hOWNkLWNiNDQtODViYi0zZTgyMjEwYmIxMjYiIHN0RXZ0OndoZW49IjIwMTgtMDUtMDlUMTQ6NTE6MjUrMDg6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE4IChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YjAzN2ZiMGItNTU5Mi0xYjRkLWJjZGQtOWU4NGExMDJiMGM2IiBzdEV2dDp3aGVuPSIyMDE4LTA1LTA5VDE0OjUxOjI1KzA4OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOCAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+XCpBoAAApBxJREFUeNrs&#x2F;cmSI8u2LIipLnMHosnc59Z7jyxhjSg1oggn&#x2F;EWO+SP8B34JhRyWCItk1at7786MBnBbWoNlZm4OOLrIvc8+t45bCjIQjibQuKuvTlUpCdva1ra2ta3zZdtHsK1tbWtbG0Bua1vb2tYGkNva1ra2tQHktra1rW1tALmtbW1rWxtAbmtb29rWBpDb2ta2trUB5La2ta1tbQC5rW1ta1sbQG5rW9va1gaQ29rWtra1AeS2trWtbW1rA8htbWtb29oAclvb2ta2NoDc1ra2ta0NILe1rW1tawPIbW1rW9vaAHJb29rWtjaA3Na2trWtDSC3ta1tbWsDyG1ta1vb2gByW9va1rY2gNzWtra1rW1tALmtbW1rWxtAbmtb29rWBpDb2ta2trUB5La2ta1tbQC5rW1ta1sbQG5rW9va1gaQ29rWtra1AeS2trWtbW0Aua1tbWtbG0Bua1vb2tY&#x2F;3xr+o7+Bf&#x2F;2&#x2F;&#x2F;z&#x2F;+1OfPAIgJErGbMj7M8fue+O1A7LLjcxyw+5hwZMbgQnLgKIftRsgMyYUjBYNhOn6AADiMOGDCyIQBCflwwNEdw24HHA5AzhjHJxyQwZTADLgmHJPhDRnfjo6PlPHbNOJDGZgEZsIgOAHPR&#x2F;yPwxv+28MONOBghIEAiXce8LkzuAG&#x2F;vRP7o+EzAcMRyNlxoJByxj4T&#x2F;8su4+UgPE3A++jg5yfe&#x2F;lvD73&#x2F;b4eVfM17&#x2F;zfE&#x2F;&#x2F;y3h6UjsJ8f&#x2F;9N8m&#x2F;Of&#x2F;Cnz&#x2F;d0cegHES&#x2F;t&#x2F;&#x2F;&#x2F;Q7HHfG&#x2F;+&#x2F;8JT0fABGQTzIEkYMyGf&#x2F;0vBh8N3&#x2F;99wv&#x2F;rP&#x2F;1&#x2F;sDs6&#x2F;i&#x2F;&#x2F;+t8DZhCATOFwzPj4&#x2F;R3&#x2F;MhkOmPBz&#x2F;47dB+CY8LZ&#x2F;w&#x2F;NnQh4cu88dppSRU4abQwbQCRPhdDx&#x2F;PCGbI9f7JLXbRfHpYw+n4MOkPAAUSacBmfv30f&#x2F;rf+f+8m+GpyPw8Zrhl0IMAmK5KgAOWCY4Ib6r8pO+&#x2F;hiV&#x2F;5c&#x2F;LyyVe6g8TnH5P&#x2F;3f&#x2F;q8bwv2zA+TfZ7HtvKbY4ScCOxCU4EaYE04hxb0hOYgEATAJTsGYkP2IQQBocAkkAGMBQcdgA47HA3aMg0cQkhmOGRhEZAMoIpdDhiREQYzXJQBDSQwygFGLdwET2&#x2F;3c2luLx9fXzjhKk4hs8QTmsd2OAiHkIR4wZmFKxNMRGI7C5xPxt3+Lv+0GvL47&#x2F;r&#x2F;fBgBCJpAcYPwVAICbsPsE&#x2F;v0VSJl49if8+&#x2F;C&#x2F;IEMwCIQBcCQLUBeBlOOFi4K5wanyGcgAiPEe5XSApInJsllCQkAVQNFStpTcUjoakxtNZqJIwtIx2XigpUyaG2xSdvPj9&#x2F;+aPy3zoORuorKVD7OCoZfLxAUgMhegrEBYf1p8x2pYdxUKITVEXIBhewFit21bG0D+HWoQDgJwiERSAF622CFNgpsh5YypHPck4S7YEEcjQQhAsoRj&#x2F;ixARHiBOVpAhsthNkCKPZwCvNvTB1Ugi7&#x2F;dnpunr9mQYJjoGGWLOooVUAcDbAWV6CleN9sxJwzOeE&#x2F;lczgakQ4OkzCNhBuwOwo&#x2F;n+M+u4Pwsbd4dQLciJefwvR&#x2F;CLDsgyWVP+SMxx0HgSCe8h7&#x2F;037CwY7YY1cPeyQzwAxe3j9FeBKSwOf3p7Q7cuQ7d0oYCbPkifvDnqaULNvOhAE0c7p2ACEbTBwIjhCMYIJhAJggWICsMuQTnEdCB7m&#x2F;7f6rv2XLb2781ITP6bdpSgcrgNhFhTqJChnv9eGosILijKAnCIvlxQsQbwC5AeTfM4IkACdhHtHUlBTxjYSjEYMATxHGEQyQK5GFlZ3daOWsLxgjyiphYAMVJIv9XsIC9xgHg4HIDFBzUxyM5QCUShxBYifDwYSXErlkCkmEkaAcEDFRERUKmCxA0ARMiIN5EHBIcT2JkapPgmVhShHRjZOQU5xExqPw43uNQCOqffp0iEAegDShe9Nz4DUcK6Aa9nmACLylT+ynXYlwC4CbYWLGHoTJzFxj8rTfH8ZnE14pfqP4Ctke0EBoEG0gMJLcK3J2Lx9XIrFz2kjBIhSvpx9NgI6QPgR&#x2F;B&#x2F;Qu6YNIo8kHTpYcU0IWcRw+NJ9HIoAjIAroTja&#x2F;FhWeRIblUoGQHShSZV9J3A7bDSD&#x2F;jil2xHQgiOTCNJRoToISW9rYsi2tnMZZ7ieHwSINhSJyYyBc7N8J7hmkAS7IAhgFYRRxNGFww2SOEQm5&#x2F;e2IVZ3AToY3HiEMEfGWtJkIQGRJgfsIEuU1wAzKGUmEM0oHgwMYo3aWJuG4B3IidlNJlQnYFJ&#x2F;JNMxvfXcUxqNw2AHjJxalgPbpuDAchePOsJsGJAz4Mb7jPx2&#x2F;zyUAAPsUibbD0+v77nlwvEJ4pfEbHN9o9h20AEnoWcQe5FgvRrIU6wSjCRzNbIRAQBmug9wPcv+A9A66RR4vp7vk7hIyQTc3pckwCjo+C26atIj3r4PhalSIdSBswFeAsAEiojyjRGAgfGQ5LRBRTdjWBpB&#x2F;F2ic910i9r1oHnQ1vpoml9splFSZ7XkC&#x2F;AxZ7V5wCAMY4ZviEDMLgByGVEDTYSQkxyji04BnByY49khz8bBEgBkBkP9ucSBaV9+K9DRenxuQLeqC9TnqfZ3AWHJit7IBBmYgHQU8AXkE+AGYRxS5c4AufO6Ap&#x2F;d4CB14+hA+98Tr74LXskWLeuNV7Y7A5154+knsfI8fw0d&#x2F;WjIAw+uwG7lLT7T8QscLhb8B&#x2F;AbxVcI30r6J&#x2F;E7yReArpReSexhHGEeAVivEIBNrBUWYIP&#x2F;UlN&#x2F;o&#x2F;i53wN3hzHBM5UWCJheY4cwwy0lJOEKi++dTdqUOIS80TuZwv1z3C1FhD4g1KjQ0AFyAoZWovfyhRYq&#x2F;rQ0g&#x2F;z4gyZq&#x2F;IpXTfyYxOqJpYRGZycqODUDuYBoiNS6NmkSDKyOVWqXkAIeIIl1wd1hKyIdPjGNt1EQEeSwR5E8DkgyfzC2lriktSp1y5ylSWyqaQl2xoDaacgHI9h47gFRJ+02R0gNAAiEwABJAHuMPDpOQzcBJSBn4fDK8&#x2F;MzwFK&#x2F;l5V34t78ZYHMzCTWYKwXO3Qfw&#x2F;h349jux0w7&#x2F;y+7f4HASHEzpaWB64WivML0y41mO7yC+B0DiheR3AN9p9h3CK4QXCi8AX5H4DHJHlWoHlAMUNcl1gPs7MsiELKNzQgaZReS4rwQgR9GYmcQEV3bQkTnZu3Y05fyEI7y8rXujQs2NHdQSiUWKrH0PhoASAwgLxrfnyIiGliKjadu3tQHk32upprGtURN1O2SWRg1hU9QFkUsTptQRo&#x2F;tNTCU6nKYJYzl8MoQdAJiBk8PlGC1hUmnBqEal0egZakMFbMEHu2OwrgSDIeqMQ9c3NtROdjwyW3SAWdPs2jcuzzeUjj0AmBMTiXSIDnNOhEod8rADcIiGy&#x2F;ue+M&#x2F;lL7oRr2+O&#x2F;&#x2F;9&#x2F;SS3qHnwZmTuF&#x2F;Yfwb&#x2F;9ZSJ7sv3x8p&#x2F;yZlnZ7s+HVYP9C2t8A+4aBz3A8EfwO4G8k&#x2F;ybhO8hvAL4B&#x2F;BvEVwLfALwAeIH4VEJ2h3SE6x3SO+QfpFPQEbIRwo6uSWY7yI9AGgmMyvkIcgA50JjgHEEOFAY6Bk5INJl2BubrjRMuosI5Rdae0EmKXKcJILXHm6sBKaVF&#x2F;RGurUGzAeRfC5Nexm&#x2F;MgamOwCgiqADN2qgpoz4EvKS50ahJLXIKkPNlJ7uApTpYLt2Z+LvluKpZcWaN8ro8vkSVgwxHCs9eRnvK7cYAdbQ6ZAC+swSjJYIUHENJ6VVGdI5G2NEjrR5YGjXA23O82vEg&#x2F;PitSzMNeH4XpgRMI8AM7HNL4xlRnWhZ9t&#x2F;9D3gaNDz&#x2F;H&#x2F;&#x2F;tvzxZGp990Ctov8HSfwbtPwH2G42vAJ8B&#x2F;Bbb8DfIvpN4AfgC4hniC4AR4gBglJQgOOSfdP0EPcN9kvMIMtFsiHOBEpgGAiZnYsTAiZCJTIASYANMBnmCmQmeIA12QMInjWU0oQGXz40zJEI7LFPkRMhWokKP&#x2F;SoATw1UI9LUIgI9LQWBceLa1gaQf5dlAHKNwkr9Owk4lu4t5ZBx0XwgCLjXqnzbgdkQyBsaqTRqWhWfAZju5a&#x2F;WbYzu+ABiStGVzgwQy2T721agdSfDkRkx+CNMc5INenRUss3znZlzJ9tLFJmc8DKuZCIwGGzKSEchjwZPMf9Yu7fjUTiOpVFTXs&#x2F;uIPvb756ePmT7AwgyARgH8WV0vg6y1+T2Yjb8liz9N0rDd5l9S7TfSuT4n0H7TzT7DeQLYDsAz2B6BflMYF&#x2F;qi0NpeZeOdE1bBbgTriTCYJYAGKUksv6eKCVQJiiRGkQNoCUQA+GDkBLgAwYlMg0gkkEDMAwpY0xHHc2RwZPGyVh+TwgwPI0Kc9lHSorMRdSpeZi8gqHmUiYsTlK5wLkb4WkDyA0g&#x2F;6JKpJMYSif7EzO4tC5wqQVaS7GWjRqQIC1mHjG0TraBoAWo9o0aszEaNXUApetk77Ih07HDUEqkpQ1T7r9TwrtN8KlEjCxRbN+oKSMp9HJQ1eiSbI0aMUoHqZQOWDrZ2gF5IMZPlXonbJxg338XRRikJHBH4uX&#x2F;&#x2F;P&#x2F;ML0jpGbRXks8mfjOkvxntO5L9zWz4jTb8N0zpPyGlb6Q9C&#x2F;YK8jst&#x2F;Q3kd4A7gClCdMb+a8b5xNNNcdaB+DZuVUYFDAMcCcYBsARggDSUKsYAVyIxKvuRRESgwAhwonGQ5QGZOwAThR2TJhsxjsDgUx4+&#x2F;xs7+rNpngo4AcNpJSos6fHNqLAAbE4xUuY2&#x2F;+zvvKXZG0D+5SuVs&#x2F;rMDomzd40ya51IcsASpEIFhJCY4HKk0qxwCKmM4sEFV4z6ZJ+Q0q7UIR1GQ9aEQYZPAs9u+BimBYbXCHIisHNDLiwTw3mjxrpO9pBxdlT27JpMRK1UMaRtk0MJOOwN40e2&#x2F;&#x2F;SveXg62n50e&#x2F;6XH3pS4p4Yni3ba5L9C2m&#x2F;Uek3Mr0AfKHZNzL9C8jfMNg32PAd5DeZ&#x2F;UZL30R7htmOiXvQ9rUBTVr5cNkiqPa61b3D2qwGoUhLCXII0NOoqCPumHiUcwQ0wG1E0g7EBGCMuiMGug2QBrmPzDiIHAAMoAYyJQMSpGEEh4MVNmUuJZK+cdJHhX2N8hQMLU5W2UpU2IGhuomFuRYJMKul3zWT2dYGkH&#x2F;n+LFSDlm6hsJkjPGW0pCwfEo5VJthrBGb0TB5xoCumUMAaaYcjmnAYTqU7nZEmQMNDmAsqbFhnXJYj46xDMNlRM0UXce6drLFZSe7giJKpgpUiuPcyXYDhk&#x2F;x+aenl5++e&#x2F;7g0+j2bEzfEu03o73S+ULwBbDvNPsbLf2NKX2D2Uu5vIL2HcbfmIZvMPuGZM8wvsDsqTRFDMlIszLmwnlWc65ZtGHyGh&#x2F;DS4W2lTe8zICnAe4DrKTMZgniyKwjqAGmJNcAq80YT8hIck9wGSkTUjIyRVVYKSJaJINScqTxmBNM2bwUiqUrUWFEhEolRbY5TZZhmSarn4EszRmfh9G9AGpO1kB1WxtA&#x2F;l0B0k872Q5MKcI18wDI4QhMiWXULiiHaEPlbNxqz3OjRpVewplyyDQuKIf9wWU6jfQ0N2G610sQA6JRM2ruZLNUJU872T3l0MrQuiNqnUcDMsRxorl24&#x2F;P&#x2F;7Pv&#x2F;&#x2F;f&#x2F;ozyBeYOnV0vDNLP1Gpt9g9g3kE2ivMH6Dpd8wDL8hpW80vsLsGcZXpHJfS68kn2C2gzHBzFCH560Dxu4zmqPIOts0b2ojRLWhYdZ6IDGFj1ZzFDxF+J4S5ImUyd1gTCUFTyQTzJMcieSAXMBRiQGSyaCo&#x2F;KWjp0xnPVedNk6WtcIZDE+jwqhNFhAsoFgJNW6lLpwMuYIp59Es1Kh1WxtA&#x2F;r1hMvrOAZCpKNO0up&#x2F;ZYgh6QTnEspONQuhgNyvMtoPPB39POWx8aUUkN1mkzo16eEI5FImxNGqoITrPIeew6GT3jZqpNmoATCUqHR1042hmuwTuTXjmgO9M9s2Mr6R9o9k3DMN3JPtOS99APsPSC82+I9lvGNJvsPQdZi+MKDHqkSk9wzjAaCyt&#x2F;Dpu1MqK5Gl42803laICT0QjyvuPOcHCdnJHNGAsmjXuibJSK1WCEF1rIkE00VNoXdAgJgJJ8ZEnSoOSBiolSQNTSiYNhog+RUxrjZOzFPk0KtQ8XF6jQt+xpNlzvVGljlxPoOYqDR6169vaAPLvn2KjU7tx4DCUtFkq2++jHAIGyWFIFyiHgplFo4ZWGjVapxxS2LcBoNJDL42avQw&#x2F;LEMeZYHcQX0cUGyNGpsbNZRcTjBDu72npxeMLzbaa4omyyuZvtHsN5KvoL0i2SstfUeyfynp8zONLyC&#x2F;YUi&#x2F;IdlvTOkVtBeQe5IDzAYYU4sEO3BbhLu12cE5bZ5BspxMvBuuNLaTT2OXKNJsmgFSIpkUnE6L35XgSKIMYoJ8IBlda5bGTulNCxpgliANMB8BO0ApUT6kbImUvX&#x2F;nQgptnmOMhgxPokIZMaWICltkyXlf6zvcdMHc599PwXDLrjeA&#x2F;CtX7SgndTxkYQZPLaXRYh4yaIOlxRCMGnfQUmvUNMqhA64TyqELSoKRIYsm4pPAixsOKeOpoxzWRk1QDhMmO8QsZn2Na5TDMr5EIhk5PCENL459Srvn0exvTOk7LX1jslcwvdL4Cto3pBI9WnSckdJvNLZaI81eo76YvpEstcX409FgYddUWUZXC0mcpuZhC5qINPPHu43dvFUB0FrQcxjkA+QDwSRwgJDgSjAOFEYJRzgToKF0vaPLHcdLuc4EMoE0kAOMiWZmE5MdkXiEcYTbpEXjRIz6YB4rGJ5EhZjrln1UOF&#x2F;O+lEzAHtXm9wCyA0g&#x2F;8pGDYqSD4r02Th1jRpFo6YBkgtMaKl4pRxmTaVRE3VHcACNsCy4hJQGTIcPjIzmjVI0ZhzCrlAOq7pPTzn0bvRo9FSkttY72RBwHIRjgo0TxidPz8PA55TshUwvNHvlkH4zS39DgF13YYhDmH2LdDkAEuQ3kC8lWnyC2UjaGKjcNVWkReS4TJuxLKrWcSl2qKD+ffeqOZ0ihs&#x2F;RKI0xhOU0CKkOiUseMmcOA5noPihAb4CYKCaZDYAKmHpEvuIAs5Hyg8xGmI3GNI5HH3cfPn1KftwRXrQsaxe6jwpbp9sjyrWabnfzszqNCl2LSLQ1fFhS+cEi1t3WBpB&#x2F;9+ixUuhOKYclovREpOM8OmOIiI9cUg5DG&#x2F;LQmimqrBkGBFbKobyqPtY0PFg2qaMcLnDg5LhIMRY+Uw5rdAtgkNnLgUP6tOF5sv3A9C1Z+s3S8MqUXkh7jXqifceQvsMsmixM30C+wvgK8htSeiH5rTRkvpfbngAOJAmjtWix6zjXmmKNaJvAQz803wPpXFxdnrUUz9X6NewjzWXXO05UMsBGSCNcx4gUbQS0g&#x2F;sEcgI5wmyEYwS1I5QV23cwTnBOJOu2PYEsINNsGvKQn96P+Zjgb&#x2F;&#x2F;ZcprYGicBgL6MCCsl9TRF1gyGfVSo0vDRYJGKr4z&#x2F;bGsDyL8kgmxipyVKi8ZGZUIE5TD4yx3l0NXogbVRQ1oLlAgid5TDFg0VdsxMOZxfR22keO2Ol0ZNTzms0dUow4GOZw9Gt4MmID35sN8d+ZxqpJjSb0zjbxxS7TTXkZzfmNJvsPQadcUWQb7C7HvUIUtaXSLGYJ90tUXyvLi4YIYQ6IByrvXqvKjGC8U2dpVilU+tpuOpfFjugJkRGuW+gyHTLUueg96ECVImmSXlKNsyI2jzU8AzXULcJmSILjED5jRNyZV3U&#x2F;KXn9nfPvRBufrGyXpUWHjWJ3xqWVAR887K6A9XGz3WcbzNN7GKDSD&#x2F;Qpis4rlDbdSMNX32og15QjnUFcqhO5g4n&#x2F;g519tUBqPdc6TSRRuyNnJqJzsJmOgYZI1y6F1cupPhwyYgJ9t5SkTaJeNLYnrhzl4taojfYKk0VNILaS8FAF+R7BtS+h6pdNlGey2&#x2F;RzptfCK5g1lapMEATnL7lQinn6w&#x2F;AfhirXAeWhXw8&#x2F;qZnQBph43tk6c3ewtAA4CnUqrNJF1kjujRIoRXqPqAnGBWwNK9gOZUznnRYyMdNAc9w+B0aH9E&#x2F;tu&#x2F;Kr+9+lEzvT5q0bk0V3yuJsRMZKTHbkXG7OQz6wGwB0V2Cj7asusNIP&#x2F;SGiTqzFmk1VWlJmlGBCLP0l41XSwNnBrZWaEcsnwNHkUwGAsYJsHSCeUQYQDmcOwq5XAyTCaMLYWtaucRNO2VeKQncngelJ5pw0tKqTZXXsg5GsQwfGdKtab4DNoLkn2D2d+i3sgy5M3XEjGGlBhhTXGjfUxcDfRaCl3nWQwz0J1OVGu2mJgbTDYDXzoJx9RHp&#x2F;GZN8ohu46GEZANkO9Bc8AzaBOoDMKjIMiQOKsgWPkwpIPI7ScoEi4iB5Aym5lrUt7&#x2F;nqfPQZ6TJssnUWGaxSrWUmSqsLRWokSsRKGN+SRujewNIP8xVqMclpojywFAzLYF9QCt9UMWyqEVyqEtKIcxGM1JrZOd8xEp7Zp1A0lkBaPm3YBnGY6cFplnsXYwN&#x2F;LZx6fvenrGwG9mwWYpIFi6z&#x2F;bCxG+gvZYI8ltJoV9gfIbFSA8s7kOzVwD7Uo9LbXrbeAEI+0YLunpi1502Ow8S+yutR8MFcAo6p6csOj5YgCWWQEkQO6iLBJeXDGACmRURY+hE1u3ABDBqlrIR1A7gRNok00TDbsx+fHrD9Pbd8uGbCcLVFPmeqLAHwrO3j3Ppu21tAPn3jyJLSpQ0Uw73uQjjJoKFctgyJPcYncMsLZaYcPTphHLIpk6e5dilAdPxs1EOM4SRhiOEQdEdPaUcgjAmSwlpN5JPNvAbad9Ya4fkK0qUWBoqLzD7VmqPpRljESEanyP9DjsDGF&#x2F;Aop7DhQrHEhA5lyPmkIjz9M5ippHLuqL6dPvk9xMcpDpFJMxNn&#x2F;aArs6rOvJTRY2NkGigxgB8ZJBHEDuQE8Bo3AQY7kBWwAwbB3CkcZRzB+IIsylE5tNIYGfExGncPR95PE4+fRimlNF8jf6IqLCnltJLXdznz2VbG0D+3VfrZFfRB5872dGoCSOq44Jy6G2HtmLb2iiH5T5tjLu5HAo0a5TDM7DWMtjyoBymIY27RD6b2XMRh&#x2F;ge9D&#x2F;7RvKlpcelpkizVyS8wtIrLH2PWUeWYW97QeJrqHenl7Au6LLeKsWGrhlzFsydjuU02t9y8PviGel2e7Y1d7qm1VyILN+DV0Xuyl2y+DKlAbCR9AFmO8EngCMzR1kBQnEEeJRspDTCtFPSERk7Jkwi9nTPgE&#x2F;FnWeitMPAPDqm17fJkVxTQvC0L0WF5ReufA5trLOPOisYllFPT8S027jYG0D+hRFk7UnX6mFSiOdWl8PJUjBeOINH72zXLLZoHeT2CuE8mRMMgOUJIFXKYTYVN0Ifnrh&#x2F;5pBezNIrYw7xpUSKdfzmhbRvAF9h+AZLLzP9j9+Q0jekcjvtOSJIfgP4XCInsAcq8nK9se9anwAie5Ds0+&#x2F;TGuXiOVdS9v6uNtcYAwwLCFbZotoeVjdyZARgpuwjyD2gieSoKB9kyjKArLBoyCHxWy5uOWZ2zEuLusSGWWB8KXSHAb4&#x2F;mPBD+v27Phor9EpU2INhBULT&#x2F;Bm7ET6iSfp6whmne1sbQP5lKXbTdsRMOawuh30kdY&#x2F;LoVpbZ6Yc1vk+L3ax7jlYN61+WcRzRXyY8zXvxmEYnxKGV6bgPAP2EmISjHojUBkwpdGCOvQdQ93G11DcwbfClnkR8EyzZwCpAZCwmk7fcWa5L2rsgXIBnKdpNpflxh5IF4SbWUC2DlbLrEz1lNCLGmC2j06ZZkNqoa8IYhYYK3VKQTPfvmj4EIGMQax2Mnki8+5Af&#x2F;7wfNj7wa14KXaZQANC74oTVgBwDBEUH9CJU8yPpUfcSg9bXubtWN0A8q9OtcNhCUlx1OXSlGlJX601VkrfCeXQgRn8aAvKIYvFgmvuZI&#x2F;DALqCUUMiy&#x2F;HkRgC7JxueacMrWSLASKVfCLwUEPxeosbCcLHXoqzzjU2CLH6PemM0aEjuEPqHJ5HahaLgSTFiFehqHH62eQU8yfWI8fLZa&#x2F;X5iE4+7EShe+Z7awQoSF7a3oI89HRi3CdH8E8HmNs2WgYxgdrDFHOVhuICzgnME4H9IOSnT005MWvQlKYKvWWkp6j0TEPRgExdQ6ebHaMDqdIKs5rqz2nJZVsbQP7ljRp0LoFT8WcxlEaNF23Iely7Qna&#x2F;iUlUvvU55TDm9RS86zRgmt6DEyNvquAC0rNsHDi8KKUXtHlG+4ZQ2SlyZEV2DGVMJwa7X1qjxkKyDAwhW6SWUu&#x2F;CyuDkzZ+2y09T7AZyXZTG7raODdNG4XtBitOU+xqAXsJmXkEKzlqYsBApDqYTCShSbbMM+QSzHeWThGPpWGcQI2g70CeQR5K7YNRogjiCGgnsREwghpmVo3Fw2+0&#x2F;NHFPPz7Da91QaaW7XaPJrPaTroUv9ql5Ysdu3w7UDSD&#x2F;ARo1JUK00smuHO1shOXiKV2sCrIcAzsPmEI5nK5RDov9gjT7ljhE0tLTsHsysxdZegHthWTrQkcEaOHqx0inafY9utB8IdMrUv97F0HGY8e+C3yxccKVSG8BZNbV&#x2F;dCJTixT7kXz5ioYnozqXIs411g4beZydu&#x2F;pRTMQJcORKHVIcoK4I3UUORGYRI4gpnafUIkbFaLrE4gjYBOJUcQuuuOaSB5Ndtxljdkx&#x2F;XiVW52uLN40lmd1cKtakDinIZ6CIRfSaZw52tvaAPKvadQAPeWQjqa6bRKOZhgVZl81nawmXrXmGOm01ZnFmG9slMMyDK04gIOAEY8fPA1DGp4xpG9geo5h79qd5rfSkAnQrCl2cKWDAYMuqmSpSSa+lLnIpwhh1wDn2jYsGttL5e9+5OYEKC81b26B5KXXsjA&#x2F;6wbDy3fULILMolzRasZR02AEvSlAkVMBvSOAEcQYGj3sxoBahLiDFCNAsB2gwtu2oCiaRkA7unKk2j69f&#x2F;rEo2T5clS4PA9xtlhozZslGHpRIs+77TjdAPIvhsnwoTEM7kgSDmVqBPKmvFNtEFpXeiYglqeZgbBu9drAqdqQlXKYM4dhGJiGZ6ThG9MQqTLw2mqIQKH&#x2F;pVdCRZiWryC+weqYj9VI8VsnYPuKiJjGRbh1Jz4uDmNqCZK6kvOuNG&#x2F;OQPJiyn3ltdWZSz9piplDnfBDWFUUcKwkd6cBGIE6D1l+kkeA8zbDEc49SC8d7glmR7jvC1jGdsOEzBxtlJwJ5HGCf&#x2F;s3Tp9ppiGupchtTrIAYT84HgrlgO&#x2F;QLBrax7YVIjeA&#x2F;MtrkF0SlzyuT12jpkrg991GnVAORcDKrGOl0Dm8MWrC5RBIw2gwjmm3e0EaXsPyFKW22NLpnh&#x2F;9ihpVlq513IbXIlz7isqeIZ9o3M8E8T5BXQO2C+IRutSn0QozRg8UDnUmc3b6Gshz5K6iwejEMNpAO3UuylsRMpBogHEHVaaMjgj2UDBsGj2RXpo3s8BFNHWmMvw6hdhF5XnT4XTA8tM7nvKLNCUdZyAErPiYz4IVRbNzDMk7txNBI3UfE+fHbGsDyH8YxKw87GzAmJeS&#x2F;wvKoQNMbJRDVZdDz0iaxXNHFGUeF9xz2j+&#x2F;7DkML7DU6IEgvoP2CvC5a768wvgbwDnt7uuLxhgIJ56RUhkI53DWjOkaKOuh2uXq7Hz1iv9oHyZWoLKV5s1a9ElejmJ5GuWrWGRrZtAUqbgFolQQrq8h1G1HsIBidKy9ux68a1dwtWdwzIXYlGH0xuUuEmmwlAFOnPLOsk37g46UT5aL9m+JCqN5M4&#x2F;znEaFvTf2ormDUoPcIsgNIP8hokiiyEfkuVGTo5OtRNh0QjksNgs95dBgOGqmHNYok8k4piGNaffEIYU2YwhEvBZ&#x2F;6W9zlMiQJwNLBGnfQMQ22jPIb0ypmGgFU4ZRb9xdjgZXLFV5IfVt7L5LIzxYkaY5AUlcS+d5IejklUbOaWNmQVcJ&#x2F;ndhOHXacUFBdAPoBtoOVqTOqAKMjPEdZybtKPqudLOjgSMbI&#x2F;G1ifQRxCgxapXhwR12ssQ4HDlOxun9VUesRYX9V2KnJwGe8LUFTw4fHJ62Ls0GkH&#x2F;xuko5LC6HScCxWTkXymE5SGfKYSqUQzTKoQAmS6Ol4cnSEGM4xm8QX4uvdIkWESk2AijJ2pCxlmaTpcaYwiYhHmv7JiPUj+rwJBLkJYZMB0Z+oeh1rX64FkneYh1eUgVae23dnUktM&#x2F;MEMBtkRYzYS0Rpc&#x2F;rPVIRFpKRozIwkByQOoQKkncyOSBopHlWoiNHZxgjwACAFKGIs9d0MsyPkExIzpMnc9uNR+Z3KVDHOxAkrBh3rprxEN4cPOQCxgqI5VBwqt7UB5F8eQVbKocpIT4BhoRy645gGjNVfmlpoQ85DJmod61nFkUZyZ2l8YhpeYYVPXaJFNh41OhC0l07l+3uxO4gh8Jpip3AgLAerLWt8p9YHvCOFxUK&#x2F;sfeROcNE&#x2F;YlfxAIQT8d65hdXbW6logvpAOhBpIkRn&#x2F;iubCZ8SiRlIwyjpFAYN02QTRCiW610hLiDFOmzsBMsQ17qjZhozIJN8LyL+iUUabjnQZaf35Q&#x2F;XvUZNPK5BinTDIJddOjmjcpawkeYE2lKSNmQctoO0g0g&#x2F;&#x2F;oUu8magUgufFaXQyxrQ+oyO501GaJjrXAZtKe026dhfMUwvIDptYsOq5rOa6UPkqWDDb5Eio0XgK80fgfTS5Esey2jQK+IjqytR3q4PHR9rdzYOtUn4KhL5lFdmn2JSrhIv3kHOHYAeVKTa7NYrnn+0dTKruEu2LhN85sTUeZ+UmvYBKI6pEwhS6UWaa66Pc50RY08OtlBIqSKOvnMxAndJ+T9IU3TPk+fTz7l8bgAxUVUWJg35gZza2AYF2sSaNvaAPIfDC1nl8PcXA6FUNPyNlAemKBqP9odlobJJ9sPL3sbdt8xDNFpZhn2BkrXGt&#x2F;mSBKRTgNl3KfYrLINfL8Go4ZhhQDu7qJYPCJ4cDev+s7nuxXFrgnytlopz9N&#x2F;aT5bEUAimHMrj7S&#x2F;Ue7DaqpVO9tWJ&#x2F;stIkSVOmTxD8SsQp5BTbWjXTrWRR4t5iIJTTI7AspwTlDVkfRxEHYvH3b8&#x2F;PbpP&#x2F;&#x2F;24Smz2MTaIipM2WCeELfPJYaqi6lSQyU3Js0GkP8gUWQ9GBvlMAG7Y2nUcHY5TPVYlYNIRcNHcDjHYZfM0pMNu1em4RuQvgF4IYpeIxAdaFhEiOQrYK+lKfNalL1fmSK1jm53BUd7KjJlt6PC0&#x2F;usCVGcguKicX1aT7wkNtEB1K0Zx9XIdm2SWkuwXESf9W&#x2F;5PPKjlaiVWvjoFM1IIIulNDGRnBRd6bEoHO1ozPI2EjQWDvskaRfzkxoBG2m+A+woaAyQ1L4qmSdhennf+TTiMOSkNFmLFNE1Ymrnmtap02MDxQ0g&#x2F;wHXrMVYhFClMOwCYS54MlhxOURxOcwusKj&#x2F;JIHZOI7j&#x2F;gnD+NpYL80Eq7BegjIY+o1FiKIo8lR71dqMCRuEVLQcgeewL30AHO850IRVIIxSAWbb1VvqPfdEoLzyurjyuk&#x2F;GgNqoUKcRWcewUJoz9Jmb3eYnuYxKCaSgH2Iq4rpTaL+HwjiJ4GQXaTQVNXJAuejdldS6EAhpcRYtRWk69fJjh&#x2F;Ew6v3Fj2U4do4KEeImVUVq&#x2F;QvhSclhWxtA&#x2F;oURZNOGZIx5mxcwLLWtnIjxEATdefylb9SkYbd7Kt4v6SXmF&#x2F;FcGDABkORzEY94otkTyKcSMbYLw02w3GbxO7CH2XBTBecRYDytPV7CO115XKvx6f5UfK0Jsxjb6cDx7KEl6gqD8Koc0qjYdQ4ovpvz+ZpOAZMQRgjPBCXWVgpV&#x2F;gjn1L4PaRWhKFQKoYlMZZzLqRD0cKeihjhm+XGStOPxelTIJpnXAPehesa2NoD8O8BkjUas1CEnq6M&#x2F;wpGz3L&#x2F;OFBmQOKQnDOMzhCeATySfQAS4oV7nHrQnxvYKkPvycwZN4xOMzzTW+4wXI8YzrcV7osaTIfCT6FG6cL9rKfc5nK2MDHH9PRjvfOm9M4SKnWy4UM7q5mi2XI1N0&#x2F;4O+lpkgrAvJkNFOBcOMxQdSQ&#x2F;JTjljLAGKAcYio1Z&#x2F;0ilJpEOMmiTcQU6JmJ4n5o8xu6g8fwbF5eK0KYXzkQFtEeQGkP9INci6i6aCG9mAsUnrn1AOBcidwzDuOe6foPwE8Bmw8jOiRViAJsBnEjVafAIQ95nB8gnWRZSw5wBVcE2k9zoonk6F6xzoFpHfnbJkZ2bQddDpWk59X6Tb61JcfHg&#x2F;62mITlpPOaxeNdWeQZ2orrMMlQcmKhwc90ghmkshy92RKmumMGrkEySnNAEaIeygdJS0AzxHJ5zHYOxwB6RQ&#x2F;Uk8DoZx0DRNzA4mXYoKtdgHefVr2dYGkH8tWrLrZBeAJBQuh4U1MzqQzEhLe9rwBOkJwhNoBfgUUWMAYWyjngtQ7su2JxBPjIhxD+Kp+FI&#x2F;wdI+6HEFfR4p3J+msTrpYtwY2VlV4lmjFN5VCL0PHMmVSPNarVKlzGEsNgy589U+oRuiu94MvwofUCKdOxknJAsZNGmibFRSKP84dtGx1g7QEdIEYEdogjBJOsIVohhmpeONEQyfmx0sS8c8UVMnhHceHZ7Ul0UCmyfNBpD&#x2F;eFFk7WTXRk0Rz7WgHGYL+4RkaWTa7WGpRIn2BHBPtNR5P6fZ2JWO6K7wgvfRNcUeZjuQeyQr221fHPkSfrWj2RcT9Ug4ogduuqNzdNqEIdfvwJO6JK5Ekb14BZfgR2cwbIQyN1ll0Agli3YMPRRGwpU7xHGFidKk0CuZypjPBCiLHt3qiCqPMWBuE6ESbTK3pg6UBTlhnkTfHZWnYXJPJedfqKDXRlPvrU1shoYbQP5DrUWjxkPZJxo1oTnoyTAegUMyaBjsWWnEYPui2B3gZngqPtO7th0FCAMw42K19lhA0Qpg0vaI+44Pz3vwxhjP4x&#x2F;I1Vrlw6+HNyJHPlBH7SNNI5AtZrl7S9iyrbf3jT5LQBeLwK6QEsE9oMzEo2A7Vt9sY0bmBHkmkVXqklFv9OhsU2WbHJSzno0IIZkAaaDpRaY3TJ9ucNkMiMBS1acGwEmcDb62tQHkXx1BqmvUpFKHPDTKoTAl1mkSM3EH2r6lywX4iC6tZkmnWaLLmGOMNLs1ZSy61i215nOJLtOXQOgWOJ42YLQEPOlK3fIesLr4Oy6o93AdPM&#x2F;ENFaA1oN2qJo+O8NeFyp9EsyptJe5SYtZRJrHXCQtABNMwLAHsoMUphDlgXtUMkXCS2fdPQDQoj2DuJQPrzPPiYF2FWEnH5h8T&#x2F;rbqEOmWn&#x2F;cOjBMiJ+zS&#x2F;hWhNwA8h8sxe4ph+ooh3Wa91nDSKUn0BrYRW3RajpdfscTWNwEaxMm&#x2F;GXKOE9cgmfNSifcL5TA7wXEe1LtVXC8kguf1h9P&#x2F;bFPX9OqVezaS+f1qPEaTbKl1&#x2F;PraWZZsJB2rNlA0eFkituoMEqbtccK&#x2F;yk63gS0K6QpaHAieNBOZJfMm64d4YAcromQwz1LyARzKJBjAjDBUAbQ46fRxh25m3TMWT6NMMw0bJW2uWMqFh0bOG4A+Y8Jlc3EK3bQyYB9Lmf03TBEGpyekCLyK9HiC&#x2F;uZxuIjQ5b7lJlHptLEKVFjzDxiX67vL36XjwDjGUPm&#x2F;gNt0aC59LgL5cPrjZcr4HitVolrf6uOJ6JjzljURtrrLypFVjjZjjbqQ5TRxdo9T6RgI1xOYBI0gtgh40hpJ8dU5idHACPoY2nYjNGw0RDbWTxtNACFpWMYAe6MnF6AacoH&#x2F;7Sjq8WJzfyj+alb+betDSD&#x2F;gaLIGiSx2bzmcsMoJRuG6FqHx&#x2F;QeQp1ZrHXIaNCgNF&#x2F;M9rUpQ2tD37sKiESpTQJj0Nh+sSuzNrt4mlqfDHpLK4+&#x2F;ixlza9ToCqrySgR670fApYDunKYzxnhaYDin2oTHPKOV8aRUHucRFNKYxDQAGEmNiu9lh6yJxhHwSW4jgVHCDtIx5lQ1wRXsHARoAtgXm&#x2F;QJQBYwkbYbwEnK0xEfbkEuREKCgTAWWKRFOcA2gNwA8h9uFRMvX7gccnSOGNK+RHq7SKWxh7iLg0HRfY665J5QgGMZEI&#x2F;HcNcAFK2bXZ+TFwGHJ3XBa3XFS2m0n9NjzqJFfaEBczNy5PUI9FdKCD0tEaUeWecdK+HFBPqsGxnzkQZZGbQxQVMZFzKBwgCkndwnShOYJtAnuU9AyjTV2ccJ0qRo0ITIBZSLj01QEUNQPsMQXW6ji&#x2F;DBzJ+y54Hm7MBQRrgx9jnDNii+AeQ&#x2F;VgRZlRwr5TA5cEwCmEYwBZhJT3O0aE8kS7OmMGWMzzGAXJkxFg2ZiBqfYfZEoDZnngt4jlebFOgpkV9Io3+VR32j5ngznb4FhsbHQbOfyyzAyPJcKu6SoXbGAnzsZiDLeUIxRM5kwc7xQsFh3pE2KTxpJpBOs6yoPZbh8RjnobsQoz+5FDWn+KrowfVGBjGRFkBpdHLIrwccPwb&#x2F;zKlojZ7MqVrYr29rA8h&#x2F;pBX5mpMYSh1yhCUbUpl3tKdCHXwGbE+zfakxPjcWTEodMNY6oz0h8Zm0+b7RvHmOOtVpGZRXE1VV0PA75hUvAKBuWbHeDZzCXfOPi0j4D4gmyeUQfN9EKr6vKCK66lPwWoP00GhsdcrUE4VSAn1PegYti8pw7MOIQxPEDCGLmMpw+B4qTRpoV8QsolZp2JE8hlsiM82OSBjT8Lwz&#x2F;8xZ05QU6XUCYcUJc2NibwD5D1uDrCuJ6bc87Gcwq6wYhsJOFaGoTZiIEJ9BvsR1vlZzLsaIT+lWl851FPQXbBleAged9DUvpcXSn&#x2F;8p3RMxPqrecylKvHeUqXc3NBYaYh+SYaZJ1qaNGaDcGY7NlgiiDTGwr0ziKCuRI0LlB9KR4C5Sa2RJRxA7gsX3JgbNy8B51CeNGYk7GDOGNO0nTfspTMSKTBAiDFULcv+2HZobQP4joqUIe9W4DwFbe4Y6Yy3wmSygSQT4mT0jxTaWn61RY71ARTBuYqRnNq3mIynyqUDF2u8rXtX3l2EvRJe90RTvONvwESfFC6&#x2F;hEkieqpV396vU0LaN8&#x2F;OEgpu6Jk83azlbnoM0KnMEfQKwD+Xx4q0tZbhCNDcEdZ3QMcCwptUMMI1tU6TXlklGqk1mI48ZyO&#x2F;5cOizBj74UW1rA8i&#x2F;WxSplmYPg7E0WIT9TBG0ffhP2x7GPRP3SGkP2B5WWDRmu5kxgx1phWbIXYx9cFd1rXhvSrkGDg&#x2F;nYV9kwdxMq08Ebe8N0&#x2F;mYoMWq4O7C0kHLKLcqkPcMG6F0h1WMvkpXuzZ15s+WHNIAZ4jhSjlSawWLxqIG2eYeiX00aJABHEuDLsNKoyaAMaLICp5mu2Q22dtxIgsNkdVJZwPIDSD&#x2F;QWHSgDSkFNEfuINxT7MdaDskq6M6e7JQDYNPvWNKMzAad4TtQOwa3xqoNMT0JWB8NI3mWp2yalpWa9o7sbM1jHkZ9b4kqvGF2gdPJsd7kKzvuc5F0os1RklcC1cb5mGlES5fpbFTHW87NQ6zEcl3yB4ptWOS5xj1gaLOGJeJqKM+2CG8tUcE72AE609O7THSjsbjmIYj5Idea4PaAHIDyH&#x2F;ICBI2wHahqMOSInMPS&#x2F;saHbLOMtZo0orARAx+72gFOIsoBYAAV+OeKEIUD4Kh1sDxFqjpNNqcQ0498jwXwYz3RYf31BxvDoavxKsNEM&#x2F;rlqTmURmvwGjFilWAF3YNZtpigNMchRYBIIMwyriDa4JppDBA5SdUZlgxgRyg8MsGkOKnxhJRhpd28HkSFD8lDQOYMBWieP06pPVG2rY2gPwLAZID0xApdNrDsGcKYIyOtdWZxT0shWdJ4pw+G4eWRofwRJ193MGwK+A43AuKvxRN9pqPq&#x2F;Pj&#x2F;PMaOuSvF9F4DnoXn&#x2F;I0Cu4iTJKhCVlR1LumjSMUfur8pDSfRBbVAhvoGgAfBA7wAnQqP6kBYgrwU4rvWAlCApliOl2p&#x2F;NUymEQrKrwGJpMmyiep6vVK2PrYG0D+dWDYFeQ1p4+WjCMtjUgWF9oA4xjgZ9XgaYQVsCMHoPwkRgL19qHwqseiCj4ATOCJOu8jlcNTJsw15syqWvgVHvYlZfJTIy3cEQF+iRXz+G1nJdhe7d0Qw9+Nb118bNgJ1KYaPWJm13hRK2&#x2F;lhyInTiQYE91NNKNkCoBLpS5DiEbQQFLu1kqJhEVxWzMwtt9BDoNp+jT&#x2F;OPjSqGxLsjeA&#x2F;ItCxWkAfIwJm927h0iumTGlAWkYkAL0aBxBG2EcCyAmsl5HEUrFDiw83SpQgHJbjHiMxa41PRoU6FKkeEuxZxVBrmznZdsE3hzVeSCVvicNP7mdVx4X5ly87o1TGzRFeYRC4WHrZHCcMQ95irphY2nyGFLkbOBgIK2oYaQicGyAjMYKoFYiyfgJDfU+BVwHGBOGXfJ0mEArehobOG4A+ffAQi41Wi0BBziOuwQfDGkqFLUJhHGHZDukQhlkAb6oHwXgFQHccmmWoQCLKG67rT52BLhjPP7XyLVfzrhOGjN3p7+88Tt+mT5+Czx5x99r7oY1NWi+NCuCwU1jt+hEOtbl1RbMzBBPA0vKzAJ6YJrBjgXwPLaLA6VB7kOAoyLLqD+BYU7R02jD7pjH4VgkNFone1sbQP6xZS9eEK3uliGMPlnECmQkiB1SKkK3KOM5AXyo3OngU4&#x2F;dyM6+AiKJuRaJrvZYQZNXmGPSdSy8Gj1ekDKTfg18O8vXuQTY6UX20mP1g+8z8YfNxPA1K9sSPXZVxw4IOxvbM+&#x2F;sApSmog1ZIshqs7MAyJgcJ5hgSJJGOo6CD6XGOBY7hgG0AEFogDCQHKTSqFFr0ARARkaRICUKw8jBIHn0kTaA3ADyF6PC0+t34UBT6FeR+AM0kLQ0YEi7ovK9Y9QNd4sLuSOxn9PnqsbD9jgQI8wWAEnw60o9a3XDi8PfXALm4ml0OQLVSV5+Zs71B5y57gXpC1Yt7L+8CyB5cUeRgn0IzN40laZoRPBYeuoiAjQbP5qIaNEHuI2UDjAkRmNmiGgSg4SBYhJLFGnZICa6EsTQxJ3rltaiUiE5xAFmyDmMa7VpQm4A+WCK&#x2F;Idkc4rOJeUNA0amMcAxOtBRY8S+ixR3MIvtZmNLrc0GgANrysSqB9jqlQPjerr5JrsDXGu3XRwKPwFFnYeDelS+rOLkNQXwRdj+i8C49hx1XOfK61sC64qxWKs9ls0dSBKaQdDURYroxn2slzwiYEmUQSpjOrWu6AmA0d0AJXoy0Q1uBriF900YLcDNBI&#x2F;naPVLkEZzIWE6HsGNib0B5B8YFX6lIkcBYwYSaGZWO9Q90M21ImAgNLRu9HzbSNYuNUMgFYxmjWEHcQcrvtbXIqCLDZcLmo6n97klcnsRhGrNYaWux2vK4Q8yYK7dfmV+kvfc&#x2F;+SxrWnTK483OmEAYz0zUjOaVnzkqUZmD7gSaR6gFl3qBJcBiapGN9HxNkZDx1TVMQxW5KJsblGrXI+fTAkKVd+tgb0BZPcG&#x2F;s7voA5Q2OQYLaV5DKcAnjCC6tPkWdKs2ioUx0IBT5T2MDyXbVXt5xnEc6k73QRD3QOO9wLrCtjpUpf3KjCuRYg36H+PjOzcy0rUHRRGnYIkTmwjsBCl6BBxlkqrVUyd2EzMNxlESgrZHclAFRsuWknkQ1ySMe6D2sQJDmupenO5LVL0xGFIPljxscWfGyVsALmta2l2MgJmI20oplpVrYcBbGG+9QyEYo9gz6xKPuQLwBfAXsr9Q9ACKD419sx4vuER0NaltHuOYG7XKq+A5EMp96Wi4C997idAJ6yn7F9J17lSp23beSKHdgKcpuUMJbCsSc7fA+GWSJnkBi+D34YEZyJkmoEwle&#x2F;&#x2F;jDnTmjRAbeiUcR8bOOwM8jAP29YGkH8JPgoY05CQdk+0IaTLtJAvewaKbmOA5p5W1Xj4VMy1omFjnJXBg01T2DYcFuhSDzZeBrbFMf4IFXAVYR8tcXwBCPkFIHs0erw3vV7ch3NTB7boSuuEU77obosnNcyz8wVb53nuQg8dGI5lznEGR2ko87ED5P32erFGPwQGmiVNPgnaypAbQP5lywDbFwHbJ0j7rimzbyl1a9hUr+syMA6OIV6BodALB7BrzLDOx50cuZcGtE&#x2F;51l8uHOhO1HxQoeLB2uHN7V9t6twKaO00NT4X0uBC&#x2F;af8Ts5Ne52re&#x2F;cKPyUljrEdMIGNUhiRYwVQ1rlJWLGGteiEy0p3qBhzK81VH4cEunubpNrWBpB&#x2F;fs2x1sRn&#x2F;2VDSkEFlAojJlgysZPTQCaalaYNE2gh+wwayaCRkWUouLgvRWXKVg9jPhjp3dJxvJom8wFQvXHbvdasX603XhCiWE3L7wFldrYUXAHW03lNzEDZmuF9CHmqOVlmuCkyOtp1XKcMjKr8XHzdbShTi9NhdCPLrJkXnrhhom&#x2F;1xw0g&#x2F;xQoLPtVB4ZsvvJRfspAolk545ezeJjKtR29zqhJhBnLfYNeRrGMZ3B+DIJjrQKY&#x2F;Bpj5o8f7tAV7NXt9NpOo7A&#x2F;MJ0mb9+NvBtYr95+OrzOlQ+9NHfOt+NUBINoTyMJjIFa95i3JCGSgYrtxCyYAe5xCoV1NWUS8jKWK8BlFGgubVXIDSB&#x2F;JSyctbhXgFAUvOxh6lhoMXRBErQQFKgRISsoVtCLCFFIhWdbo8WhCBeMUTdSAi0Vb5lyPz02p3Ft0Plsu9aBULeB8XrN8YKT4iPp8D3p9DVg5BfHh8g7ouprn&#x2F;MMknM0WbnoPI9mibC89Fbu5Dw42g2kspyxFyk1SroNwj24CiqD6xIJYcj4k60zNoD8326KjCUYegHDyhI79XCqwNiuG81gg1TmG9l3EzH0Iz8QhmL6XpV5BoEDIzVPqCl4KbwTLFqAN470K6Hi8qYbPtdn2++tN57pg11Opx+NGB+sL&#x2F;KR57p3jrSf1TxLtbl8rtNJgf57WB&#x2F;SVzG&#x2F;nOV2GkUHlPt8ShYgiY3DqFhF7LFPe+IOwxA6P0cD8nFLszeAvJYir0eFqiUbroBff8x3B5PIJmYwZJjYgGyUOHKuPRZJMo6k1WHwrkPJgf2wONBJoDVhitvptc4P8NU5yNUBcF4AO8xNilMwuUgb5IoSz+m2B6M6PQBsuNF3+cqUEU8+5C+m6GcBec+o0QnALd&#x2F;n7DfLk+InSRpNDkIl3fYyLG5R1yYH2n4H7HdhR7utDSAjQ12PCtu5+VJUuJDbZwFPzqDYgSMgmhfmy6z8XJkzvTx+6jrTPasmGjhWbouIMYEYCKujGnb3kXcPg+ZWqtiGn3GiIM4rEavujE7u6SzrHHAeALaH8O+ujjgvn4luTBEsyjenJ63ZZpYldSak+GmVHWOxzRHy5aDRRLkZVIbHi2aajISMoUOJMmAOg5HcDxS5dbE3gIx1HJcp8mlxmheiQnRAqH57N6ZBAKmoSJvLQvCspdKJxjTLWC3GdEpUiQSL+iNtTqeL1NUQ4MiQ14&#x2F;n5FVQPEv3tLR17g&#x2F;GPqpbOYjPUsirh5TuRCWtp6fXRn7uif5Wosi7qYRfHiBf4VaudbYXpmOYudv9&#x2F;qTF37NyojR6EG+KmTUZ0kAsjyNoRnoR5ymm1yajF+YNW&#x2F;sw6pIpmaaJG9dwA8h5t+VJinwSlaxFhOJJSFBEpM0FK&#x2F;oDptn8aKKQHBYAaKns5DHH2BTBm0J4iRyt&#x2F;R56joWvzSJYYZzT686p8CwK5LVj90KD4ZKd66Vo8lFfmVtAdJVeyMfCwXsbMw9NJz0CIPfRLBdNlr5hc16LtK4OWZy2C32QNBiIXFzDWFNoI1yRSjsMFg1Bqj4WRiKBljrtoW1tANkD5bWocN7RKcA8GomnQMgTycIWLAikONCsT5lDXKLWGFvKXRR4qPn2XsgCqhYLJaLkWNRZ&#x2F;rjT&#x2F;urICW&#x2F;PP+pe2s0VsLiHT303mF3zkuHjdcIvf8KXBukxa1+e1mD7z9JOuYow0AymBIGwAoSOUPThDHwwhTQakYSSkgtGIUGWGIrk&#x2F;aiZxQGwoeQGkADyMNxMkXsgbNRZ4YxxIK6DTXIlkDtBA6WhjeXM4DgCGJt0mTQuQJClo92zZsCui91Jml0DKd4ZMX7l2OdKREqe1wm&#x2F;0rj4EhXxzsfoDpDmpajwkVoq7wRPXa5Hxv5pkKWoM2IeFu91Ho0JXsbGWHxoiKo8Ps&#x2F;gAjXKjG2EGcyU86Z5tgFkLLdo+FEFDNEBoS5HhdeODXV1S&#x2F;OJgAXIteaMauQ3G2+BdXsFvXkUqHa40XFv5&#x2F;pjHBiXAO6s06uLL5h9HXIBdDitgy2FFewKcNyTxv5BPOqz90RexMA&#x2F;Bowvdfj5hcc&#x2F;9Ak08kDQCWmwwqxRFwkGOLL9nEE0tVTd0bTtY04SxLSN+WwAWdbT8Twq7Hdd8fZxeP1go4E2AJYgjFKbf0yd5mPqQHFu0MxjPgvQnB&#x2F;TUnTe9QJ1JeO7dbgu5pD14AdxAzOkP&#x2F;6AvJZeX3xdj6TVp&#x2F;Oc94Kj7svAL&#x2F;9ZFuZURH8qHOsZFFmHvsvJrvpWnEvhVtXezuZVBhzp3AByA8go7+jBqPCBIEcAYSmBqZgkoShCl2gxmi61ez2Uxk0vPNHVK2v90cYSPVbHwvRYoKIl6i&#x2F;k9blus3Dtg5BWZiVX&#x2F;rBuRGePguRaNLvaqeb1RtXNCPfRbvUDe8c1kY+T5vb8aTbB21rADAa2Y&#x2F;4ioxvOLpVe&#x2F;7wXX3yVIaLlTTN3A8gvR4VXoKAOkTvisiMY9aLqIseRxgp01dq1gKLNzZdeJTy8sUvE2SLHoUuV+Hj6ttJ51pXHPDIzeZaW4yaQPYota4rjIq+PJf5qTfOPqH8uPi9bfkDsPzeenzSk5dxEhIg1mmQbEq9CAIboXMeJKWYd1aXntTZZapJSMYkQaLOq77b+2QHyUTCsd6+kLqEMl+O81O6CJXBUrTHS0gx0HNFqiJyFTsnOxlPWakPzdjuPDPRARrfWkOHSJfAMYO7kG6&#x2F;1Gppg7B0D6GvVQi6UkC5yp+8Gx2sR62ogrMeemFfS7TUOum7UPU6mCBimg31qXT4dUqYY41EXPc71x46euGDicI5LCZqBoHKeNnTbAPL+qFAnoLh22NTj2CTICIrE1DyNizhplSsDQJiExFm6qqn7FJv5viBfo0VbKPl8hRN3j0DFPbKNq7YC10B2BZTWbBZOwfFugDulOGKdHdlTIi+Bl+6oT34Jmb9Yt7l8X56dmYoMRciZuYAOMpuquc+WOL04iMXsubtv6LYB5BIHBCBzmSpfih+s7VMsx7Ha9O5hHLH7PMIMJlZA88Q4PacuEizyZEyFDdFGNQTYkqfdUqOTbXdENLoNkjc72NeA9e763BdrjJcaLpcYPmtR4d0iu3du&#x2F;MPTdD12xz7gLkXI9rpcVRCX89kr2DSEF7k5XiiJOpMl2++f8wZvG0DiwPuiwqYt1YFhm4sIBYD2oB&#x2F;jC&#x2F;afR+Pk0b1m6DRKlbFQ5xlhbGl3qz+WGqSlpbshRzCUxFl52v1efrXWt5L7drOLPB3z+VLEswaouCNqvAaMV8DxV0aD+IvRIHm5pnpt21dwUme&#x2F;Fi72EiVrs3px0psp3IRbFH1IwJqlrOYsoLowpqZfsa0NIJG7E2kfFTatUVRAzFHJlhpAzjvtfDCYVIWaDY4EFukyVNWdWaWH4A7V55rdIDg4kph9sVGvY8fZ7XBYrQmsAcDpAX1Bv1H3pOE9uko3gOYXOtO883638OxeaiAfiHLXOvlfiW4vPXYxd7oMgVnGcjo6Q1ghigyd8bIne7FwDXL36Q67&#x2F;GvdmE8VDMKWYm8ACQCJpylyiQyltl&#x2F;VfUtLg86L2LH&#x2F;PNBypQpyrBauNNsBCN8Zsxn8gF340mBPYA8rBlzEvt2&#x2F;XcceAay8O51ezEKuN1x0K6I5HeW5ysZZYc18RYX7RmPmLNW8P2e+oXN2B1heGsDnF+rBa6UA6kQhafESy47JdTk6dc2Y5rsQE0FyoRfJbT&#x2F;bexDhkvKWYW8ACWDHY4sKy+n0fjA8jagAOA1Pb5+jkPYweyqgtouLdqAVUNSumHPtYWHa1UWHBTzbTGQqqfUsiXb+p3EzT66jPLpR&#x2F;bo1C4k7WTtfSalv1R1X73sniN2FXbz&#x2F;5hO5u19aC7C7cPJZloytT3xQxyCFogXZCeqqbicj2jx5N2xpE2snG1sXewPISIn95NDnHQWibla3tmbUthHwofKrq64j4&#x2F;cdemZMa7hYKIWH7Fk1dK&#x2F;d6jR3wUHQbrdpz7rJt7UJL+LqqljFhbGgPxg077ZD+EPAsRmAX3+AVj7TSxMBX0fL5d9YNsy4SAeqsk+Z&#x2F;xG7HZlGmLMIWbCNCVVVn8rL6XdgiUyJrfa0rX9ugLwnKqyKugsgXMPMODCsqPDOIraVI1tNucjEBnizswhqx7tuJQkjgyXGfrznygtYi8wYrnUV1E4aCGemh6fNnUuKPmu&#x2F;X&#x2F;0cb0WCvI1n&#x2F;IWvc7XWqMdS6z9zXfp8z8evoj8YquBVAr9IniHEcOmEifQQk2qRI0m6OH&#x2F;tZKMq1hkgS3bUBpAbQK4dOeJ5VHjxroxR7sL+EoHkIkWr6Uox5uIcAVZV6AKYpBGsoz7N9rUOlbPnZkc0ao+hRnnRlRxxqi94r+nUQxHiHSn4nZj5kMTZ3f7W&#x2F;PPB8F7q5EWlcb&#x2F;6RkPbWTXUbj41JZCs8va92s&#x2F;SETMAc75NRUKNSjAzsw0gN4AEil8WT&#x2F;jJK5hZTszhT3MlvpEPQNsxh9nUvamGJ4KpU+cJebPmca2hVwwXMYRgbk3NT10L7ykJ4Ob4SK1irT7naqNGjxUF76xD8lfS1EugxDsB&#x2F;HbH506Au6d+eSGj5ok82pmKSnUshAXf2sIopPqlCwZ4YV3V7QrFHyBhJiWksu&#x2F;V&#x2F;bPN6BJIiXMLfFv&#x2F;zBGk22pUWCNC8Xqoo05SyzwTk1LImFnQC10JVpwIyQHSKGKg2PxoNDsczp1vFWEKYWw+NPPA+OMBcg9w0nWsWHMrvGrt+ovRxq1o6+8WzDyozMNTEMPFsaKeP64awbMpRMzbVofyT9TGVeTJWKiq3tLrsAaGJdDjpAwZScqQiklXCnJse5FF+kzsMpxC5trWPz1AeloqiF88dDh7setCWsmMZMIoFFuEohAuYmR0pkvDxsIywZpi+FjmHMcmacbF3GQ19Upf1hpcUwk&#x2F;w6EiknVmWK91Tve90dZpFHTP4PZXx2UeCvluhXRrz3+RmnM9Ib7y++WXd6kmiSpO0UWDpc7YG7abAgtZOoq0SN2tRJ3ejQN1zSe5&#x2F;lCB+g0g&#x2F;0MHkHYeFTb&#x2F;64f8i5ico2wItR40t8KRVbexeV1rDMmz4o+96GxjBsTwu65GX8MsWVP3ZrsJemcH1+nBfNKNXoBk+1M8twZYmkrcD9r3sGp+ZWD8y3NB9848Pj46JF0GHOmKZ40uRKuVPCNCQYid3dfqV7XouGmefGDYxrJeiRfnZUaoDEIKWZuazwaQAGRcgOJXFiWkyQdkjS2VXgjhdhcV&#x2F;nWzcsWsCr6sVyY2znb5yXs7rTeYHbr1qD461B0NnBuva9EMwtd1H&#x2F;jAjOKXc3R+3ZPrSpAprZ1QrnwYZ&#x2F;Jz5xlAU7qdwbDTV5EroNJBeCGUFnkBOtpj58fEdUqkMnxDyA0gC0A+CIarx9Qhl0J4a7DM4MYGfkvAi&#x2F;GfVFKg0rjp71drRqj374I3XbVhvr3tRm2xDZX&#x2F;icfJWnPmq6K6X8mwLz7HtRT8yoe+ep7glRrnLbDvgHQ5dtPoL6IVcJMHJs5A18bIPdKOyLBNwYf1yBZK7LiY9fKA0G1tAPkYEK6AjaQoZwtUdqNZmVMMYCRP&#x2F;ENYZcpi7ILhIpfa0DiUoBjtERkD5EAq3iI3lLmvHP2L8Z4HdB1PZ&#x2F;CEO8ED66rdX60xfukxl17PtaBXD551eAEd&#x2F;6D5yiage8auEYxOD8LgLGWG6heLMuRaxAHiu6dFbAkxvA1rfbkSyIwCo7W9rQ0gr4Ph6X4uzYopXUOYkBmQZEWZp3aohehYg0Mx6Jq71IV6qHAzLE0dVvrhrt2XqmwcnqdmvP6ia71SVw74K6r&#x2F;NzFHVw78O2uHD2XFd4&#x2F;x3F95uIbv94ejK9+Fvo6JF6PJWXNzKT61vNYjnpbbOz4tIYii0ZVLHRJFCy2I2FsMuQHkBXAsALgAwwXIsDPOJDD5oBCcGKHCsxYHUDGmEw2bHRoQYoxokWnuWvdpOVhqk0Nzp2slpu6o46zAcl&#x2F;080gKvlK7&#x2F;MU0+tJLeIhSeEkJ&#x2F;I8Aopugtian&#x2F;EAn&#x2F;JGywZlljU7UfSpItp99XdEhOUOYJzTGQcHhkBykg&#x2F;BIyymaMkSX3CHP0M2hjm3900SQfh4VLk++TWm5sGYsrrNofrvMjrl4zqgyYJoPMecmTKUZ2syWQSKZYDSYRb3RYqCcjVVTa5RXOrvU3Zh4KVLUtcaO&#x2F;mDQ6UDhvDFzi5r4R7sfXgLGW2NMt8YGTk5e7GuJuuN0sVbWaFe8NVoIDyJpAT15Ab8KkswQPBo0AY4MSy8XrQBmbexQ8vi52XZtABm73NSFhyWLlYWoaBsaZ9fpLjtq7f2Zy5jdJBqNQ6EEhgCFWYBfAGKwaKzUG60waqqALjqmDdmeo&#x2F;jXnKo3rId7l2qEPHEt&#x2F;DNt4R8Yy7kYOf4ZPtlr970YMfL8hgVWfkWk4&#x2F;og+fl31mcK3UmbnKNHwaFIjVnEywCbz&#x2F;i19lhri8FOjG3mdQBIceYPnxBCFElY2tBtA0hAA5dRYZWw73ZslsEIkxfR3Dk1H4&#x2F;ZPCPNEV9REDdLsOJIWMd2mnpPsX61JmjRHAvZ0xKtWTA8UFC748B9NG3mFzLIlVnGi6rgizHDP7E9cFfPhdcdHk8&#x2F;mBrxrvgG19nHanFwxqY5+6iW85Y6He5fUnYCAJtu5On303X01LFkmoFXgceS6TSHQ0shZDEMG7ptAAnk3XBWj6Q7rIBgD4YrxwddiLTainyZMQFWALPUGclEa4yH1HnP9I6GBhYvGslmjZ8yyc47wFEXNuoLNcVrA8w3QeNPSodvFjEfuvH6+76HT306m7j4CHgGlGvguZpWN5nGc0AlyXK9eln3dq48uZw6Gp46YgZQxnhQsfqSYJTn6c&#x2F;MMzaA&#x2F;I+yzL2BYAXEi4d+BUvNdi4MSleCGZGSlf26SpOxjfbADLQibmZF4ac4fs3PVpV&#x2F;ak5vV6zfrwDjg&#x2F;7WX6kl6ko6eepw2PHVV7FngREX5NOuzUBeba58QXziUvR8IRXnH6L9+Gi9YAmG0upkeedSLM0&#x2F;1f+eQTgc0bmWe9bkRz9s4LgBJDBMvgqEqNFjtzuKgFI0ZzwRzMJwFGXNuJ3hXMim5QgjaVX+DAajFVwttcnZxpWzrWvXwb5w1FxNlS+RrU9mGr0eSbrjWDxt2PDOKOtGtHaNYXPL+6XXS7yKhV+YublBtebf2dRqEXESKjaGcSEcKqZJUgE9eeEhZoV2Wq6&#x2F;g20UPDMaOJqfR06XzLZJyA0g16LCCoala+1V79FWSnBGkyE1KalZt7E2WWIQPDKZ2qFOMzCWbjaaDuRyW7BoLqerp34li1rUyTykLoAkihL12X1XuqlnSHEqvou7vF5KRe48FD0zqlrDuC+6BT4KiLgs&#x2F;vvXCjm0dnjpSiNDyCRdXoASZZyn3E5Et1qUR+OGFUgFg+hwGRyCi5JMGLYmzQaQsbsJSCFt5la71idgWDvWJSmJpo2DjgTHrBzulWddtqnxsZv4RPzUiFD8GcLQCyOBHVS8a6CxGHqlS+DYWXqeBHo9YPIc4NZEc9GJVKxg4GVOMK9ni8Kyr3B3VFnPUmvOgCcozF8MY3mlhoq&#x2F;Nmq88AF5ix5Jh6uY0eCEl12iwlJX1GJESJWTXW5D7YoLDplxS683gIw1PdnZuRmO0qRpu9GZcTZJ45SHxpqpA+DCDqoApzDoUpEuqw6Gdai8SpyRO5jV7btuqJxtwucKW0+6lnrzel2yA7MFSN6Vyt9Rs1yJKolbKuG8An4XwPFXxn0Wf&#x2F;NaevsPkvOwgOL8ZblqxNgAsESKrdZYLl6hsNYiG4hW+HRgA8gNIMuyTt+kgeGlslV&#x2F;3TXAa8SHoA5WjUez6kg4CtzNWpDYlVnHIYCzsmwwRByLENlVEca90qOYfy8Ubd0ztHwFxNaz4a+B4yob8E7zrlVWyVdMsW4p5VyLcpdpfnzW1040f2cAVQXBGk0uBI57hk2fKFVQVJ8WqEalNS1nliH9uSIlG0D+BwLIw4V9fKV7qTIjScDsU4OEwrFuQrdBIZRi7AelPknFthiwTC0F78cupNLcOTHl6pBxrWcxzwI&#x2F;AGjSdcuFtZrlnRxo4lFJssvAdFY6uPakq32Yex0KT3FVN17jX5thY71bXSPFHiAdkAvKi&#x2F;ucAmywbkJ6xSUdPzd03ADyQgbaWS+0znWvE0GAWUxZqUmYVfMttmZNdZAraj5tdIctWLE2lF7+ryOPDYV5T6S0ihu6JFfzgHzZmar4bYxo9gFNE4G3Azud1DfuPTRPRojuxq4HS5ZcZcTcW9&#x2F;kymvm+kjT&#x2F;ZWLXtOxASJJV4seC2smrCyjBVc711oAqkhIEEhTONeEqt7GpNkAcg4+yNnW+oa5VN3FZXUEh8V&#x2F;2KqBfMhH22JbBURidjhsQEhyHuSdx35mhmFpTlzPovs0esXLpAeUX6UbCqtU5dP65UWgXO1IzyW2i5YHa6B4ExzvFLa45Fe2qgauO2qla5kIV&#x2F;je95zxzj6HCoTxzITgJbKMlGJu2BTAZFE4mzUi6&#x2F;6nOssbFgyWaC&#x2F;fsXGxN4AEAORhvTOpAmxVtb6Zc5FIx0N&#x2F;pHGOJGcv64UWZBGdYGXNWFUUX3Cwa0pe+dxnB+Tj&#x2F;RLhTyNDXO35PKD&#x2F;eM94zb12rldT+A7R7xkf5Z0fwrXONtd8ePQ1YDx&#x2F;iVzJCrrh8YrGoRYpNJvXer&#x2F;Um71LKrNsAty3GuQGkCtgeGLepc6wqqMsIOUc9UMVIy0plfQ6LFzFkVzImI0hfMulCVf1p0Hrco&#x2F;F9vVB58Lbhlz3HXwnXexbPlX31h5PRR74SO6LFVWha6LAN&#x2F;723X+aVyLHa4B&#x2F;h7&#x2F;u2gd699mvKegu+dWz2+HyzlqJn7VA1tK1DkVy5UnyjI1luAFkiSCHhZxir+NiVcG+bScsHxOFQUxhzmWMBg05NqtXY2ynjZ1d6wD2ornVpIvVqKuyZ9KXHP1upmZ&#x2F;wD5&#x2F;BShVHOlPr68Cxa2Gyj0WOLwRYd4Lwv0A&#x2F;NX0erVDhou2C3fVQ0+sFO4CyVY+7LQgq9CtuvGdnlqIbvynXTKADMil+AnPDmaBxy3F3gByXuatldzA8HTyo2mgOA2OAMcqU2YYGghajR41G3KxRpJVvWc25wqFn6oPaamfRr7lVKC7rBF+ATR1AZUu1etuiWjw2vNfaQRdA527mjT3AKge17ZY6+4&#x2F;7AqxpkPKi1+I1M0uFoADCl2QhU4YIz25aD2WrjVDIDfmHHOhFQqkk3A4Y5Yynn9bG0DGGl0LMKwsOy&#x2F;FbHG+mDuHrEEqijxmiUXDMWiEmPUeOdcbuRDJpVWNSLYOeDP3Cmner568V0HyJDzWSqSyBpT3AOwvWRXgPGy&#x2F;9MRnKTrP8&#x2F;9HP7Rbc673ft6&#x2F;XN956ENXAFvpYFfuC+BBNSwjO0AuXe4MZ24CFV7AUl0nXLEKrDozvXIUtrUBJICiNlophuyzHi2yGicBVxOZYDRkAtwC9NhGdyoQVlfCyr+e5x+LU6FCO7JSEzmrq50yZVaZMxfrdHfWLO+OLrl+261ZSF5Lp7+wbS3l5bUX9PUD&#x2F;SKD5lpK&#x2F;+hJozfbuvn9UXFqK5FhAFzhxhRlcK&#x2F;pNWfjrn4+cp4pnS0aamqefaXTvq1&#x2F;aoCcxhUwRG3YpKYs7pbw&#x2F;O9vJkcqQ91prh0yNdtWIYGyMjgeArhAgntEmVbuAyWhCO2q528vpHqv49rdncYb4HnLoEuXcYf4RRvWR2urWukc64Fojn&#x2F;Sa730XGs1kdNm0lod9MJ3q8aG6QAOHVGQlYKoZYtG1air&#x2F;ITUWjas&#x2F;pwSubVnNoA83elood5DK9dt7mq3QmVEj8xuIge4AhSNEQUCBlNv1Tor&#x2F;Aizko8asNaa5BD1TMRjtHKQ3Eu&#x2F;u1cX8lqAtsrHvvYUus2e+fIXc6mm6RdA8o&#x2F;A5Dv9cPilJ7+vPnHxxNc1XNTnNn2jpt5NfnZ78bDpeKnqTbw8IeeKrAReN3zbAPK4f17OPCJGeSw7UnaknJGmHDHl5ElQbbQEGNbmTHSyB6KCXlwEVMAs9ymKPlG&#x2F;HNs8pJgekoshz4Vp7wHD01T8zwgX&#x2F;ki8PIu0LoS1d81T&#x2F;kGvlV8BxItpwFKeTteUiWs6XJ5IRf9xaQMroNYdUW+fa44sgOheFYEESSSzAGXiLo3mbf0TRZBpygGIU0bKcd2yN53IMh9JuEZZkSkjB0ZKPDQPmRi+XUaJqBJo9fZmuVAFKazjZl8cX1mrP9JOJc&#x2F;0ZcDTFx94V&#x2F;T4q0fbaf2SvAGOXwPGu2qOvFAGeMhojJdnO9ttJyZfVTGcFOSzOk&#x2F;cEh1rMFwN4wWFhSuQQTojN3e4qud1GfOBE8hyd&#x2F;Pso4JUswHkBpAAgO&#x2F;&#x2F;9XfQQ0GqORcWwdxc0m2RGPKUMJWxHfWeMq12WFJpW6TXxblw3lYEdTtzruZbczP6wGXxmzYhYl1StSaa+1X5skejPq78fknz4dG5x7UH6aSW92DOzWszVbzzS3gkqlwTO16tvS46hl2HujZelAlkkRnS1EZ9oAyyiudOAiZIE8AM+YT4&#x2F;SjpCPcJ0zTR5WmDxg0gT5enqEF6cTaUnbFqOExT1BFDFDeRNszq4JzBLrrSQwd6qabfkUJzjjgDHOuw+Fm4yFu83e7IimboykjPpZy1YUh5vPqaol2sNfaRJq8XJ5cv&#x2F;StjRLhQsjtr62NF8fw+pfObUeMtcPy1guf8Xio&#x2F;+vR9zL8L0gQhLsAE6AjgWMEO0BHSJ6BPCAdIB7gfJB0W24RPAAep3N&#x2F;9U56Pmw7kBpBn6&#x2F;N5V8Z6Ouvp6iBXJiaSaMhIcnXWrR0DRphTbHbWC5I1a9e5822ts02VIfGiAHTxOOSN&#x2F;PESV&#x2F;tC6NYrj2vpvXzRAqcDR+JP8q2+67n460&#x2F;+iGXtrzZ&#x2F;bllE9Ldbdz+enJ0CAD&#x2F;ni39C+IR0EPAZQKcDgOMMhDoIOEA6QjjGNi9A6cfYrsmPH0cKXns3y5Lmtv7pI0ieNv1avhoTteMEQ5ZBSOGuXmYbGyMmhCoC+MxiqpJW9Mti7CfMvGqqXeXMbP6dC&#x2F;y6HwC0PPZ0MvG+Kvx4uwN+Sh3s7yNqFThXwXM1urtEmH5Ad5G8DwH5YFr95b955+23yhur340yoINchwKUBziOkI4Cjg0AI4KcCosmrkeEeQQ0xQUZqCm3H5F9gmtyuf6hdC83gPxHya+nJdB0sSSL6i2nCXKVKI8sAtPs6ooGyESLMdvCnAn716Z3ZiFs1plzwdgcEBe7Ja8Firfz1DVRh0td7K6Lekmu7OxPLWjTN1Ju3vGaz6hM&#x2F;ZnrEhCtjUDdoP3xVs1xBVx5AzBugaIe9ONZ&#x2F;biUpVJDjPQ6n4BhLtzqqQDjcVl3RI0gSyqOCcIBjklTPiq7B3izjKJzyRHf1j93BBm7fyphXS&#x2F;qbaBPpI6mascKVS51ifysPICh6GOFXNhRChu1cGbYVMphUBOvna7&#x2F;iP1UuANwq9&#x2F;TnxlFXJqvXKM96vbnwQs58BprZzERsMK86V8L+cd+Cfc2xtbv5129sUSBOqIBZr1eAbBFluU6Jni77xTCFIhmDe0IV+Y06E8tjWwA+R&#x2F;5DewaLC4Py6IFQBBmiUkGs6glwlIBvQRjpNxxfYDZwFJr7JoxVawilH5Y1H&#x2F;QzL7srvTwLBOdN8z9in7kh3MkpjVgPBe3OB8Uv8D+uLc+95UaHq+lsHdIgvfOiLiXOscLAPzFyLHVFXnh9fFyTXK5vUSGNRrUsVi7TiLL9ZY+RxcbFp1qVb9sOMQM2kQoKyLO2gnPs5Yf54SHG0JuAAmUjq1m&#x2F;v6CgABQMMgGmIZIk+sMYxhxhVgFxhn0GLeBxaWQI2A7Ll0NRwgjDDuBA8+Q5AaqrPKku0ZNa750Q8jU8qkXIz9d46YdLbqetp4Fg3&#x2F;Pxs2tz+ce1L6Rkv8KdfHa&#x2F;fq51btAUiWCRIztCA4pg3AKLiKAkJyNtyr4sSn&#x2F;eB0sb4o9ksuzABN3dr1EvK1&#x2F;4hRbhw4QV+gYk3bhXsgKbvsW+Tl2gu9oFo6FYe+6EzAGS6YAIYsd7GzutWuD5JLNDgR6DGS0fgTyNMjsGzYtEjw14ekroBfGxq+U+&#x2F;5UyuEquGkh6r4uxssruHnFW&#x2F;tekYq7rWk4s&#x2F;vOhgp4rbutEiF2M5DwOuuodjZvdciq8uMtNZcyXBOEEjnWGiYmuB&#x2F;L&#x2F;TZg3ADynmii832lwImGSaEEHkA3NPdCFf40rQJgGfvRQHIsjJo2ChSUQwxFQbyojyOtkwt5O5o5HwX5wwqUuizLvdJE4e0I8tLg+MMv9RI3vYt8r7m96s&#x2F;1uOYVcA2QrDXOcu&#x2F;bMk25gV&#x2F;Vd4wGTC51xwx5BceoOTqOqg0cV03LJ6l0wFVS8ZyPcB1Xm39bdr0B5LwzOLBmMwAQ8koJ7PjVTSh3gCGxCU8ggRqIVBV+hqb4Y8WPJlg0s1iunU5kn5hA8cGj80QBTCHPdn6nvra2oMmpzULqFBG1gjx6QBrrHpB8uD&#x2F;EyyDOL6TYpzXCO6LHBeDeaMbEzY+MXilDiFGeiPxqB&#x2F;ooV5lrxBHAAW1YHLEtRoLiAh2IyprBAfADPB9KpLkB4gaQ144xLVTsZ784gblZI6SZBYNZARyc5x2jITOL387zjbNj4Rny8TKN95Fh5j6i7A5A1oSbV+TOzM6HxtdA5M+wbBBuj0BeVde5p9N9y5EQWHSuLzFneB4RXkHBGyB5T8hfZhmhI6WD6vA3yhwkcADL8HcbDkdcJw4ga9c7AJM8wOwT1AHOg1zThowbQN4+Zo9+pmxTsILR3yMQBl02k51bRmkhhCJBFBT+muxTvarAZ12bmTBoFsa9O4q5lXp2L77ZxBKPmRt2jBpdYuA8gOSr7JtLwPhQLru2gV3aryvnlNPz1Bci9lvfw33FyUv1R5V5x0MBwwnEAWAZCMeR0FHAAeBnA8w6FK4aXepQR4BU0233I7IfQ&#x2F;FnWxtA3lrela8SIYtJR5tITAC85pHNpIlN1eLU0zqGOsKooabS89xk6lR76vULGKjHQfJXapEXvLLnuchr4eMXClhflR27aMTFk4hSq0pIt&#x2F;8Q74oeH4rsV0C0Rp&#x2F;qJwn6OmTImB1r9Cfw2FEDD5COoo7I&#x2F;Sxk&#x2F;BS81h5z2+YFGKUM9ymix21tAHnHmp5tNtEsO6iMGKaWFs8WCbX2uFDgYQKtn28cFiZdYacwLoBxlkI7H3r80qjJuhdNSP2t1yhX5yEbuGAxF4k+ab&#x2F;kRHiFw&#x2F;046OHBjrG+9rn17+dGzZH8ol&#x2F;3F3fLuaGiaKaoRoCaShMmQBMdtXBmzFQ+dtQdm6iFPkE&#x2F;gnRcqoX+qUKhG0D+x0uxGxIYNBAaEmzK4O&#x2F;HBC+qPNXHGp3mo5V65Oxa2AlVWCqPi+ZObdY0cV2kk+r+18HxztrX5XR6pTOs00YOznnZJy94bcxHXS0U96bY10SLeC+6PoDEQjfMfQFD&#x2F;whwPPluVuuQsTHP7BgdJU2AH1rq3FJobw2bkl4fCnDOQhVz5&#x2F;oQXG4&#x2F;UDqSRR1yA8MNIG9m2P&#x2F;yBCUL9xgLkLTfD8Z8nO0QwKrzWGTNMIamY4sYUxHQ7VkzKTyx63gPYjyIHGkc54mTC&#x2F;WwK&#x2F;XBy+BymiqfRJFroSR5&#x2F;lwL1sytdvP8vIKfgKQW&#x2F;7OPNM+e9nQuU3cOfK+NIC0fG091Wk&#x2F;l8iRB&#x2F;lpq&#x2F;YVT8wUgnapkWSjx1NpidKhVa40hThE1ygqkrgPcPwF8tqaNynX3A7IfJc&#x2F;96OO2NoC8DpAvI+gCJgc&#x2F;DrBDRvr0iBrnwe5xjiKDNUOWuciwTRhZwK88prJoBiJuh3EE4iLQVjUW7vE86UGSF0DS9QdFl10auqAiXjrQuYDE9UHNa&#x2F;7aK3OMp0ZXZySfJjF0Ho3dq6t5Lzj+Skp96TtYbnLUMZ1FswXdxQ9wfZbmzOcCBOvYT02tu2gSWdGcsQ20NoB85A38D&#x2F;8OfE7g0YHsIMDENEppBH0IlkxLjWcGTFAKi&#x2F;0C+tpkNzepoUu1E8LzOqlxr3&#x2F;BEfCa9estwYc1ZF1THL9rtId3bzsFVi6iyRUAxBVAuUXJPgPHr0WIJP+4euMaSHIRaJdutA4xx1ilygIcBR0A1qixgWE3+jMB7H+v85OTTlkz29oA8q599t8&#x2F;owZFADsLWbNPTyWtTmLpTLPYLKjVHYuTdtlmtZEDxM9WvCpajyQIqgqlrUUmq5HOSs3vhjXoldLXjed&#x2F;JOK8ZC7FO4qHfv46pMv12EdOII&#x2F;WKq&#x2F;InvGesscXQXJm1rTPzkMBPOqMRei21h472bKm6Vhpg5U6WH7XVOwWqlnXBOUMuD801L+tDSABQE+AzOdR7p8Oz8aUShIb1AeDe5U2qxaILKDImW1HFo&#x2F;rGVADNGtUWQaJuFJ7vDcauzD0rXPtxjMR3a8cCSuzj6dNFy3437r776h52dt5in32UxfqpZfqkXH&#x2F;q6XMS4ybZkXxdxukVtAFC9AFIHq7XoEweNmOxqmO29Ru96roE11s6AgqhsWJfNd5jjGYts2QbwAZ+8fYMWlcUFbxufZwJwwxiWK0pdqdHgQNFBOoAeIQu5UGVK8a1e42xy7FTgLTZQ1WXQfFh87+OteluJU2L+p7p1zhy2wc&#x2F;uLU90WhC30xijw7d+gKB&#x2F;sXgHDNTuEyr3plu&#x2F;qQulAJe6FbNb8ZoSmGH4DwlEFr4hQrhZqeS5+oPjSeP5w6inTzrnRSVZ9Wrm9R5AaQ8&#x2F;rwaGqENgpxQKKQJCay2LqiORmGKZercK2VIFaLhSFAUXVGcqYbNuXxe3yveSMdPh2KPk2&#x2F;1WWwhQ&#x2F;Dk71+ofBz5WiQ7gYs3YVmOolBr8mN3UiDr4HdWtR5+r7Iy+aH1&#x2F;72XUo&#x2F;V0zTVssXytVgC+EvcwDwgeo1IxzCg8Y&#x2F;IXwUIIzbomP9WWqTnw08VYCSJQW3IhRuOPc105ZebwB5aR1yJxYKs1DlMULWjLbAct2smGwt2DOFk113NyupuZFWZMlbQbI89pLU1o3h6F4cQpcOyEK36+mGF0HukqXCrwDjtZok78K3i0D9R5pprX3+Z6rjayDbvS&#x2F;eqAPfx1&#x2F;PDfDAg1TNuEqK3CJBHdq2efwnhCeqkddML2zNHicOcq&#x2F;8rg0MN4B88PjYpWIZQ+h9osGMZgGG8bNAYbFTICqNkFCxU5hBswJlZd70kaQBNJWk8r6o6BQwa4SkyzVJab2DrTVbgxtH8AUK4sWIUWsAchkbr2pIfgkAeWWKp4++2U6Kp+BIu3Oy4FID55pa+Mn3QFKdKs8B0JHAUdAB1AFZnxA+BR3n7nR1KVRv2rWgHAa1sNYfuek9&#x2F;oXrP&#x2F;5U1VCGxAkYzSwlo6UARzPCaDQbWP1larOFtNJdKOztav2qjk0j621g1SQreG6itboHC1e72Fcz87mBXpvo9USwvD8Xdal7S6C3DbqW7pAzcF95Dt4Z6Z3dd4XqeGYbcAKOa899z+zjLTsCPiRZ52iug40Rc+y8rzu2jFehimmejSxdbyH418BRxdpVjOfiowXbbW0R5GJ&#x2F;noeqabPBVqMNkhiaf3UFvgZ6TGHAhRkIK0ebSoD14hQ2d7BPIhDeAkDdTotuNGIemty50f2+Wm&#x2F;kWjSJs7opT8PLR3yyeKUksSpSwfO&#x2F;swJyXxPTvTUuheVY1vw3pBCQ6CPCT6mly58I+uAnpA84Ptp24UPuH4DeIb1DeoPwJukNQFyID6hEj18hCmxrA8ioALGzn0HiYkRH0XWOIydBMJhSeFyjDkMYYSGHZquqDXNnhAUNLx6kl6hzuA2ci6jt&#x2F;HZdtH29kAKe3E&#x2F;35GcPNdv78Z5H6oQrH8ZVcsyJ7uMjij28hwaq2&#x2F;jZK4mH7miNHN8AvTdQA94hvEF8A&#x2F;QzruMNqMCnN7h+SqiP+QnpHe5v3e8&#x2F;RXwQyDorpWyR5AaQj9YISmWQgvBujECvHA0x1xguIE3PkUXh8VTNwcpQXwPC0sohTw4VnnVZT6lz4mMAtKo5oJUMfsUTu0&#x2F;2TgFWt+qND65+hKgYpXE1Pb6vJPv1tOGOv8c7OfLkzVrjSUQvAJOkn5AC9GoECL0HYOoNKj&#x2F;h76iA6HiD9EZ43Dc62u+IjvcH5B8wfbqUU+Xiw0+G0re11SAfeQOjKhmQ5iEkXgbCOxvMDjAZDtddPaoU+3oFBNVHVVXxohP5F64FOAqL5o5OwFEXwFG4Lr4rLS&#x2F;9trPS6ok6kK6UXqWV7dc78NIDYIYV64SvAO09tcuQYQ4gdA9wE94h&#x2F;4AUaTP8A23Mp4AfFD&#x2F;JD8A+AH5A5feUPgB&#x2F;B&#x2F;wT7tOlevS2tgjy8eUejnNOIlUXhSJ+Ww2zSYJi8cCu7JhozvTjP8G&#x2F;jtojS42y1SA5T6DxzrraJXaNVmh+K4igs872pchTqym67qp96jYo87bqeFNh77UddeGxp9niPaOKq5xqfp3SSN4HoEtBTi8jPB8N+CI6&#x2F;ATxAcc7xAJ++oiIEnGRYpvwEdFliRxj+zukDxmOm074BpB&#x2F;bGDlpY491Q61J8CMTAFqrOITTICZiBggD6HcuG5NC9KKFmTtdtuSt80rMv93AOMaUtyTOpEX0+cz6bPFoHlnvXBt8PkaWJ4qZuMEBNs7rf7cK7XFS1x1YkXYdqX2yAuAZleix2up9SXVJV07kckrmKkAGsh3ZH+H9CZXSaXL71FvfIN7pOLSm2qt0fM7XFFzdH9TAOYn2H1zveRdzWm2PHsDyC+VoyiCKr4zMbsowVjtEjiP+LAOhluNIrs5x4gqZ&#x2F;fCGDInybToSNwyiLp48K0wYarp2ClbRmwaiE3af20o8XTOcUHW+QPSMq3YR3AJwOu89BsnkrvA8Zyb&#x2F;VAK&#x2F;QeehiH&#x2F;gONN8gA+6CdcPyF&#x2F;l1rNMYDP9Q55qUe2CPK9dK1r1PkO+bsT7xA+KeW6P9RznJ3tTBtAbjXIB1eMQBKQzeM6kpGaf2+K4epmHzmgDYNXhg0NZrUTXofF7aRpcxIlnhgeXioZ9ffXlRLTyuwfr3XNeULA7eqMKv&#x2F;W6466UHO8o1Z5Mde&#x2F;M429qWbUg7Ju1GN&#x2F;5ex663cCgVWfMaaD2oSpqfFHuV4aMnqLWqMHILoq3fBdro8ATr3D&#x2F;UM5vyvnGP2xEKKoPILZbk1BvpI2gNwiyK+tLECi8WhWhCZK5NdTCGuNsVi8miWYxb5IskWYNGNr5sQgOSsPe+m4ff3AWmRml0xl1hof511qnd7WR6OnNUi&#x2F;0JTB&#x2F;dTDPybgwhckzf6A+15K7R+pPfKstnssM43vgn8E6KmvKb61mqTrQ7W+qDL60yLKOvIzjwQ58GHHnH0&#x2F;gtnL2y2ptGEx4hOd7K1Rs0WQD67jETge3NxlkKKK46TUUwRVj436e+FVlzaO5u0z5bAdTWnOJHkCPKdRzUno5Vh4dp8Blq7dXp9jJbo7BcdyEe7oFusLYHdl8FxnrXPdPzT+iHNhrz7eRfEXu9e3GDQ8id65EtGTxxIhvrX0GfgJcZ5vjJ8&#x2F;44J3BjjW1PoNLPOR1BtYZiapN98PH++&#x2F;PU88PfHxsn3atjaAfHj5JOggImdTdsKzQTlOtyqgCYQEmkpxL&#x2F;LcLjJUE4xSO02HZqTQuSOdjbzocqqoS2i0NhZz&#x2F;pyX&#x2F;tQS8C50qa9R8dYuX4kQv3THP8or5gbS33p9vCsTmKK7vIz6ECM7AXQqg+JCzDRKb0LMOqJ2rt3fJY8aJfEO9w8of+YxrFv9SmQrbiC5AeSvLgrMgLwbfBQICXKVESBhYdAndpW5vpvKJh8ewCrd7d7HOw&#x2F;CP6qetsJlJjqhonrAmS0jqEsK3PeMy&#x2F;CLaHrJgkF64D12G8R1Tva15763AxzPmbtU+r3VGBstMK6rRYv1PmWER&#x2F;goM5LvAD5IvoN8h&#x2F;guw7uOPNokwQBPFlJ9Z4SDRRW6jfJudcgNIB88&#x2F;gikKtJTJa5ttqhqyi+n6SB7qdEGtkvQYC&#x2F;c3wHNnRHRvSC5Ej2uRn+4Ehl2f5S40e3lg+K2N0BmOSzOE2bQg3YJV+9zp9cOcbtBdPnG3KLEOs4DvSkaLrUL&#x2F;dkaNXUAPABznnFUHSDHu0okiZzfAXwSzMxB2vKUYO49RyFeSWfcJt7xWW5rA8jVlRIwGpjI6MWUoXAyBnjO9qzS9tZZTlrDMHUeo7Ng7mkN8mIYdhKOXaoHXuxac0XI5o6pagIrhc3zlPwSM+ZLafalfP0atfHe&#x2F;PfGbRfnOu8E49XoVCgqOx+l5hjgOA9zl3S6zkKiRZiS3gqn+h3yMgbkP+X5J6b8A+4&#x2F;M&#x2F;yD7i4jMAmUkAcDszdR5DrzSADe8c8JfVGMY1u&#x2F;sv7jM2liONrU8WZa8wWsLJly16L1KAbdcEYiNiyZc1ScbLsgvnriQb0Y51lTAF&#x2F;h+J5ZItTOJc5x&#x2F;OIws84juq+C3yUguSD2wLvsBbsrtxTDcf4R34yebjVobj6FVMDxDfKYcQxw&#x2F;AnXDyiEJgog&#x2F;oTjB+Q&#x2F;4rpmsQn3H5B+RNRZnsfw5gnHnM3TMUfGMzlMQh7SPMta369da9RsILkB5EMlSAKfYbsgiEwdvUJ9Os1uCLFFUiyD4pwLW7Bm3FVG0Ll2ILcDt5tR40oqiAuRyuUM+3Kt7rSxc0JF1L0K45dR6E5NxTVw1PVa5dnn9Wggecfj7vXCPt+US9r8E0K9&#x2F;IDwBsdPAD8A&#x2F;Kwd6xjlUWxz&#x2F;JACTDE3c4qQhf+E4S27Dlac0VTyEjpgckxp2KqKW4r9J69cGjJQHRarTZYiXrEQngj71joCpBZ3WgNSluexahlLnnWJ761D3lX7uqPk14PnJaD8cubKXwxO+Pgb1Ree+uxl8&#x2F;bzaeVktbzvVGqLP+D6HfAf8ADEAnw&#x2F;5yjR30u6HR3sOv5TfWXcP8t85CfcP+D6nAY7tsriaTk7x0nFjcVlg2ejsmJfW8ZfwCLaAPI&#x2F;9nIRZkXXkT0DhnX4u9QQa2ExBsIjJS&#x2F;WC6hMmTmSZFP8Ifo5yLV5vYV4Lq+ne9eOet6BCuq0AQn0g3NdjaEDvI5tc0tNG7g843lhpEiLB1xRnXj0hHIt8taF8alrQeb6ZJBDOMCLaERT39FneMtoeUEMg9f7QPhQ3d5Ue0qNkniX&#x2F;CDJK&#x2F;CRpa5YXBobQCYD3We1+PJ2rXy6vDcD2dYGkGd7OEGYrMWJ5FxHjNpeiR&#x2F;JYrOADi1mVKkPIM87D+R94HgWld0h338m6DC3vmdcK1YLaymqnUSAXMQb654r9wPIDaA&#x2F;tV040zm7O0y+aE62EABeRozShWbQtRGfudMeNUfXrKgTUV+hA84NmK6TXSJHfy&#x2F;36+qO+Sfcf8L9DdJPAB8yxSC4ca5AWBSWZQCn0skeEpDnTjZ7c7fynS8ph1sUuQHk&#x2F;YkoNbkBTnXGmKzRYMz5GJeodaoBybBqqGk4ToHyesTXBZv95TrAnIg8cA3oeN6fuCcK&#x2F;NrnONcReSMn&#x2F;qXZzpPbSPyhmeNdTfLarcY74D+hqriD2ph5gwrQlYvq&#x2F;GNjx+hNtYsNvEN8g6U30GIkSMikgYoZx9J7gYyooMkMJHl0st07e1+0gqVOPvStk70B5MOZl1zwRhdEh1JmcyiGTkT3RNeR61JlhZpd65ZLYOseuwqIJ4B5GVxuq49L1248j5CaSMUlAHwgQvylIuqvPt1qFPmF5z2NzoVjRIb+BqFEg0EPVFUEb8IUqOK25bp&#x2F;tBlHKFTA5R&#x2F;w&#x2F;KHp+CHPn2JRdSSBMuMYjWrBYfE2LFJsSvCUzt&#x2F;3RjncAPIPCRi8ZsblrIszQNIqKM2gSZBkY2dYBbfZWJnSzRrbH&#x2F;aGdBkle842dBEcV8HzHjXxvt54bVbykijvpec7y77PueTShTRdv&#x2F;h5n08fZMg&#x2F;y4B3SZ&#x2F;xIeld7nONcRageJd7Fad4g4f2o9zf4TlmH7MH2Hp+B3Xsx7dYRniEWa2nLyUyR7vQr4w9nVEOaRtybQB55zoqZnGiLzMPeVcz5T56YJuVLFhqs5xEISgWemEcsmHO5NCJ5tYciT6W8nDFovWe6PHUH+VujxldzzsvgeGlF3UPk0b3Fjh1JoQhXXpDDzB&#x2F;TlXMe+R1TQUQ30rNMcRt5TWlDvWdSKd&#x2F;yovTYMw&#x2F;&#x2F;oDrp2YR3JmnTfz0Ib37uD9erEU06ueMjgRgFSBtTscXZpHqObLEZgO7AeRjAYLDzcyN5hbAJRBeZLSLZVf5GfZdBfSUS5XfEfSy+rNen+I6w+kGd47CXKgR8pf4zLhguX0D+BaR4wX9x1vRrHTX61k3BtPV6HMtlZb6AFPr0W0HyFf&#x2F;7nJNQR8s9UYvIBhD30X8Vm8BhB6R4SyO+wHXZ6k3vjUnwsawwYfIg8xcZ8xUgvIGfIYY60FNs6cASh+sdLVPKIf9x0M8wEja1gaQAGwwYKCnZBlpyDTzADVmMMCOPQCKGWAG6304hRETc4AnM4CJLPcBpgKSCwAkVyKER42jLo2+XFLjuWigdVp35P3SZmusRN1ZAtAdkeQCqE&#x2F;BeaHu2+4jrQhc6EJN9aa1LsKmNUZ15igRKhzpTunb9Q7XAdLHnG4rdB7dSwpeZh2hz6g96gOuA13zFFlPvyKbGIU6gKQEGYGswqgZViiHRXD+jHJoWxS5AeSd6297IZkwJGcyhzHDLCMxIzEAk8yxnZlEhtEL+DkIESXqLL93qbaXUXL1ALgAxzWdwQs867Mo8gwEsNB8bJjgK3OIHYjoatPmMqhejeZugvraTXdYqN4TnV56mHTfizk&#x2F;OR0h&#x2F;4TrE9BB0kGuzxIV1p8fkH9I+lDW7EQo&#x2F;4gaZJmBLGk5XG&#x2F;K&#x2F;ib4Z4SI8YGq1AfFckomy4xjd64ojcXWqIHDh6KQe8vwbFt&#x2F;1&#x2F;W&#x2F;AS42wNEUUz5ymEUdklSJ&#x2F;HxpS1CPtHafAohAScnLVMbZYOEVSfH7cmStCs9qBdhW7kssGzVrUdtdwPRrn&#x2F;Wa7sfNeutdKHuDSviQCrnmGnQogr&#x2F;VrrMcVVSiKn6&#x2F;V0ZMqIN7UA0jlf4Jb9TB+RJqPT8BfgDKoGBCqetwmRe3Rk2dcdQ8EF4ph1mYjI99NZuJ1xZB3rNSNFBcYW9Y8jNUoEMDQqOzryfOCFLqi5yTPLFr2sDBUJs8K0Je4hzfm9reAi1dF4XVNfHdS4&#x2F;lvUCIx&#x2F;Uj7xXhvZKmX&#x2F;wsHrFomM8yUwPAqDf+CBEKdHXIMvvYQLCK4OoNjiqAW71oYvzH&#x2F;d2NH27IrcVcxniunRh63Y2+M9062daBad&#x2F;qWaMcbin2BpD3LC+QBlekyiUKXKTFkT4rmNmmqD+W5s0MhHMtnK2gpy5M+3NP19Klwt7y570isdcGynkB1G4BH3gvOAF&#x2F;5kem0&#x2F;Jkb&#x2F;LVPoupsF7eivNgY8QA6IVw3+dZyMaqeYtUus44+kfrXHuRQSNOOtY+T4OdfMAsr61RDjHbuC4phwn0UptcHKEb5XADyC+urAxPLOGiz23OVtlWG+VhPZpUDFxqtBldAV+0SFndFq60Lh5KcXgBRHCZecIVpZxuO&#x2F;GgB&#x2F;Q9UeDVx+m6OPA9jJ+rTKDzcoO0UpPjIoxee4oc3OgARnnpOlePai&#x2F;daXmdaZy3ZY&#x2F;aosclHuM&#x2F;4flDefp5HPWWTYca6WklRFQnX0edpNknAFkph4bQhkTOS8oh+vnJmXJIbpTDrQZ5T4oNAAPhR4c0t0mLRtnpkLg6l&#x2F;v+4ic&#x2F;T7ZHj&#x2F;LhmvkagNbi&#x2F;cV60ppm5Eq0wAtg+0cHFhcrCnw8&#x2F;b33j63RyGsN1ri8w+ksqtS8ZKRSa5QqMP4EUMRt53lHSD&#x2F;Ue10DP+G58Kz1A&#x2F;I3UD8s4f34mvLwE7JjV0tsFey5UWPwWeezNGrcEpQjKslkixaZBZPDhwS+H+DsReRYGDinX&#x2F;wGjhtA3pVtCTA45C4t0uwKbn0K3YMgVmW6aspeAbaELl9qKJ4U0tuvbe&#x2F;v0Ixcj4guRUq&#x2F;8DrujhoX4Mj1TH9VUJfXhTmuojAuK6iTp9W808&#x2F;pGPxo&#x2F;9HADwpNR+n39rtQ5Mv0E9CPEJmYwbKJUKjOTeIHdukdUh6Ojjwadp8hfHsuoza&#x2F;NnURZE85NJSmzKR4jslBL&#x2F;40p+c8u3VC2dLsLcW+cUwHQzBpRV6i1BKrZkWvAhG5SnBkej2wQFj0nMVL9beHDLB0FxCtR6C8opDWh1u8et+HI17Nf6UfTSSuKRf9QnDDe7af&#x2F;4FSNTkUlsu&#x2F;F7HbuGT8gPRDRd9RGbVR81YEcd+lYtG6cC3UR2HKvOeRnx8vYyaANDl8mP3cVKVHGefUlj6fjHv1lEOcUA5j3qJSDnlOOVzOjne75BZFbhHkrXUsvVySCmEIsXEAixN2LXLPdgitey1SpArDhg6DszZyULZJ3gpB&#x2F;AP0DB8LkW9H0Lce8NVxkL7Wx5XuKW+96Fuf1ZpP9cmsaf&#x2F;zNLKcf53g&#x2F;lFA7iM8YYpxFqraTp1txCeAz9Kk+ZzdCKvJlj4BfhQ&#x2F;mg+RH0opO0KJxyYsmyirpQ6767Ot3jONcjgCnggrg+W9cVeVOjtRWdkQbAPIG&#x2F;vZVMtTcpbmi6KWXUFPEMpgeO1el6FwwIN2TZURtgqGHo+J+iNmCqL9KfulLgeOa4IUd9c7vxKOr26+y7bggc&#x2F;lcqjIi+wirpQdyoSCilBtdRrU7C6oar7V7uPFbMs&#x2F;VOuQdS7SS0oNvMv1k8QHyANLnqGi&#x2F;B0dZ658Fyp86qU6eFXVozzAVcVviJ30WaUcpoQ0Zagq&#x2F;Ih1unI29+D8vUhbPXJLsa8daglggpDkytmVsxDlSBWKWeVe1+tFhEIVJINmWOmIXABijkHgBbiup5aXMGAtnb7Kb75jRrDLd4kVAP2Kx&#x2F;aFtJ9r9cCzzwCXZdxuybudamFeCrp1Qv+J1+WzbFkRlYhB8PeuW915WfsbXD&#x2F;k&#x2F;lOOyr3+aPcN+bM3SD+ZWCxaJRZfdU9Fe9mBnEqE11sfLb4zw8LUrVEOraMcYh7rqZTDMTjZ6j++Zskw5+ebeO4WQd4XfNlchnLPbp6DbghOgDKkCoAV+KYOEOMS95nm3wtQCoWfXbncF1q6p+oxrY50ClacIwC&#x2F;rHq93lPR12vyPZf7nojuDBx5G&#x2F;i&#x2F;ElryQRBffl4TgEM0Vprg7ZsiAnxrArgqzZg6BB4iE8WZsEaOsU3AG4U3GN58sAOP7vQYnTWPzvNAwrLDR4CTlzN0y4O7TnZUdyqfukWQyQoYxvNJDli4HFKOnIrRQk9H3TBwiyC&#x2F;DJDeJhjdhawpT8hyZA+Ac8Ul1HscLofcIWa4XFXRRyWylDug3M9PwiXJPQbScdua4BSI7klRydvD2LqVm19Jvy8yay7wyNeC0UfB8cuzerfkzZQhHcps4zty2CGERqPeI5Jsw95vcP8os40&#x2F;y0zkT7iX2qT&#x2F;lMKilZ5&#x2F;wvATAz4Bzco8EswVKjwk0hSdbPjcqFmQVde8W9lHnJztF8pRSAfMHTI713+89iltjZotgrwOkG3P9AxkTtmJKVNDFrKYTHAINJcj0+QQwycWdIgudy+iFg7BFQpABSgX6fac2N47GHlv1Cfdi4o3tv9CzVHL6FEP4dhXm1eX3tvFJ4oh8JpGR3f6DTVyjFnHn5VFI&#x2F;Bns0qIFPpH+92L1Bnwg8BPGd5IHQVTSJTNSt&#x2F;MQB4JJSJlx+feFm9dYi8n2kQr1r7&#x2F;3m2it5+xDGCHuUHDpbd6S7P1lR1sW&#x2F;+UANkFehLl2U3MdDM6RZeQSTocGSYXlANLmcGUIU0gs6RM9wxahinLPRfJs5BNE7KgieTw8LH+0H11G5BOjpJWrP&#x2F;VY4W38e&#x2F;+iIX333TmS3OpfIEM4KOkxAUcy5xim3FU52GNLv1W8bfWLEQBvcHwRuGHkr1DfigsK5CKkZsughQYnexjRH26MM5F1dmCK5RDF5jmRg1JYBKwDxOvwb0Nkfe1axXjpHaS3gbHN4C8ttwzOv0v1zFnuKZkyInIQIp0OiHTzUG5DJnQrA3pNsGKQC5V65BRl3SV26KmKSgTSHcNX+vO0HIBbCVpaxYSOhe2YH+AXHD3uxqVXgetGj3yEZC7J3q84Fixqux1&#x2F;lxTmU382YRuZ6Otny0iFH4KnSBFb7bVvKzxBvINxDtyflPiu5NHy9D6CUmojRqRSCWV9mEeyVHv7KEKoHOmUdXCm5qP65xymGfK4fBxBNLQTogxdB73g9Rqm3Fy3MBxA8iLmWme6dXumZMmZWTCMpyTgRNTngBkGSfCj4DtRE6ET6BNMGUIk8gj3ScwTQAmSZnABPEIqDRxlEHaXEj6hWjtCpNGrXZ4AqjX1Hr0x4EjHq09nukYLihDJ2k4V84fa42gdj1D+Kwd5qKwMxtnodgfFOMtAFXpe770s5BVscc9ZM6YjrXmSHX+2pxBLchVQLYASHNHHgg76Ezfk00kykBM867SUw5RTLzKiE9POczJQFejHDbxXGCjHG4A+diajgd0jn0OQ&#x2F;YjciYzwcmNE8mJ5BFAAKLziIQBwgRognyCpwxqAnmMtBtHiEcQA6QxHssD5AOEATBC&#x2F;EKbawXg1uwTqu5GL6rr54+V9Dg4XnBgXELZjZriqngElhxEXg4Hr0aMy+cN&#x2F;2pVCbKmwlNVed6KKviboDamM&#x2F;Os8R4ca48UO1LwN8rfNNibMg6QO8y6z25W766ZQhvvsfAotwnw0cCPE8ohZ1M19ba9RTy3Ug5dQBIw1fJIMuDoMfaThlURjF8vdG&#x2F;rnw4gzRZ0PGmfJ590yBNHJhtt4tGSHUCONBwhDBCPkI0AjqCOAI+AHyAbQB4AjIAGyA8SR9KOAA4QBpAHAWODxms776P7bXMrvGBw9WhkeAscb9EX7wTXu&#x2F;Jr3ik8fFpzlA6RVntnoOU&#x2F;OyCMlBuqArc&#x2F;CpMm6o3Bjvkp9+BdQz9p&#x2F;Jl3fPdkx+E9O0rNUJ2orcqsoTMhwVua7QmAEcPk+HxKJ5TDYol0Sjk8E8&#x2F;FarQcICwgoQ2UgyelmGX1eZGmb2sDyAuRDBoL0J45Zddxes8H5mnAYMndBjM7SjywGDRAGgsYDpAGkAnAIGAg9AlxgHEAeICQQAzl80rxWE8xwMbLc5CLTOi0qP4nrgcPGOICz&#x2F;rasPvddUlewNabfyfog9K7QmXnR5ldLDVIvEUUqR9t3rEOgwMlWvTCtVZT9SHxU4O9fb7sj8PxqDrAjVbuY9WVj2jQorACCZaFvLPSqPEis3fpZHiDcthVG3rKISeAY7gcRn2zcLlKOYaru9CWZv9pAdh&#x2F;+DewE1K9jILtTPbEo2M65Hw8ep6O7joKOkA6AjoKfoR0UMjxHyOS5IT+d7BeP8TvmK8HsB5XkY68EWndXVy96Xx6H2hxeVnW9hav9Rwc7zEi++qs41XKTy7gWFXA30ok+Napfhf2TBG&#x2F;rRYKYAXDD4jvIN5IvtP4DvJDg30AOnoaJM6RGlek406rsfQiB2VETVyaQ+FJFtDEKZqHdbNgby6HKtQDL40XpEI5lEod0mef9laHnMVza+OG3FLsLYK8BJCpYEkGPAvKDj8o03T0KR91nBIGH5X9aGYHSiOFI4QjpAPIMdJnpRpFImQmR8RITzq59BGnQRgf4yD7eQTQF6pCzRJAl14tfscJ64ZzLZKo6hVepkHqK6u0SpaTIvu5RV1Jh2+D4&#x2F;XokUtq4JXoEfPrlz6B2ljB+wyIeINY6o8VKFEB8Ue5&#x2F;hPgG4gfIH7WrjeMPwG8H16fDvvf38TSfcZCvduiRrj2VqoCngIUU6lJaiAsX+hkd99ri0wLi0rGkDkDoxmTyzYPCQAfEniY4ENnhV6637WTvcxKtihyA8iVdfjXDGXN7T0SNML2Non8lMs854E+JAgGcCincisgsgBARofaQCWI6ew+PTiiXpddract0m2WQeJaY7JFYwAxagSSptlOrB9U7529Cs+8DLVLXuKc3LjmTWuVA8g9yD2APaChhSc4bcqcyqytRJb31ijXujGXGzK50QCln3L9LDTBt6bLCP8RIz6oVMEy0tPMtspjUPQfY0DczT7pONYBbHOHm0HV0be4DKq6EGq2Kop0NywVzDEzanJ0soejA4PNJz7TiXhu7mTOLGqcRfvRpGj8TA4kgx0AEzANtkpG2GBwA8gHMzWGN3ayIPUbIxJIzPjUp78refaU3JO7zKCBgsV7ZwI4BFjIACVAKSLHiCzZgBEJ1Bg1SSUJicYR8AGw3dVUmVgfAm9KE5ogHYv81iel4H6H104uKtkZkiTl0ryYWgtbqHYRtUyQy8FlAeTcw7gH+AzwFeALyCcQewDDdeuGK1Ei76k13tGQYetUf0D+U1Fv&#x2F;H0xx+h6E&#x2F;QDrh9w&#x2F;xHRZXEYRBkUlxqLRmUwnEN6d&#x2F;BTxEQA9OBD2+SYdgYZYHUWsSspFJ3Qs8idLuQhIs90dBzGVKLO2dyItVZYT3onI1DMGcAAR0SiTfCi&#x2F;jl3KA3wByiH2jrZG0Cuptjf9pF6LJolpYa0t6zJP3VUgmsgMDD0ACvoDaIOhA0tfa7ptXAAkQQNEAZSR8A+y30MwqCsAw0DTLHttFmzLGkt&#x2F;a4jXfPC3vgJ11sHDB+QH1EiGwUYTp2fDjplovnZGq9czqAWDTQ8AfYMyGFGgAYpomdjKscoF2lhjVz6aPLOmirvUe9ZRpEO4VDYMT&#x2F;lTQn8Z2nKvKt0sQtjpjBlqiJ47WZjBkjgJ4kfMLzJcFBKGR5eB5wETwabMrDfwQ1IXVNr1k9WSSQc6shT5mU0x4poRerg6UR9aEE5vFCFRU0iFpRDL51smymHuEQ55Jcac9v6Z4kgB1sAUJy5rSqoCHtOBA5yHwAfIA2CDoRGQEeAB0BjRJI4SBjoOoA+QBzhPIJIcR0DoAMMQzRrcAA4wnEAtUcvaHi6w57vvI4A65n2xtaJrV3ZrAakcrhrBlZ1zyx0JmRepoIMxJPAEZBTRZ0I6iTdpBq+8bS5dNpx1u365FVw7G+z9n1lQMezUZ0yjlOYMe9AU+uZARKa02vgJ4g3gIVVo59I9gboE9PkTLtSqiPoGT6OSJ8HCPsyilNqf2ym6K3eSHZ+MKWTfUo5dLsAfxdcDufMogfXQjms2pB7BKMmd5TD2lnvKIdq8nnb4PgGkGsRi1tzf8NaFjvQkXDIP6fRjuloKR1gNpZ0NhoujkNJsweYjoKOhB0hHICIsiR8Ej6AVuYkIxKNmUgNBWCHs3BKOrtetFRj+Jkh66+Z8fEB4gPSm6KbPgNffX&#x2F;qxsNVwdFP7Wn34cwIsdjeloPSu6ZNGSDpEO4kCsc1Pch7ZiIv39cBHIoXTAXEt9aAKWM9wZrBO+roDvGjCEzUBs0PkOUEwzfQfmiwt2k3fI5vH4Ln9kLUWCvBhAGii131GC9mqDZ&#x2F;f32jZihA6olItenTzaxSpXBDCwZr525I96h5rlIOUTrZCePxABXKYYXTnnJYB9pZ&#x2F;G62tQHkCUAuR1eYYoSbsye2IOT8Nh3S5KOmHLONZCIYg+J1OFyqTZjobMfnM0I6lo72saTfE9i0I48gpjjgpbMuBMtZ3xcQfmwK1+UnAySrVcA7xA9An6hOjcX7W65KqSmhTGgVBTi2sGSAcQToJIv&#x2F;d&#x2F;sZYVGUJcLkjFgR&#x2F;+UFtYpbNcdbne2aVhd6YIkANfOq39rMY40U222In8TP0s0uQFnGfKSfID60Hw4AhcHiG+v&#x2F;fKfAba6QFzOfy8EkziiHmC0Q5OXrLN1vy8GdTodZPJeLv1XnIXPX2C5D6ClB2ZuJV6UcIntQDocl5bBXUfPVD3aLHjeAPN0tdqUx05lWRZBVSPwl1dZOx3z0Q8p5sJSOlEZAJRpkoRKiCueWmh+DfghGk4Q2FXAs98FEFn62MJXmzrr4I5u69CR5HVWpcv9lmLnS6BCG9q4PSBnRVS3FS69SMdXb+6SqxRhqJ6NSujh+OrfHCq88rYrdYsTgJEU8bbZqmZYT551qFF510P&#x2F;CnnUxyhOGWZFye40UP0paHXxqcjbZCguFNyS+6+ifcDmSNWYMWh2v&#x2F;J4DGC1neLJS&#x2F;zuRsOsGBqwCZG3ANMqhIU3RtOGHN8qhRNA6Xn1&#x2F;7llQDlvTO1L7QjnksbB5Unqw7bI1ajaAPEt&#x2F;xjib+orlaOXFZgmkO3zyacpMadKQJqoAG1QUyDFVdXEBmVGnm4qyT1XyqeCYQWQFMB5Zt0F2rrPYdtpJ0EfxPnmr3imK0ZYPyD&#x2F;g+pD0AffPApClm918vxEeOt6n2HMySFlMIDW8U&#x2F;vXW+vx3CTgOjhqCXr3oOip8Va8+ENT1AHepeoRow4gUeuRc+RYa47Ez8Ke+YFasyR&#x2F;YkhvMBx4cEd2YEgxYkOGBnJKc+&#x2F;JVTrZGXkYI62t84lpSTmsqkmt2VLFcwvlMGXH8ckWlMP60bI1as6jb0qXe1maTbxmyiHOND82yuEGkDeXuoo&#x2F;JMC9zEWWSwWKRAeR8zRNtJQ5DBMteYyX20RoghjRYWhEltEbjiFcoQmOCYYMx7HIo0XKHduPEAdQyyhyBjCH&#x2F;Aj3zwAJHOI6jnAcIP8soy7zBfgEkeGiFh1s1zzis5CwHnFufUsYCGOxsS0lx4U&#x2F;1q+6D14Ax6VKei7g+BOuH6pzi637rJ9FiOJHAcffw6O6Ct2q8KvrAHi5zfAG4kNDOgRGZKA0OVSEJeABmDV6s5zhYwCk2DdqOhGQEjGq6Yp1e1wG8o5RyzwI+jLlcAY+Wkc5ZEifcQfkZEhZpY7pG+VwA8gHAfJjmsGwP6MaYh6y7vxGgD5pOh5Rx2ZQABA6llriLrZzQti6TwxFn7HcfpRwJNsYUKTmWGyfAI1L5BAgHBWNoUMwRQIAJX0A&#x2F;gHwE&#x2F;JP1RSy1iIhL2XIiALdl+5VLK0AcQfaGKM8wMyjYU2t48JWo43Kvp0i3cnrfuj44xJAa70xhtirXNnvcP8x0wabX8xPQFGLDL717xB+LzXKSiX8CeB3CD9g&#x2F;ImU3ny0I4UJU1HVMQDZ54jKDJxyeTcsTRBH3o8Y8zHuZ5hZLJojyNZUOzFSYxHPdSt0pVKTpE4LFbPLYSCgt1vYpM&#x2F;KEHpJgpL3LodRpxwOEzSkGX85C2pYBXP55nK4AeTKymVEpR4cNVA6H1sRyMxRUUfMPinrSOoIV+hDUtGYCWm0yr3eYeZi95exu89A4oiafsfn2u+lh9AtxGLGr4i+Ric7+MY&#x2F;Cbwp0swfxcY0NxLbPPtYjr5m1r2DcZg1&#x2F;1mSLgOMmgGSABm+3&#x2F;H4akaW1hHwktzPnQrgdXB9LikEt1repchebA&#x2F;0ozVq4vI7gN9Lal3qjfoB8HcQP0F+YLCJoGTBSHEi6tFTLko8hTSg6SS99VIWDgBzsxhwXH8PbVMbxVE03dyIVBsuAzEUyuEseTajpWNp4qUTERMDka1SDg3M8R7yYOBneW8tID2hHK4IaG5rA8gIlHbDuRDDSgBED7NM7McJH9MROY+Y8hGDHeE8MJWONVrqXDrWOrYmTnVFjJbk1KJOICwboqFTHRRTY8nUCGhWtn6H8NbAEDPfWHNkVTyclVXVc+WnHRmV1zy07nR0q3P3OryAoXfujj43bOgPCWFcGxi3xWs71uaJvNNndMwzjkABxTLb6K1J86PMQv5YcK6JMNUCPpDdgx6IODlWsLESqVWhh3RBtrw0biog1fT2EuWw8amLTmdQDuMNh4kXMR6LFlTLm7UQzwVzVxuO59eYutGdSjlEa9R42iiHG0D+ykp2BoS1P8PTZoERGpn96Ee6T0l5gg8ZVtTD59pjdKZh4UnjPsGsNHSaN01YNsiatazMQ8k8ut+pdLc&#x2F;AH9XE3rFB1zvUjG5b+rX+igp+EfUH3UohvdBG3QthsPLAVMc6QvQRZLnnD28Z7&#x2F;vGRgdzdq2ejTyel62EAe&#x2F;aVZWxSaqNFk1yXqfU+ei0hP1xbkO2TNoajodohPxeOOHxnTgMftcuuCi9qdSYaAXsKqpfp07VKnzlREfmzKmfWqUQxWAPKMcVt58bb64kAtBNWUVyuFUSsGCnKX6cVKH7CJHypdVyp5y6EByx1Q72Xf0XjbK4QaQ50FL7vt4Xe2rCH7Hzt6lhYmuwbI+pknZM7JPNGVQM0gCAXJh3jXBLFPdOI8x6pOzp3ZElsIkKJNe&#x2F;G5wAPSpaL58QvqE+6GrRZbtOAj6BPDZcbIPAA6Kn3O9Mfo0zpD82UXdlLk5MJJFqIIdOCqHg6NUPL8FFnYO6Lfw8TprZsGn9tnKAL8rao0&#x2F;Oz71T0F1249gyhTmzMJjBm+AfofxB8AfSPah&#x2F;XBQknOSN+pdEZeNHcFQI0oC0OTBISqdbBR+c2tnucOHGPUBh0hXq&#x2F;oQTymHkR7n7sSQPGorbVzoaR2e5k725Q+1dZ87yiERjRokwJv02brLITfK4QaQF49dCwHTFimw7uhrgU6Zud7R&#x2F;ZOZk6Y0eFbyicaSNndAozrmozmKpAplD1O5Tx0Uz+Wxk4BjKZfPHWvUDjU+55&#x2F;4LKM+8wXNV6WaS310w+KuSPEowwhYIpBnsAt&#x2F;bzFUfCgKJhUQDNAUlja31bwsuu+PpdTz6E6uYhOaVXZ+j1qjfkgFNGv6XKLIOWLELFVGVJCs4PgOw6RkChHG3Im4FWfAEjkyR9SIMmyNrlGD0ghplMPs8GFAOh6j4dJRDtFFczEwXoyra6m2mnjBADPYMV7TLcqhmnJT9yF3lMO54VKAfsJMOZxCZGONctgAeKMcbgB5tvvt0gUFLp1V2VvzZs+MT59wKPau7i63ifQsWKZhAkszh8yQjiJHBqOmzDsiSzoyxnxi7CduOzanGLX6Y+vUqgLBzDn+0Qm+&#x2F;ixMkd9jkBo&#x2F;QHyUlBjK2RESgns4ExjIyVpjnIfAvTRswtHRTrbV6DLKZd7Cpjlpn+UGaxf3koxZiAp&#x2F;FKGJ9yYiESD4e0mr3zuLhBjVAWJ+EfwJlt&#x2F;lbyCjeUP8REqf8d69dXx7Be7WZVbt&#x2F;Hp8LAUgiVLXMwOmYwMmGcFjSbFr57qnHPqVWsMFyqF5NGpS73K4VLmbO+Id5dDkcFoTz50ph1ZMvKKTzUOGRps79AvKYc2hNsrhBpBn3cWVUZQKhqdSU01CUcIuTZ6niXk6YmIAHYYcpl08wD0sF5SGYtwVHWvHAEMRy2W1Ykhh5KVqYwdUybKQH&#x2F;sA8KNZlM4Uux+dkX0Flx+ztmGZDXSflCfAS1ods5klnGqgV2uKGVBudUir21BMySxHw6bVJ+N1XhAP77FzRtCYHyifyRukH&#x2F;LOWjXkx36H63dVemDxse7UeCqVcAZM4A3UTyR+Kg1HTkVBApESR&#x2F;eim0usxmaOiK5qt9oIHLzR9Joobi803I9ZqzZqfNEpPqUckieUQy9RI1kA0pA+Qhl80divDl2wEuTPlEPUIfaMVcohFaUASk3xeKMcbgD5QIrNfuZuPhBUpmLWbVLlO8uY0oGTUsqeYNmC2yVKSkQTzo04qyFumzCMU7Xq3krCdSyUippuF1TGISJJ&#x2F;WTzbW6c4zcFYLzP+ocxHK1Cs5PxSNIElY51bbjAyRK5ogAhkUurqgNA5jbqE6XZHC3WmadNzpI+yz7MWdpddSc&#x2F;K+BJ&#x2F;vv&#x2F;2t7V9cax5cYiT&#x2F;eMfDfJBkHy&#x2F;39dkJcAC3sszUf3YeWBPB89GvlugnvzsixA8FiS7RlrupqHxSoGoU9rEXgZ&#x2F;cZpZ4yP7rz3XTKNJBUfUL1S+BDSq96m&#x2F;hrGnOvsG+&#x2F;&#x2F;&#x2F;08&#x2F;fx2WQizq5Bk&#x2F;iIPlMAQZ3Q22SI899g7F85bDIFLRbjlUA+oSBBmWwxNdPe9LvCbLoak6TwLDclgNWF5ZDj1nSo1DqPmFhvZKrkkkQaKPBxq+3hkt4ndpUUDj11Iql+2G6wZsFsPmpqDGEmThRIQa&#x2F;R7x012vKoxN4TR7+GUaPcpYfTDNDm9xzLyOAAbeYjD6NoQMu4K80uwGq1cAV57XTXZZoVKc5NQAWAx7N8NwRVs3JTEjOX+dJPr8Y1MT&#x2F;HXKU8P2FytZW0TbdeyLsZhZ7MnfXlG2FastqWfYBb1iVLkA+BDgnaVcAdxRZIeFVfATC0xZHLOzZc4vKuLVZMt3rwasxas+CcIs2v8az3Ms0Lqjrs1y2KyJOinZrfrjYYhcjdjFe+DLbth+myyHc4RjE2qeHTXyYn&#x2F;kcyfD3HJobfaxizKvCsW0HCZBPl83ez0SoQioJVw0BZzdNNPFRhJyWkxE7&#x2F;W6sWzWqMT85h9bjdkrEvd5kQS15+cEBT4AKiXcLl5hHYePSAuXzS1UaxdlYnNfe0yzCKkIoixyExoJlilwAuI9xzbw7aM6GiM77NXiUAlcufavuSjQxoIYqvgUCnm4+jgJUN4q8JCJUKLtfQgyuLIn8OAC8scQXPARARN+&#x2F;FZXp+23012u24baQziexItJkCEH2fW5HnbxhdpixIIhnx01Zu5IibOqVvtsOexHW&#x2F;RVsEP2OFoO2xIvqleQVHmhVj&#x2F;VeS+Ku5nUDpZDhPC0ArUULO21Vet&#x2F;UbcKpOUwCfLl225Z&#x2F;UijGsO4+qnv+Kqq7BfVIrWe17vKJrRKmAxnTjteGemOFJVICFKhRWQLbiB9tUGM4ThB0qZ8xpb0TQA76eM&#x2F;MPuA8RKpPje2QWnwHcL3el5udtLtdDMxKEEbA96zfRBzlYgh3LSESM+FRA+s8IO2QKWZjeWT88gvvBrq+w3Ala5EX7oThu33&#x2F;MlWKbog03qNP4AgSeEVIu&#x2F;xcbWl3Ki6q6o3NHaO2Ju+2AqHRO3WK8Qs1Ng0ky8K2A6WEGr2I0Fir2OHdRChnRec6uNoOayfhKjPwjBjDKeF58aXrUgfu+F0j2qWQ0YfclgO4zXE0bptOSzmHm&#x2F;Z&#x2F;a3HpUDuD1hZnDw5LIe+uoHdcpijPkmQk4r99kSA&#x2F;GX7hc9dGnomOJflbtedhUZYrVAYqfTVWVJBMRh9pKZWUmSL0KuWzK2hKVaANxg2F0u8XoWItbWzMGwC3tiO24Ir4Z5sAW5U3MWw72fd67nwdDcV9ZyJXoeQU1+UfuXFDhoRicfxIVLiPFdi1YL0ZWQq&#x2F;v3H814kfbvy3N0ubXwn5htjedYlfNM&#x2F;ew&#x2F;Sj9Q&#x2F;AX73X+VdRK4+siMPQva6ngiaB9c+Dft3IWR2kUQMJosc2ojHcFrpfTyoeGgFJ6FmJo0DmYzB8e40AL+wHHJYDqOK9C2HEtmQ7qhheTr+t2AgUShsshzGjKYWYJ8sh5t1JbtZGeX6dAOLYzf06bzyOccu8Q&#x2F;bg&#x2F;zFnZJPup6EAaU&#x2F;ji&#x2F;6amOpOJW7VewKbKA9hHaVqu9c8AbRM0ROEC7i1sNCgRn4gKAKpIrRKKgg7lTuVLGISNtgMAEqBcYTSBEDsSuxoaJSQVsLuVU73WEQwXo3qBd7AmGBShEnQlfRPWjCfy+d6BQaBDk+BCoqUAmCDEIUFVXt1xRaxWi3WHz1AzWGvSPxuy&#x2F;OQh&#x2F;2bip080239O8LIBcUuXBd7lyXB24P27XgZEatFbUUoO5dRBlhYd7K9dZGWAaDxA5K+izUEE60XagJD3azHKq+Prq3SqwarCnXk4BztBxOS7xCQW&#x2F;ZkKu45dBWgdyj1&#x2F;nKctie+7TCQo2oImN0pz0&#x2F;lUmo0S&#x2F;lmEQS5K858unN0lVGweFeKl+pfu34pGImYjBUtfrx+Ouy1DeV8w+LQCtTCtRUhQUGwSaGXSopoNgqShGiyGZCEwK607VlFewnH1zU4tPc2OkFSVwoPBV3FN5DXTVC72yySqvyIomik2OrFqNtJfPnYqshopJEGStrpUh77K2BD4A3GtwSSbuA&#x2F;N5aAGOZFhpBjrEl4OLH6e6Z&#x2F;gmRDyzLhwgeti7GtxXl+hjzgI0IdgKrfp5vfnXfo40fpE7HAE6WQ5Wj5bDGUgyVrkuN+HlfvcBSUMywLQqW2HLYwiAOlsMnJZuecWGL&#x2F;7taif1cAO5dqHm2HPZcyTajo3EzkC8shxzP0eaAi5eNzPlhUmcSJHx2bEQPEvKLa4y&#x2F;w7JT0opJBfZvpW7&#x2F;suB8uaOqop78QrKpiJmb7BYXZ7t4ugVMSDH67pwWEdFOzO1ardPOZSVsWfvFqY9NYaZh5ShRUpW2Lwf49DF2eRMFisXX14qvtKX4LKeKq9KMpCGzdxg+YHyH2QXghd5vfA8xZqxCYFuLwAtELhBcAPmA4Iql3LmWh&#x2F;37P9vyX9&#x2F;pA9xy3H562CLYKj4OkjN87vtZOwoH6cgQasYbQnr1JxKWw1PshVF30HBZRkFYrYfn4rxENJm0UKRPlkNBHNnj2at5cjJVvILU1yM2Q8l+rvtGn&#x2F;Ol5TDeG1jgA+M2hWZgCDTWyBXyxShC4h+SIFfhJ&#x2F;L7P7enZYQSUIH1suP2b+sYreDrcpWRUi3H5MBR6XzlzJBXcfxAXRcnWLe9KSoH8am2x4uvbVUF4NWg+lEbbX2tf659X&#x2F;HSSAjVHYKrLweLY7XZO5vNUXiF4gcMPwD8iNTuadCbF0gE2raUndPyjmp3nIuhokZuJbAUSBvbKXGEfCJIXy&#x2F;g7pZP7ZMuOERKz3xE&#x2F;sJyqHv07GbLoWpXgH3PY&#x2F;Qhd4O9LVgeDxBvo1+5W6&#x2F;WPlsOx&#x2F;NTa1sOFcqwHJZZ5JmbkOwC07PlUF5ZDs3XDckOyJuH5667jVbCZDls&#x2F;09Hy2EiRZo&#x2F;thzt7zuKYLmbX5fFL7rf5dev9CF5+vqwUhxegZi5lxiGcucQwQmgLCJFWzJ4FLzhq9CwGWqp0wykQWQXwQbRe5TYG0R&#x2F;Ts&#x2F;Jwn5yR5EPMdypvIPyAcN3KP8mJt+hbcOgfGDRd8B+Anpl0TvWcofIXv&#x2F;jX&#x2F;fyn&#x2F;9NOStwoxNM9Tgv2asfWZcC2W2IHOY3I4ldLNhqDzzvQk3zWE+OGivlF5ZDBWzzJZMHyyE+Ww7Fd1tX1ch5xPD1&#x2F;96baxKODpZDErUIFmMfJejH85jR9JavHSyHQLh5wmreXjeLTEJNgT521LX45kMMy6HJk0STFWQS5J8KAXQjJOL1deexx8OD+vMkVeJpNUFcwMaRTwgee00x2lKqoLxXsEjkGRZj0U0hdxRViBYAqhJVZJ+BkeqhGSKxfOzDY6tbD5LFa1R7RJL61lPVgQcgV4CbgBvBW&#x2F;ijf2DVd+pyheABq5vsVqnrg0UqBGQp3j7YK3BagccDKAWyAdirE+SHzxxy8WAHU0GJ3poVhVY77jfvQkbbRTCtJujOmaiedAgm3ntUHFZJWFgO8cJy+LzE0ax7sjvxfmU5bCERfLIc7m45xM1dPAfLYQ+tkGPLtVWLbW9OO8Yz5h73seXwuGsd3XKIlG+SIP8&#x2F;SLG3hMSDC8rdUM+C9d2DA+bj0fNBRuaRPBkdJxeMpy13h0GMoYwKFpSq4D+th0xCCDZ5e3vH9e6rIlQegNwiJ&#x2F;HUeosCFgrWMQYpTvEiuwA7jBU0Tz5XqVQxz7zEQ8gHRYzW9kxpRdG7lWXzz1TI3cTKAn77jVIfwOMeJ&#x2F;wgw&#x2F;MJ8uMGfIs9zlsFz6u&#x2F;4r3C1oLCR8SGEQrDJotXmqclqJ5jsL&#x2F;aMB+Hkv3Zcng8wf7SctjCLvhiy2FUk7YoqNUPExyTjJhWkwvaCE6zHPp4jy&#x2F;xIrZVIB8Vgs+WQ4G5UDO3VVQh+94th4XA3m6ecap3JVv+l5bDRBLkH6&#x2F;6RNq0Xz&#x2F;lWrF&#x2F;8&#x2F;FGCcVSnm7iLUdwVIife0DsjXrBPPHB3oeU+HFwJHPP1slS9kjeeUDlHYIikMWrRHfVmKgRpkrxIXbFAyoGwmBEPa9ENUqt7DtppqdoywKaQR97PAeOPSo+s+clU&#x2F;WAhd4BEIFsO&#x2F;i2An+zsfpiq+Bfzi6YVAPfTsOhMis0babv7zkWPlsOD5+fxmPMWyMC+HF&#x2F;Le6FboPZZTlYDlkKyl7dctiFmhgRmpRsQkevr&#x2F;chg9BCqHmc9XjT5bGC&#x2F;Luqu2fLYcuGjNxLfrUZsSf7JJIg&#x2F;4SGpr&#x2F;xgrgUWD4qHn9dQd1iWZN6ehifK85hESZfVKXyC7HmUAJ98bzMIKoGFdJtP9N2Kb9eawxc624vpXxfAuVN&#x2F;&#x2F;CAHKJ6JBTduTqW6SYAVU90a1sCp2Oo7BX2l2&#x2F;HP7jXQx7jc0jnEGqmER3j1JrAi7nFZ8thzOabQYovAmeJf09jT1FkQTpxayjZ6NKvVoOd&#x2F;PhPOY9tiC8sh17sz8&#x2F;JCbJbDreIO&#x2F;tqkSEm0n1auCvTCaVbDsMB6q4dwBbFEq0A1OEzbJkYmlfxH3uoZFqSEolE4ssDZSKRSCSSIBOJRCIJMpFIJJIgE4lEIgkykUgkkiATiUQiCTKRSCSSIBOJRCIJMpFIJJIgE4lEIgkykUgkkiATiUQikQSZSCQSSZCJRCKRBJlIJBJJkIlEIpEEmUgkEkmQiUQikQSZSCQSSZCJRCKRBJlIJBJJkIlEIpEEmUgkEokkyEQikUiCTCQSiSTIRCKRSIJMJBKJJMhEIpFIgkwkEokkyEQikUiCTCQSiSTIRCKRSIJMJBKJJMhEIpFIJEEmEolEEmQikUgkQSYSiUQSZCKRSPzZ+B+GrlwhibMxxQAAAABJRU5ErkJggg&#x3D;&#x3D;&quot;;function Sakura(x, y, s, r, fn) &#123;    this.x &#x3D; x;    this.y &#x3D; y;    this.s &#x3D; s;    this.r &#x3D; r;    this.fn &#x3D; fn;&#125;Sakura.prototype.draw &#x3D; function (cxt) &#123;    cxt.save();    var xc &#x3D; 40 * this.s &#x2F; 4;    cxt.translate(this.x, this.y);    cxt.rotate(this.r);    cxt.drawImage(img, 0, 0, 40 * this.s, 40 * this.s)    cxt.restore();&#125;Sakura.prototype.update &#x3D; function () &#123;    this.x &#x3D; this.fn.x(this.x, this.y);    this.y &#x3D; this.fn.y(this.y, this.y);    this.r &#x3D; this.fn.r(this.r);    if (this.x &gt; window.innerWidth || this.x &lt; 0 || this.y &gt; window.innerHeight || this.y &lt; 0) &#123;        this.r &#x3D; getRandom(&#39;fnr&#39;);        if (Math.random() &gt; 0.4) &#123;            this.x &#x3D; getRandom(&#39;x&#39;);            this.y &#x3D; 0;            this.s &#x3D; getRandom(&#39;s&#39;);            this.r &#x3D; getRandom(&#39;r&#39;);        &#125; else &#123;            this.x &#x3D; window.innerWidth;            this.y &#x3D; getRandom(&#39;y&#39;);            this.s &#x3D; getRandom(&#39;s&#39;);            this.r &#x3D; getRandom(&#39;r&#39;);        &#125;    &#125;&#125;SakuraList &#x3D; function () &#123;    this.list &#x3D; [];&#125;SakuraList.prototype.push &#x3D; function (sakura) &#123;    this.list.push(sakura);&#125;SakuraList.prototype.update &#x3D; function () &#123;    for (var i &#x3D; 0, len &#x3D; this.list.length; i &lt; len; i++) &#123;        this.list[i].update();    &#125;&#125;SakuraList.prototype.draw &#x3D; function (cxt) &#123;    for (var i &#x3D; 0, len &#x3D; this.list.length; i &lt; len; i++) &#123;        this.list[i].draw(cxt);    &#125;&#125;SakuraList.prototype.get &#x3D; function (i) &#123;    return this.list[i];&#125;SakuraList.prototype.size &#x3D; function () &#123;    return this.list.length;&#125;function getRandom(option) &#123;    var ret, random;    switch (option) &#123;        case &#39;x&#39;:            ret &#x3D; Math.random() * window.innerWidth;            break;        case &#39;y&#39;:            ret &#x3D; Math.random() * window.innerHeight;            break;        case &#39;s&#39;:            ret &#x3D; Math.random();            break;        case &#39;r&#39;:            ret &#x3D; Math.random() * 6;            break;        case &#39;fnx&#39;:            random &#x3D; -0.5 + Math.random() * 1;            ret &#x3D; function (x, y) &#123;                return x + 0.5 * random - 1.7;            &#125;;            break;        case &#39;fny&#39;:            random &#x3D; 1.5 + Math.random() * 0.7            ret &#x3D; function (x, y) &#123;                return y + random;            &#125;;            break;        case &#39;fnr&#39;:            random &#x3D; Math.random() * 0.03;            ret &#x3D; function (r) &#123;                return r + random;            &#125;;            break;    &#125;    return ret;&#125;function startSakura() &#123;    requestAnimationFrame &#x3D; window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;    var canvas &#x3D; document.createElement(&#39;canvas&#39;),        cxt;    staticx &#x3D; true;    canvas.height &#x3D; window.innerHeight;    canvas.width &#x3D; window.innerWidth;    canvas.setAttribute(&#39;style&#39;, &#39;position: fixed;left: 0;top: 0;pointer-events: none;&#39;);    canvas.setAttribute(&#39;id&#39;, &#39;canvas_sakura&#39;);    document.getElementsByTagName(&#39;body&#39;)[0].appendChild(canvas);    cxt &#x3D; canvas.getContext(&#39;2d&#39;);    var sakuraList &#x3D; new SakuraList();    for (var i &#x3D; 0; i &lt; 50; i++) &#123;        var sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;        randomX &#x3D; getRandom(&#39;x&#39;);        randomY &#x3D; getRandom(&#39;y&#39;);        randomR &#x3D; getRandom(&#39;r&#39;);        randomS &#x3D; getRandom(&#39;s&#39;);        randomFnx &#x3D; getRandom(&#39;fnx&#39;);        randomFny &#x3D; getRandom(&#39;fny&#39;);        randomFnR &#x3D; getRandom(&#39;fnr&#39;);        sakura &#x3D; new Sakura(randomX, randomY, randomS, randomR, &#123;            x: randomFnx,            y: randomFny,            r: randomFnR        &#125;);        sakura.draw(cxt);        sakuraList.push(sakura);    &#125;    stop &#x3D; requestAnimationFrame(function () &#123;        cxt.clearRect(0, 0, canvas.width, canvas.height);        sakuraList.update();        sakuraList.draw(cxt);        stop &#x3D; requestAnimationFrame(arguments.callee);    &#125;)&#125;window.onresize &#x3D; function () &#123;    var canvasSnow &#x3D; document.getElementById(&#39;canvas_snow&#39;);&#125;img.onload &#x3D; function () &#123;    startSakura();&#125;function stopp() &#123;    if (staticx) &#123;        var child &#x3D; document.getElementById(&quot;canvas_sakura&quot;);        child.parentNode.removeChild(child);        window.cancelAnimationFrame(stop);        staticx &#x3D; false;    &#125; else &#123;        startSakura();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 /themes/matery/layout/_partial/layout.ejs 中添加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.sakura.enable) &#123; %&gt;    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;    &#x2F;&#x2F;只在桌面版网页启用特效    var windowWidth &#x3D; $(window).width();    if (windowWidth &gt; 768) &#123;        document.write(&#39;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;sakura.js&quot;&gt;&lt;&#x2F;script&gt;&#39;);    &#125;    &lt;&#x2F;script&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在matery主题配置文件_config .yml中配置:</p><pre class="line-numbers language-none"><code class="language-none"># 页面樱花飘落动效sakura:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="关闭首页颜色变换"><a href="#关闭首页颜色变换" class="headerlink" title="关闭首页颜色变换"></a>关闭首页颜色变换</h3><p>进入主题文件的 <code>/source/css/matery.css</code>文件中，搜索 <code>rainbow</code>来关闭颜色变换：</p><pre class="line-numbers language-none"><code class="language-none">@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色.即滤镜颜色，不想要可以全部注释，或者换成你喜欢的颜色 *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色.，不想要可以全部注释，或者换成你喜欢的颜色 *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给卡片区添加背景"><a href="#给卡片区添加背景" class="headerlink" title="给卡片区添加背景"></a>给卡片区添加背景</h3><p>进入主题文件的 <code>/source/css/matery.css</code>文件中，有个 <code>body</code> 选择器，加了中间两行之后长这样：</p><pre class="line-numbers language-none"><code class="language-none">body &#123; background-color: #eaeaea;  background: linear-gradient(60deg, rgba(224,255,125, 0.5) 5%, rgba(0, 228, 255, 0.35)) 0% 0% &#x2F; cover；background-attachment: fixed;  margin: 0;  color: #34495e;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以加 <code>url</code> 用图片做背景：</p><pre class="line-numbers language-none"><code class="language-none">body &#123; background-color: #eaeaea;  background: url(&#39;你的图片地址&#39;)；  background-attachment: fixed;  margin: 0;  color: #34495e;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Matery-添加加载动画"><a href="#Matery-添加加载动画" class="headerlink" title="Matery 添加加载动画"></a>Matery 添加加载动画</h3><h5 id="1、在主题-layout-partial-目录新建一个loading-pages-ejs-内容如下："><a href="#1、在主题-layout-partial-目录新建一个loading-pages-ejs-内容如下：" class="headerlink" title="1、在主题 /layout/_partial/目录新建一个loading-pages.ejs 内容如下："></a>1、在主题 /layout/_partial/<code>目录新建一个</code>loading-pages.ejs 内容如下：</h5><pre class="line-numbers language-none"><code class="language-none">&lt;style type&#x3D;&quot;text&#x2F;css&quot; lang&#x3D;&quot;css&quot;&gt;    #loading-container&#123;        position: fixed;        top: 0;        left: 0;        min-height: 100vh;        width: 100vw;        z-index: 9999;        display: flex;        flex-direction: column;        justify-content: center;        align-items: center;        background: #FFF;        text-align: center;        &#x2F;* loader页面消失采用渐隐的方式*&#x2F;        -webkit-transition: opacity 1s ease;        -moz-transition: opacity 1s ease;        -o-transition: opacity 1s ease;        transition: opacity 1s ease;    &#125;    .loading-image&#123;        width: 120px;        height: 50px;        transform: translate(-50%);    &#125;    .loading-image div:nth-child(2) &#123;        -webkit-animation: pacman-balls 1s linear 0s infinite;        animation: pacman-balls 1s linear 0s infinite    &#125;    .loading-image div:nth-child(3) &#123;        -webkit-animation: pacman-balls 1s linear .33s infinite;        animation: pacman-balls 1s linear .33s infinite    &#125;    .loading-image div:nth-child(4) &#123;        -webkit-animation: pacman-balls 1s linear .66s infinite;        animation: pacman-balls 1s linear .66s infinite    &#125;    .loading-image div:nth-child(5) &#123;        -webkit-animation: pacman-balls 1s linear .99s infinite;        animation: pacman-balls 1s linear .99s infinite    &#125;   .loading-image div:first-of-type &#123;        width: 0;        height: 0;        border: 25px solid #49b1f5;        border-right-color: transparent;        border-radius: 25px;        -webkit-animation: rotate_pacman_half_up .5s 0s infinite;        animation: rotate_pacman_half_up .5s 0s infinite;    &#125;    .loading-image div:nth-child(2) &#123;        width: 0;        height: 0;        border: 25px solid #49b1f5;        border-right-color: transparent;        border-radius: 25px;        -webkit-animation: rotate_pacman_half_down .5s 0s infinite;        animation: rotate_pacman_half_down .5s 0s infinite;        margin-top: -50px;    &#125;    @-webkit-keyframes rotate_pacman_half_up &#123;0% &#123;transform: rotate(270deg)&#125;50% &#123;transform: rotate(1turn)&#125;to &#123;transform: rotate(270deg)&#125;&#125;    @keyframes rotate_pacman_half_up &#123;0% &#123;transform: rotate(270deg)&#125;50% &#123;transform: rotate(1turn)&#125;to &#123;transform: rotate(270deg)&#125;&#125;    @-webkit-keyframes rotate_pacman_half_down &#123;0% &#123;transform: rotate(90deg)&#125;50% &#123;transform: rotate(0deg)&#125;to &#123;transform: rotate(90deg)&#125;&#125;    @keyframes rotate_pacman_half_down &#123;0% &#123;transform: rotate(90deg)&#125;50% &#123;transform: rotate(0deg)&#125;to &#123;transform: rotate(90deg)&#125;&#125;    @-webkit-keyframes pacman-balls &#123;75% &#123;opacity: .7&#125;to &#123;transform: translate(-100px, -6.25px)&#125;&#125;    @keyframes pacman-balls &#123;75% &#123;opacity: .7&#125;to &#123;transform: translate(-100px, -6.25px)&#125;&#125;    .loading-image div:nth-child(3),    .loading-image div:nth-child(4),    .loading-image div:nth-child(5),    .loading-image div:nth-child(6)&#123;        background-color: #49b1f5;        width: 15px;        height: 15px;        border-radius: 100%;        margin: 2px;        width: 10px;        height: 10px;        position: absolute;        transform: translateY(-6.25px);        top: 25px;        left: 100px;    &#125;    .loading-text&#123;        margin-bottom: 20vh;        text-align: center;        color: #2c3e50;        font-size: 2rem;        box-sizing: border-box;        padding: 0 10px;        text-shadow: 0 2px 10px rgba(0,0,0,0.2);    &#125;    @media only screen and (max-width: 500px) &#123;         .loading-text&#123;            font-size: 1.5rem;         &#125;    &#125;    .fadeout &#123;        opacity: 0;        filter: alpha(opacity&#x3D;0);    &#125;    &#x2F;* logo出现动画 *&#x2F;    @-webkit-keyframes fadeInDown&#123;0%&#123;opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)&#125;100%&#123;opacity:1;-webkit-transform:none;transform:none&#125;&#125;    @keyframes fadeInDown&#123;0%&#123;opacity:0;-webkit-transform:translate3d(0,-100%,0);&#125;&#125; &lt;&#x2F;style&gt; &lt;script&gt;(function () &#123;    const loaded &#x3D; function()&#123;       setTimeout(function()&#123;            const loader &#x3D; document.getElementById(&quot;loading-container&quot;);            loader.className&#x3D;&quot;fadeout&quot; ;&#x2F;&#x2F;使用渐隐的方法淡出loading page            &#x2F;&#x2F; document.getElementById(&quot;body-wrap&quot;).style.display&#x3D;&quot;flex&quot;;            setTimeout(function()&#123;                loader.style.display&#x3D;&quot;none&quot;;            &#125;,2500);         &#125;,1000);&#x2F;&#x2F;强制显示loading page 1s      &#125;;    loaded();&#125;)()&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、在主题的-layout-目录找到-layout-ejs-文件"><a href="#2、在主题的-layout-目录找到-layout-ejs-文件" class="headerlink" title="2、在主题的 layout 目录找到 layout.ejs 文件"></a>2、在主题的 <code>layout</code> 目录找到 <code>layout.ejs</code> 文件</h5><p>在 <code>&lt;body&gt;</code> 附近添加内容后如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE HTML&gt;&lt;html lang&#x3D;&quot;&lt;%&#x3D; config.language %&gt;&quot;&gt;&lt;%- partial(&#39;_partial&#x2F;head&#39;) %&gt; &lt;% if (theme.loadingPages.enable) &#123; %&gt;    &lt;%- partial(&#39;_partial&#x2F;loading-pages&#39;) %&gt; &lt;% &#125; %&gt;&lt;body&gt;    &lt;% if (theme.loadingPages.enable) &#123; %&gt;        &lt;div id&#x3D;&quot;loading-container&quot;&gt;             &lt;p class&#x3D;&quot;loading-text&quot;&gt;嘘~  正在从服务器偷取页面 . . . &lt;&#x2F;p&gt;              &lt;div class&#x3D;&quot;loading-image&quot;&gt;                 &lt;div&gt;&lt;&#x2F;div&gt;                 &lt;div&gt;&lt;&#x2F;div&gt;                 &lt;div&gt;&lt;&#x2F;div&gt;                 &lt;div&gt;&lt;&#x2F;div&gt;                  &lt;div&gt;&lt;&#x2F;div&gt;             &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;% &#125; %&gt;    &lt;%- partial(&#39;_partial&#x2F;header&#39;) %&gt;    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、在博客主题配置文件-config-yml添加开关配置"><a href="#3、在博客主题配置文件-config-yml添加开关配置" class="headerlink" title="3、在博客主题配置文件_config.yml添加开关配置"></a>3、在博客主题配置文件<code>_config.yml</code>添加开关配置</h5><pre class="line-numbers language-none"><code class="language-none">loadingPages:  enable: true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>enable</code> 设置为 <code>true</code> 表示开启加载动画， <code>false</code> 表示关闭加载动画。</p><h3 id="主页新增关注我的Bilibili"><a href="#主页新增关注我的Bilibili" class="headerlink" title="主页新增关注我的Bilibili"></a>主页新增关注我的Bilibili</h3><p>进入主题路径<code>\layout\_partial\social-link.ejs</code></p><p>新增以下代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (theme.socialLink.bilibili) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.bilibili %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;在B站上关注我&quot; &lt;%&#x3D; theme.socialLink.bilbili %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fas fa-play-circle&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入主题配置文件<code>_config.yml</code></p><pre class="line-numbers language-none"><code class="language-none">bilibili: #https:&#x2F;&#x2F;space.bilibili.com&#x2F;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 优化类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用hexo、git搭建第一个个人博客网站</title>
      <link href="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/"/>
      <url>/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="用hexo、git、搭建第一个个人博客网站"><a href="#用hexo、git、搭建第一个个人博客网站" class="headerlink" title="用hexo、git、搭建第一个个人博客网站"></a>用hexo、git、搭建第一个个人博客网站</h1><h2 id="1-hexo、git"><a href="#1-hexo、git" class="headerlink" title="1.hexo、git"></a>1.hexo、git</h2><h3 id="1-1什么是hexo"><a href="#1-1什么是hexo" class="headerlink" title="1.1什么是hexo"></a>1.1什么是hexo</h3><ul><li>官网：<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="1-2什么是git"><a href="#1-2什么是git" class="headerlink" title="1.2什么是git"></a>1.2什么是git</h3><ul><li>官网：<a href="https://git-scm.com/">Git (git-scm.com)</a></li></ul><p>Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1] 也是[Linus Torvalds](<a href="https://baike.baidu.com/item/Linus">https://baike.baidu.com/item/Linus</a> Torvalds/9336769?fromModule=lemma_inlink)为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><ul><li>hexo-script使用说明文档：<a href="https://hexoscript.gitbook.io/">https://hexoscript.gitbook.io/</a></li></ul><h3 id="2-1选择中文文档"><a href="#2-1选择中文文档" class="headerlink" title="2.1选择中文文档"></a>2.1选择中文文档</h3><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/94c80db73f45407dcbe045b8b811f82.jpg"></p><h3 id="2-2点击准备工作"><a href="#2-2点击准备工作" class="headerlink" title="2.2点击准备工作"></a>2.2点击准备工作</h3><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/952bd46deebc1ddab1cda08fc5f61cd.jpg"></p><h3 id="2-3下载git工具"><a href="#2-3下载git工具" class="headerlink" title="2.3下载git工具"></a>2.3下载git工具</h3><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/e89b99fe76ccff436e2fbe577cad69b.jpg"></p><p>进入官网后点击下载</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/73cdf95156c92d8e007fa8b57769872.jpg"></p><p>根据自己的需求来下载32位或者64位的git</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/13b341753992ed7ee76ed0d8b6df522.jpg"></p><p>下载完毕后进行安装，一直点下一步即可。</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221022192324.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923241.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923242.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923243.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923244.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923245.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923246.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923247.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923248.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221923249.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2022102219232410.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2022102219232411.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2022102219232412.jpg"></p><p>等待安装</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2022102219232413.jpg"></p><p>安装成功</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2022102219232414.jpg"></p><h3 id="2-4下载Node-js"><a href="#2-4下载Node-js" class="headerlink" title="2.4下载Node.js"></a>2.4下载Node.js</h3><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/image-20221022192711189.png"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/e1835e633c9ad2d609977462f8e02f7.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/83da62da9ce061b7cffa0653ec34ca6.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936352.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936353.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936354.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936355.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936356.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936357.jpg"></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_202210221936358.jpg"></p><p>检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出如下结果：</p><pre class="line-numbers language-none"><code class="language-none">PATH&#x3D;C:\oraclexe\app\oracle\product\10.2.0\server\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;c:\python32\python;C:\MinGW\bin;C:\Program Files\GTK2-Runtime\lib;C:\Program Files\MySQL\MySQL Server 5.5\bin;C:\Program Files\nodejs\;C:\Users\rg\AppData\Roaming\npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到环境变量中已经包含了C:\Program Files\nodejs\</p><p>检查Node.js版本</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/7d7d0dda8949567d9a0d8d1a1fe57f0.jpg"></p><h3 id="2-5下载-hexo-script-的安装脚本"><a href="#2-5下载-hexo-script-的安装脚本" class="headerlink" title="2.5下载[hexo-script]的安装脚本"></a>2.5下载[hexo-script]的安装脚本</h3><p>你只需要在某个目录下,打开git bash然后执行下面这条命令即可下载完成</p><pre class="line-numbers language-none"><code class="language-none">curl -O https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;kjhuanhao&#x2F;hexo-script@master&#x2F;install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>我们更建议直接在</strong><a href="https://github.com/kjhuanhao/hexo-script/releases"><strong>releases</strong></a><strong>下载,选择最新版本,只需下载install.sh即可</strong></p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/b8b475f8f8add2359c812397865d96f.jpg"></p><p>建议新建一个目录存放此安装脚本,最好是你想存放博客文件的地方.</p><p>如图:我创建了一个[myblog]文件夹,然后在此文件夹下右键打开git bash</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/1.png"></p><p>然后运行了下载命令,安装脚本(install.sh)就会下载在你的当前文件夹中</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/2.png"></p><h2 id="3-检测node-js环境"><a href="#3-检测node-js环境" class="headerlink" title="3.检测node.js环境"></a>3.<strong>检测node.js环境</strong></h2><p><strong>test_node的使用</strong></p><p>在存放install.sh脚本的目录中,右键打开git bash然后运行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">source install.sh test_node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现了如图的情况证明环境变量是配置成功的</p><p>(出现了版本号和成功的提示信息代表配置成功)<img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/3.png" alt="3"></p><p>如果你并发现有版本号的出现,而是红色的错误信息,你可能需要手动配置node.js的环境变量,或者重新安装node.js并注意勾选<strong>Add to PATH</strong></p><h2 id="4-检测git环境"><a href="#4-检测git环境" class="headerlink" title="4.检测git环境"></a>4.<strong>检测git环境</strong></h2><p><strong>test_git的使用</strong></p><p>如果你想要检测git环境或者查看当前git的版本号,您可以在存放install.sh脚本的目录中,右键打开git bash运行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">source install.sh test_git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 一般情况下安装git工具后git环境是会自动配置的,可以无需检测git环境.此脚本可以用于linux系统,出现版本号信息则配置为成功.</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/4.png"></p><h2 id="5-一键安装hexo博客"><a href="#5-一键安装hexo博客" class="headerlink" title="5.一键安装hexo博客"></a>5.<strong>一键安装hexo博客</strong></h2><p><strong>hexo_win的使用</strong></p><p>您需要在存放install.sh脚本的目录中,右键打开git bash运行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">source install.sh hexo_win<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 提示:此时你可以去来一杯卡布奇诺,大约两分钟的时间,博客即可自动安装完成,如图:</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/5.png"></p><p>当您看到出现<code>Please run hexo s to check it out!</code>的提示,证明您已经安装成功,此时你可以运行hexo s 然后查看你的博客</p><pre class="line-numbers language-none"><code class="language-none">cd hexobloghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意:要先cd到hexoblog目录哦!执行以上命令即可</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/6.png"></p><p>可以看到出现了一段地址:<a href="http://localhost:4000/">http://localhost:4000</a></p><p>在浏览器访问:<a href="http://localhost:4000/">http://localhost:4000 </a>,你就可以在本地预览了,浏览情况如图:</p><p><img src="/2022/10/22/yong-hexo-git-da-jian-di-yi-ge-ge-ren-bo-ke-wang-zhan/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web类 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
